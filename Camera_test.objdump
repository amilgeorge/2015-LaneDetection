
Camera_test.elf:     file format elf32-littlenios2
Camera_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fc38 memsz 0x0000fc38 flags r-x
    LOAD off    0x00010c58 vaddr 0x0000fc58 paddr 0x00011744 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013230 vaddr 0x00013230 paddr 0x00013230 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f788  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  0000f944  0000f944  00010944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000fc58  00011744  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013230  00013230  00013230  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00013390  00013390  00012744  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012744  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ce8  00000000  00000000  00012768  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022d53  00000000  00000000  00013450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008dd1  00000000  00000000  000361a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ae20  00000000  00000000  0003ef74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020c0  00000000  00000000  00049d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000318d  00000000  00000000  0004be54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016c85  00000000  00000000  0004efe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00065c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00065cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006a0f5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006a0f8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006a0fb  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  0006a0fc  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0006a105  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  0006a10e  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000d  00000000  00000000  0006a117  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001f  00000000  00000000  0006a124  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0006fac4  00000000  00000000  0006a143  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000f944 l    d  .rodata	00000000 .rodata
0000fc58 l    d  .rwdata	00000000 .rwdata
00013230 l    d  .bss	00000000 .bss
00013390 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Camera_test_bsp//obj/HAL/src/crt0.o
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 main_cam_read.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f9a6 l     O .rodata	00000010 zeroes.4181
0000f9b6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002f10 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004a90 l     F .text	00000008 __fp_lock
00004a98 l     F .text	00000008 __fp_unlock
00004aac l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fc58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001009c l     O .rwdata	00000020 lc_ctype_charset
0001007c l     O .rwdata	00000020 lc_message_charset
000100bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f9e8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007404 l     F .text	000000fc __sprint_r.part.0
0000fb1c l     O .rodata	00000010 blanks.4125
0000fb0c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a8c0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cfec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d10c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d138 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d238 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d32c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d5ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011734 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000d878 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d9c0 l     F .text	00000038 alt_dev_reg
000106a4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dcac l     F .text	00000204 altera_avalon_jtag_uart_irq
0000deb0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e4d0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e8a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ed54 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ee8c l     F .text	00000050 alt_get_errno
0000eedc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006f4c g     F .text	00000074 _mprec_log10
00007038 g     F .text	0000008c __any_on
000091f8 g     F .text	00000054 _isatty_r
0000f9f4 g     O .rodata	00000028 __mprec_tinytens
0000d534 g     F .text	00000078 alt_main
00013290 g     O .bss	00000100 alt_irq
0000924c g     F .text	0000005c _lseek_r
00011744 g       *ABS*	00000000 __flash_rwdata_start
0000bb54 g     F .text	00000084 .hidden __eqdf2
00013390 g       *ABS*	00000000 __alt_heap_start
00000d84 g     F .text	0000003c printf
00009b70 g     F .text	0000009c _wcrtomb_r
00007264 g     F .text	0000005c __sseek
00004de0 g     F .text	00000010 __sinit
00009a00 g     F .text	00000154 __swbuf_r
000053b4 g     F .text	0000007c _setlocale_r
00004c4c g     F .text	00000064 __sfmoreglue
0000d5cc g     F .text	00000020 __malloc_unlock
000092a8 g     F .text	0000015c memmove
00004dc8 g     F .text	00000018 _cleanup
00006138 g     F .text	000000a8 _Balloc
0000bbd8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000008c0 g     F .text	0000006c LCD_Clear
00000a9c g     F .text	0000014c check_lcd_frame
00008cfc g     F .text	00000058 _fstat_r
0001324c g     O .bss	00000004 errno
000071e0 g     F .text	00000008 __seofread
00013254 g     O .bss	00000004 alt_argv
00019704 g       *ABS*	00000000 _gp
0000d848 g     F .text	00000030 usleep
00010524 g     O .rwdata	00000180 alt_fd_list
0000f2bc g     F .text	00000090 alt_find_dev
00005edc g     F .text	00000138 memcpy
00004aa0 g     F .text	0000000c _cleanup_r
0000ce14 g     F .text	000000d0 .hidden __floatsidf
0000ee14 g     F .text	00000078 alt_io_redirect
0000bcb8 g     F .text	000000e0 .hidden __ltdf2
0000f944 g       *ABS*	00000000 __DTOR_END__
0000f29c g     F .text	00000020 altera_nios2_irq_init
000070c4 g     F .text	00000074 __fpclassifyd
00006ea8 g     F .text	000000a4 __ratio
00008874 g     F .text	00000024 __vfiprintf_internal
0000e0ac g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000d58 g     F .text	0000002c _printf_r
0000a9dc g     F .text	00000008 .hidden __udivsi3
0000d288 g     F .text	000000a4 isatty
0000fa44 g     O .rodata	000000c8 __mprec_tens
00005430 g     F .text	0000000c __locale_charset
0000f514 g     F .text	0000008c alt_icache_flush
00013248 g     O .bss	00000004 __malloc_top_pad
0001170c g     O .rwdata	00000004 __mb_cur_max
00005460 g     F .text	0000000c _localeconv_r
00008d54 g     F .text	000004a4 __sfvwrite_r
00006538 g     F .text	0000003c __i2b
00007138 g     F .text	00000054 _sbrk_r
00009404 g     F .text	0000005c _read_r
0000092c g     F .text	000000e4 init_lcd_frame
0001172c g     O .rwdata	00000004 alt_max_fd
00008a0c g     F .text	00000100 _fclose_r
00004a60 g     F .text	00000030 fflush
00013244 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a9ec g     F .text	0000089c .hidden __adddf3
00006c50 g     F .text	0000011c __b2d
0000a330 g     F .text	00000590 .hidden __umoddi3
0000d460 g     F .text	000000d4 lseek
00011704 g     O .rwdata	00000004 _global_impure_ptr
00009460 g     F .text	000005a0 _realloc_r
00013390 g       *ABS*	00000000 __bss_end
0000ec64 g     F .text	000000f0 alt_iic_isr_register
0000f198 g     F .text	00000104 alt_tick
00009d70 g     F .text	000005c0 .hidden __udivdi3
00008b20 g     F .text	00000184 _fputwc_r
0000fa1c g     O .rodata	00000028 __mprec_bigtens
0000631c g     F .text	00000104 __s2b
0000cee4 g     F .text	000000a4 .hidden __floatunsidf
000069f8 g     F .text	00000060 __mcmp
00004e00 g     F .text	00000018 __fp_lock_all
0000ec18 g     F .text	0000004c alt_ic_irq_enabled
0000f100 g     F .text	00000098 alt_alarm_stop
0001325c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
000104fc g     O .rwdata	00000028 alt_dev_null
0000e864 g     F .text	00000044 alt_dcache_flush_all
00006420 g     F .text	00000068 __hi0bits
0000cd8c g     F .text	00000088 .hidden __fixdfsi
00011744 g       *ABS*	00000000 __ram_rwdata_end
00011724 g     O .rwdata	00000008 alt_dev_list
0000d8c8 g     F .text	000000f8 write
0000fc58 g       *ABS*	00000000 __ram_rodata_end
0000d188 g     F .text	000000b0 fstat
0000bcb8 g     F .text	000000e0 .hidden __ledf2
00006770 g     F .text	00000140 __pow5mult
00007518 g     F .text	0000135c ___vfiprintf_internal_r
0001323c g     O .bss	00000004 __nlocale_changed
0000a9e4 g     F .text	00000008 .hidden __umodsi3
00013390 g       *ABS*	00000000 end
0000dbe8 g     F .text	000000c4 altera_avalon_jtag_uart_init
0000f944 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000e544 g     F .text	00000088 alt_avalon_timer_sc_init
0000cf88 g     F .text	00000064 .hidden __clzsi2
0000e2b8 g     F .text	00000218 altera_avalon_jtag_uart_write
00004df0 g     F .text	00000004 __sfp_lock_acquire
00005df4 g     F .text	000000e8 memchr
00000dc0 g     F .text	00001ffc ___vfprintf_internal_r
00004f54 g     F .text	000002f0 _free_r
0000543c g     F .text	00000010 __locale_mb_cur_max
0000f77c g     F .text	00000194 __call_exitprocs
00013238 g     O .bss	00000004 __mlocale_changed
00011710 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
00013260 g     O .bss	00000004 _alt_tick_rate
000068b0 g     F .text	00000148 __lshift
00013264 g     O .bss	00000004 _alt_nticks
0000d63c g     F .text	000000fc read
0000da2c g     F .text	00000058 alt_sys_init
0000f668 g     F .text	00000114 __register_exitproc
00006574 g     F .text	000001fc __multiply
0000df58 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fc58 g       *ABS*	00000000 __ram_rwdata_start
0000f944 g       *ABS*	00000000 __ram_rodata_start
00013268 g     O .bss	00000028 __malloc_current_mallinfo
00006d6c g     F .text	0000013c __d2b
0000da84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f460 g     F .text	000000b4 alt_get_fd
0000e70c g     F .text	00000158 alt_busy_sleep
000088f4 g     F .text	00000054 _close_r
0000f5ec g     F .text	0000007c memcmp
0000db44 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013390 g       *ABS*	00000000 __alt_stack_base
0000db94 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002de0 g     F .text	00000130 __swsetup_r
0000b288 g     F .text	000008cc .hidden __divdf3
00004cb0 g     F .text	00000118 __sfp
00006fc0 g     F .text	00000078 __copybits
000100f4 g     O .rwdata	00000408 __malloc_av_
00004dfc g     F .text	00000004 __sinit_lock_release
0000bd98 g     F .text	00000724 .hidden __muldf3
0000718c g     F .text	00000054 __sread
0000f34c g     F .text	00000114 alt_find_file
0000e8f8 g     F .text	000000a4 alt_dev_llist_insert
0000d5ac g     F .text	00000020 __malloc_lock
0000d798 g     F .text	000000b0 sbrk
00004838 g     F .text	00000228 _fflush_r
00008948 g     F .text	000000c4 _calloc_r
00013230 g       *ABS*	00000000 __bss_start
00000254 g     F .text	0000066c LCD_Init
00006014 g     F .text	00000124 memset
00000be8 g     F .text	00000170 main
00013258 g     O .bss	00000004 alt_envp
00013240 g     O .bss	00000004 __malloc_max_total_mem
0000dae4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b54 g     F .text	0000001c __swbuf
000072c0 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008b0c g     F .text	00000014 fclose
00003110 g     F .text	00001728 _dtoa_r
0000564c g     F .text	000007a8 _malloc_r
00009ce4 g     F .text	00000030 __ascii_wctomb
00011730 g     O .rwdata	00000004 alt_errno
00000a10 g     F .text	0000008c print_pattern
00005244 g     F .text	000000b8 _fwalk
0000a92c g     F .text	00000054 .hidden __divsi3
00000208 g     F .text	0000004c Delay_Ms
00004e30 g     F .text	00000124 _malloc_trim_r
0000f944 g       *ABS*	00000000 __CTOR_END__
000072c8 g     F .text	000000a4 strcmp
0000f944 g       *ABS*	00000000 __flash_rodata_start
0000f944 g       *ABS*	00000000 __DTOR_LIST__
0000bb54 g     F .text	00000084 .hidden __nedf2
0000d9f8 g     F .text	00000034 alt_irq_init
0000d738 g     F .text	00000060 alt_release_fd
0000fb2c g     O .rodata	00000100 .hidden __clz_tab
00013234 g     O .bss	00000004 _PathLocale
0000f5a0 g     F .text	00000014 atexit
00008898 g     F .text	0000005c _write_r
0000546c g     F .text	0000001c setlocale
00011708 g     O .rwdata	00000004 _impure_ptr
00013250 g     O .bss	00000004 alt_argc
0000e9f8 g     F .text	0000005c _do_dtors
00005458 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006bf0 g     F .text	00000060 __ulp
00004e18 g     F .text	00000018 __fp_unlock_all
0001171c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005488 g     F .text	0000000c localeconv
0000ea84 g     F .text	00000050 alt_ic_isr_register
00011744 g       *ABS*	00000000 _edata
00013390 g       *ABS*	00000000 _end
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000dfc0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000eb74 g     F .text	000000a4 alt_ic_irq_disable
000071e8 g     F .text	0000007c __swrite
00011714 g     O .rwdata	00000004 __malloc_trim_threshold
0000544c g     F .text	0000000c __locale_msgcharset
0000f5b4 g     F .text	00000038 exit
000052fc g     F .text	000000b8 _fwalk_reent
00006a58 g     F .text	00000198 __mdiff
0000a980 g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004df4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00013230 g     O .bss	00000004 lcd_frame
0000f910 g     F .text	00000034 _exit
0000e5cc g     F .text	00000140 alt_alarm_start
00005494 g     F .text	000001b8 __smakebuf_r
0000736c g     F .text	00000098 strlen
0000efa8 g     F .text	00000158 open
0000bbd8 g     F .text	000000e0 .hidden __gedf2
00011718 g     O .rwdata	00000004 __wctomb
00007500 g     F .text	00000018 __sprint_r
0000ea54 g     F .text	00000030 alt_icache_flush_all
00011738 g     O .rwdata	00000004 alt_priority_mask
0000ead4 g     F .text	000000a0 alt_ic_irq_enable
00002dbc g     F .text	00000024 __vfprintf_internal
00009d14 g     F .text	0000005c _wctomb_r
0000c4bc g     F .text	000008d0 .hidden __subdf3
00006488 g     F .text	000000b0 __lo0bits
0001173c g     O .rwdata	00000008 alt_alarm_list
0000e99c g     F .text	0000005c _do_ctors
00009c0c g     F .text	000000d8 wcrtomb
0000d03c g     F .text	000000d0 close
0000d390 g     F .text	00000080 alt_load
00008ca4 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00004df8 g     F .text	00000004 __sinit_lock_acquire
00006208 g     F .text	00000114 __multadd
000061e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00810014 	movui	r2,1024
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	108ca404 	addi	r2,r2,12944
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	108ca404 	addi	r2,r2,12944
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00808014 	movui	r2,512
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d8:	d6a5c114 	ori	gp,gp,38660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e0:	108c8c14 	ori	r2,r2,12848

    movhi r3, %hi(__bss_end)
     1e4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e8:	18cce414 	ori	r3,r3,13200

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	000d3900 	call	d390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	000d5340 	call	d534 <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <alt_after_alt_main>

00000208 <Delay_Ms>:

/*The size of the lcd_frame is VGA although the LCD can only display 240 x 320 resolution*/
volatile unsigned char *lcd_frame;// __attribute__ ((section (".frame_buffer")));

void Delay_Ms(alt_u16 count_ms)
{
     208:	defffd04 	addi	sp,sp,-12
     20c:	dfc00215 	stw	ra,8(sp)
     210:	df000115 	stw	fp,4(sp)
     214:	df000104 	addi	fp,sp,4
     218:	2005883a 	mov	r2,r4
     21c:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
     220:	00000206 	br	22c <Delay_Ms+0x24>
    {
        usleep(1000);
     224:	0100fa04 	movi	r4,1000
     228:	000d8480 	call	d848 <usleep>
/*The size of the lcd_frame is VGA although the LCD can only display 240 x 320 resolution*/
volatile unsigned char *lcd_frame;// __attribute__ ((section (".frame_buffer")));

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
     22c:	e0bfff0b 	ldhu	r2,-4(fp)
     230:	10ffffc4 	addi	r3,r2,-1
     234:	e0ffff0d 	sth	r3,-4(fp)
     238:	10bfffcc 	andi	r2,r2,65535
     23c:	103ff91e 	bne	r2,zero,224 <Delay_Ms+0x1c>
    {
        usleep(1000);
    }
}
     240:	e037883a 	mov	sp,fp
     244:	dfc00117 	ldw	ra,4(sp)
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00204 	addi	sp,sp,8
     250:	f800283a 	ret

00000254 <LCD_Init>:


void LCD_Init()
{
     254:	defffe04 	addi	sp,sp,-8
     258:	dfc00115 	stw	ra,4(sp)
     25c:	df000015 	stw	fp,0(sp)
     260:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
     264:	00c00044 	movi	r3,1
     268:	0080c034 	movhi	r2,768
     26c:	10840404 	addi	r2,r2,4112
     270:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
     274:	01000044 	movi	r4,1
     278:	00002080 	call	208 <Delay_Ms>
	Clr_LCD_RST;
     27c:	0007883a 	mov	r3,zero
     280:	0080c034 	movhi	r2,768
     284:	10840404 	addi	r2,r2,4112
     288:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
     28c:	01000284 	movi	r4,10
     290:	00002080 	call	208 <Delay_Ms>
	Set_LCD_RST;
     294:	00c00044 	movi	r3,1
     298:	0080c034 	movhi	r2,768
     29c:	10840404 	addi	r2,r2,4112
     2a0:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
     2a4:	01001e04 	movi	r4,120
     2a8:	00002080 	call	208 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
     2ac:	00c00444 	movi	r3,17
     2b0:	0080c034 	movhi	r2,768
     2b4:	10840c04 	addi	r2,r2,4144
     2b8:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
     2bc:	00c033c4 	movi	r3,207
     2c0:	0080c034 	movhi	r2,768
     2c4:	10840c04 	addi	r2,r2,4144
     2c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     2cc:	0007883a 	mov	r3,zero
     2d0:	0080c034 	movhi	r2,768
     2d4:	10840d04 	addi	r2,r2,4148
     2d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
     2dc:	00c02044 	movi	r3,129
     2e0:	0080c034 	movhi	r2,768
     2e4:	10840d04 	addi	r2,r2,4148
     2e8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
     2ec:	00c03004 	movi	r3,192
     2f0:	0080c034 	movhi	r2,768
     2f4:	10840d04 	addi	r2,r2,4148
     2f8:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
     2fc:	00c03b44 	movi	r3,237
     300:	0080c034 	movhi	r2,768
     304:	10840c04 	addi	r2,r2,4144
     308:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
     30c:	00c01904 	movi	r3,100
     310:	0080c034 	movhi	r2,768
     314:	10840d04 	addi	r2,r2,4148
     318:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
     31c:	00c000c4 	movi	r3,3
     320:	0080c034 	movhi	r2,768
     324:	10840d04 	addi	r2,r2,4148
     328:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
     32c:	00c00484 	movi	r3,18
     330:	0080c034 	movhi	r2,768
     334:	10840d04 	addi	r2,r2,4148
     338:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
     33c:	00c02044 	movi	r3,129
     340:	0080c034 	movhi	r2,768
     344:	10840d04 	addi	r2,r2,4148
     348:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
     34c:	00c03a04 	movi	r3,232
     350:	0080c034 	movhi	r2,768
     354:	10840c04 	addi	r2,r2,4144
     358:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
     35c:	00c02144 	movi	r3,133
     360:	0080c034 	movhi	r2,768
     364:	10840d04 	addi	r2,r2,4148
     368:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     36c:	00c00044 	movi	r3,1
     370:	0080c034 	movhi	r2,768
     374:	10840d04 	addi	r2,r2,4148
     378:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
     37c:	00c1e604 	movi	r3,1944
     380:	0080c034 	movhi	r2,768
     384:	10840d04 	addi	r2,r2,4148
     388:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
     38c:	00c032c4 	movi	r3,203
     390:	0080c034 	movhi	r2,768
     394:	10840c04 	addi	r2,r2,4144
     398:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
     39c:	00c00e44 	movi	r3,57
     3a0:	0080c034 	movhi	r2,768
     3a4:	10840d04 	addi	r2,r2,4148
     3a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
     3ac:	00c00b04 	movi	r3,44
     3b0:	0080c034 	movhi	r2,768
     3b4:	10840d04 	addi	r2,r2,4148
     3b8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     3bc:	0007883a 	mov	r3,zero
     3c0:	0080c034 	movhi	r2,768
     3c4:	10840d04 	addi	r2,r2,4148
     3c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
     3cc:	00c00d04 	movi	r3,52
     3d0:	0080c034 	movhi	r2,768
     3d4:	10840d04 	addi	r2,r2,4148
     3d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
     3dc:	00c00084 	movi	r3,2
     3e0:	0080c034 	movhi	r2,768
     3e4:	10840d04 	addi	r2,r2,4148
     3e8:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
     3ec:	00c03dc4 	movi	r3,247
     3f0:	0080c034 	movhi	r2,768
     3f4:	10840c04 	addi	r2,r2,4144
     3f8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
     3fc:	00c00804 	movi	r3,32
     400:	0080c034 	movhi	r2,768
     404:	10840d04 	addi	r2,r2,4148
     408:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
     40c:	00c03a84 	movi	r3,234
     410:	0080c034 	movhi	r2,768
     414:	10840c04 	addi	r2,r2,4144
     418:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     41c:	0007883a 	mov	r3,zero
     420:	0080c034 	movhi	r2,768
     424:	10840d04 	addi	r2,r2,4148
     428:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     42c:	0007883a 	mov	r3,zero
     430:	0080c034 	movhi	r2,768
     434:	10840d04 	addi	r2,r2,4148
     438:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
     43c:	00c02c44 	movi	r3,177
     440:	0080c034 	movhi	r2,768
     444:	10840c04 	addi	r2,r2,4144
     448:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     44c:	0007883a 	mov	r3,zero
     450:	0080c034 	movhi	r2,768
     454:	10840d04 	addi	r2,r2,4148
     458:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
     45c:	00c006c4 	movi	r3,27
     460:	0080c034 	movhi	r2,768
     464:	10840d04 	addi	r2,r2,4148
     468:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
     46c:	00c02d84 	movi	r3,182
     470:	0080c034 	movhi	r2,768
     474:	10840c04 	addi	r2,r2,4144
     478:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
     47c:	00c00284 	movi	r3,10
     480:	0080c034 	movhi	r2,768
     484:	10840d04 	addi	r2,r2,4148
     488:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
     48c:	00c02884 	movi	r3,162
     490:	0080c034 	movhi	r2,768
     494:	10840d04 	addi	r2,r2,4148
     498:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
     49c:	00c03004 	movi	r3,192
     4a0:	0080c034 	movhi	r2,768
     4a4:	10840c04 	addi	r2,r2,4144
     4a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
     4ac:	00c00144 	movi	r3,5
     4b0:	0080c034 	movhi	r2,768
     4b4:	10840d04 	addi	r2,r2,4148
     4b8:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
     4bc:	00c03044 	movi	r3,193
     4c0:	0080c034 	movhi	r2,768
     4c4:	10840c04 	addi	r2,r2,4144
     4c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
     4cc:	00c00444 	movi	r3,17
     4d0:	0080c034 	movhi	r2,768
     4d4:	10840d04 	addi	r2,r2,4148
     4d8:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
     4dc:	00c03144 	movi	r3,197
     4e0:	0080c034 	movhi	r2,768
     4e4:	10840c04 	addi	r2,r2,4144
     4e8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
     4ec:	00c01144 	movi	r3,69
     4f0:	0080c034 	movhi	r2,768
     4f4:	10840d04 	addi	r2,r2,4148
     4f8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
     4fc:	00c01144 	movi	r3,69
     500:	0080c034 	movhi	r2,768
     504:	10840d04 	addi	r2,r2,4148
     508:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
     50c:	00c031c4 	movi	r3,199
     510:	0080c034 	movhi	r2,768
     514:	10840c04 	addi	r2,r2,4144
     518:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
     51c:	00c02884 	movi	r3,162
     520:	0080c034 	movhi	r2,768
     524:	10840d04 	addi	r2,r2,4148
     528:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
     52c:	00c00d84 	movi	r3,54
     530:	0080c034 	movhi	r2,768
     534:	10840c04 	addi	r2,r2,4144
     538:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
     53c:	00c00204 	movi	r3,8
     540:	0080c034 	movhi	r2,768
     544:	10840d04 	addi	r2,r2,4148
     548:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
     54c:	00c03c84 	movi	r3,242
     550:	0080c034 	movhi	r2,768
     554:	10840c04 	addi	r2,r2,4144
     558:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     55c:	0007883a 	mov	r3,zero
     560:	0080c034 	movhi	r2,768
     564:	10840d04 	addi	r2,r2,4148
     568:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
     56c:	00c00984 	movi	r3,38
     570:	0080c034 	movhi	r2,768
     574:	10840c04 	addi	r2,r2,4144
     578:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     57c:	00c00044 	movi	r3,1
     580:	0080c034 	movhi	r2,768
     584:	10840d04 	addi	r2,r2,4148
     588:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
     58c:	00c03804 	movi	r3,224
     590:	0080c034 	movhi	r2,768
     594:	10840c04 	addi	r2,r2,4144
     598:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
     59c:	00c003c4 	movi	r3,15
     5a0:	0080c034 	movhi	r2,768
     5a4:	10840d04 	addi	r2,r2,4148
     5a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
     5ac:	00c00984 	movi	r3,38
     5b0:	0080c034 	movhi	r2,768
     5b4:	10840d04 	addi	r2,r2,4148
     5b8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
     5bc:	00c00904 	movi	r3,36
     5c0:	0080c034 	movhi	r2,768
     5c4:	10840d04 	addi	r2,r2,4148
     5c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
     5cc:	00c002c4 	movi	r3,11
     5d0:	0080c034 	movhi	r2,768
     5d4:	10840d04 	addi	r2,r2,4148
     5d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
     5dc:	00c00384 	movi	r3,14
     5e0:	0080c034 	movhi	r2,768
     5e4:	10840d04 	addi	r2,r2,4148
     5e8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
     5ec:	00c00204 	movi	r3,8
     5f0:	0080c034 	movhi	r2,768
     5f4:	10840d04 	addi	r2,r2,4148
     5f8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
     5fc:	00c012c4 	movi	r3,75
     600:	0080c034 	movhi	r2,768
     604:	10840d04 	addi	r2,r2,4148
     608:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
     60c:	00c02a04 	movi	r3,168
     610:	0080c034 	movhi	r2,768
     614:	10840d04 	addi	r2,r2,4148
     618:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
     61c:	00c00ec4 	movi	r3,59
     620:	0080c034 	movhi	r2,768
     624:	10840d04 	addi	r2,r2,4148
     628:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
     62c:	00c00284 	movi	r3,10
     630:	0080c034 	movhi	r2,768
     634:	10840d04 	addi	r2,r2,4148
     638:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
     63c:	00c00504 	movi	r3,20
     640:	0080c034 	movhi	r2,768
     644:	10840d04 	addi	r2,r2,4148
     648:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
     64c:	00c00184 	movi	r3,6
     650:	0080c034 	movhi	r2,768
     654:	10840d04 	addi	r2,r2,4148
     658:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
     65c:	00c00404 	movi	r3,16
     660:	0080c034 	movhi	r2,768
     664:	10840d04 	addi	r2,r2,4148
     668:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
     66c:	00c00244 	movi	r3,9
     670:	0080c034 	movhi	r2,768
     674:	10840d04 	addi	r2,r2,4148
     678:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     67c:	0007883a 	mov	r3,zero
     680:	0080c034 	movhi	r2,768
     684:	10840d04 	addi	r2,r2,4148
     688:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
     68c:	00c03844 	movi	r3,225
     690:	0080c034 	movhi	r2,768
     694:	10840c04 	addi	r2,r2,4144
     698:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     69c:	0007883a 	mov	r3,zero
     6a0:	0080c034 	movhi	r2,768
     6a4:	10840d04 	addi	r2,r2,4148
     6a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
     6ac:	00c00704 	movi	r3,28
     6b0:	0080c034 	movhi	r2,768
     6b4:	10840d04 	addi	r2,r2,4148
     6b8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
     6bc:	00c00804 	movi	r3,32
     6c0:	0080c034 	movhi	r2,768
     6c4:	10840d04 	addi	r2,r2,4148
     6c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
     6cc:	00c00104 	movi	r3,4
     6d0:	0080c034 	movhi	r2,768
     6d4:	10840d04 	addi	r2,r2,4148
     6d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
     6dc:	00c00404 	movi	r3,16
     6e0:	0080c034 	movhi	r2,768
     6e4:	10840d04 	addi	r2,r2,4148
     6e8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
     6ec:	00c00204 	movi	r3,8
     6f0:	0080c034 	movhi	r2,768
     6f4:	10840d04 	addi	r2,r2,4148
     6f8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
     6fc:	00c00d04 	movi	r3,52
     700:	0080c034 	movhi	r2,768
     704:	10840d04 	addi	r2,r2,4148
     708:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
     70c:	00c011c4 	movi	r3,71
     710:	0080c034 	movhi	r2,768
     714:	10840d04 	addi	r2,r2,4148
     718:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
     71c:	00c01104 	movi	r3,68
     720:	0080c034 	movhi	r2,768
     724:	10840d04 	addi	r2,r2,4148
     728:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
     72c:	00c00144 	movi	r3,5
     730:	0080c034 	movhi	r2,768
     734:	10840d04 	addi	r2,r2,4148
     738:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
     73c:	00c002c4 	movi	r3,11
     740:	0080c034 	movhi	r2,768
     744:	10840d04 	addi	r2,r2,4148
     748:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
     74c:	00c00244 	movi	r3,9
     750:	0080c034 	movhi	r2,768
     754:	10840d04 	addi	r2,r2,4148
     758:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
     75c:	00c00bc4 	movi	r3,47
     760:	0080c034 	movhi	r2,768
     764:	10840d04 	addi	r2,r2,4148
     768:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
     76c:	00c00d84 	movi	r3,54
     770:	0080c034 	movhi	r2,768
     774:	10840d04 	addi	r2,r2,4148
     778:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
     77c:	00c003c4 	movi	r3,15
     780:	0080c034 	movhi	r2,768
     784:	10840d04 	addi	r2,r2,4148
     788:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
     78c:	00c00a84 	movi	r3,42
     790:	0080c034 	movhi	r2,768
     794:	10840c04 	addi	r2,r2,4144
     798:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     79c:	0007883a 	mov	r3,zero
     7a0:	0080c034 	movhi	r2,768
     7a4:	10840d04 	addi	r2,r2,4148
     7a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     7ac:	0007883a 	mov	r3,zero
     7b0:	0080c034 	movhi	r2,768
     7b4:	10840d04 	addi	r2,r2,4148
     7b8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     7bc:	0007883a 	mov	r3,zero
     7c0:	0080c034 	movhi	r2,768
     7c4:	10840d04 	addi	r2,r2,4148
     7c8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
     7cc:	00c03bc4 	movi	r3,239
     7d0:	0080c034 	movhi	r2,768
     7d4:	10840d04 	addi	r2,r2,4148
     7d8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
     7dc:	00c00ac4 	movi	r3,43
     7e0:	0080c034 	movhi	r2,768
     7e4:	10840c04 	addi	r2,r2,4144
     7e8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     7ec:	0007883a 	mov	r3,zero
     7f0:	0080c034 	movhi	r2,768
     7f4:	10840d04 	addi	r2,r2,4148
     7f8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     7fc:	0007883a 	mov	r3,zero
     800:	0080c034 	movhi	r2,768
     804:	10840d04 	addi	r2,r2,4148
     808:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     80c:	00c00044 	movi	r3,1
     810:	0080c034 	movhi	r2,768
     814:	10840d04 	addi	r2,r2,4148
     818:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
     81c:	00c00fc4 	movi	r3,63
     820:	0080c034 	movhi	r2,768
     824:	10840d04 	addi	r2,r2,4148
     828:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
     82c:	00c00e84 	movi	r3,58
     830:	0080c034 	movhi	r2,768
     834:	10840c04 	addi	r2,r2,4144
     838:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
     83c:	00c01544 	movi	r3,85
     840:	0080c034 	movhi	r2,768
     844:	10840d04 	addi	r2,r2,4148
     848:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
     84c:	00c03d84 	movi	r3,246
     850:	0080c034 	movhi	r2,768
     854:	10840c04 	addi	r2,r2,4144
     858:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     85c:	00c00044 	movi	r3,1
     860:	0080c034 	movhi	r2,768
     864:	10840d04 	addi	r2,r2,4148
     868:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
     86c:	00c00c04 	movi	r3,48
     870:	0080c034 	movhi	r2,768
     874:	10840d04 	addi	r2,r2,4148
     878:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     87c:	0007883a 	mov	r3,zero
     880:	0080c034 	movhi	r2,768
     884:	10840d04 	addi	r2,r2,4148
     888:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
     88c:	00c00a44 	movi	r3,41
     890:	0080c034 	movhi	r2,768
     894:	10840c04 	addi	r2,r2,4144
     898:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
     89c:	00c00b04 	movi	r3,44
     8a0:	0080c034 	movhi	r2,768
     8a4:	10840c04 	addi	r2,r2,4144
     8a8:	10c00035 	stwio	r3,0(r2)

}
     8ac:	e037883a 	mov	sp,fp
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	df000017 	ldw	fp,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
     8c0:	defffd04 	addi	sp,sp,-12
     8c4:	df000215 	stw	fp,8(sp)
     8c8:	df000204 	addi	fp,sp,8
     8cc:	2005883a 	mov	r2,r4
     8d0:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
     8d4:	e03ffe15 	stw	zero,-8(fp)
        LCD_WR_REG(0x002C);
     8d8:	00c00b04 	movi	r3,44
     8dc:	0080c034 	movhi	r2,768
     8e0:	10840c04 	addi	r2,r2,4144
     8e4:	10c00035 	stwio	r3,0(r2)
        //while(1)
        for(index=0;index<76800;index++)
     8e8:	e03ffe15 	stw	zero,-8(fp)
     8ec:	00000706 	br	90c <LCD_Clear+0x4c>
        {
        	LCD_WR_DATA(Color);
     8f0:	e0ffff0b 	ldhu	r3,-4(fp)
     8f4:	0080c034 	movhi	r2,768
     8f8:	10840d04 	addi	r2,r2,4148
     8fc:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_WR_REG(0x002C);
        //while(1)
        for(index=0;index<76800;index++)
     900:	e0bffe17 	ldw	r2,-8(fp)
     904:	10800044 	addi	r2,r2,1
     908:	e0bffe15 	stw	r2,-8(fp)
     90c:	e0fffe17 	ldw	r3,-8(fp)
     910:	00800074 	movhi	r2,1
     914:	108affc4 	addi	r2,r2,11263
     918:	10fff52e 	bgeu	r2,r3,8f0 <LCD_Clear+0x30>
        {
        	LCD_WR_DATA(Color);
        }


}
     91c:	e037883a 	mov	sp,fp
     920:	df000017 	ldw	fp,0(sp)
     924:	dec00104 	addi	sp,sp,4
     928:	f800283a 	ret

0000092c <init_lcd_frame>:

void init_lcd_frame()
{
     92c:	defffb04 	addi	sp,sp,-20
     930:	dfc00415 	stw	ra,16(sp)
     934:	df000315 	stw	fp,12(sp)
     938:	df000304 	addi	fp,sp,12

    unsigned int i, j = 0;
     93c:	e03ffe15 	stw	zero,-8(fp)
    unsigned short data = 0x00;
     940:	e03fff0d 	sth	zero,-4(fp)
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);
     944:	00a07c34 	movhi	r2,33264
     948:	d0a6cb15 	stw	r2,-25812(gp)
	printf("%x\n", lcd_frame);
     94c:	d0a6cb17 	ldw	r2,-25812(gp)
     950:	01000074 	movhi	r4,1
     954:	213e5104 	addi	r4,r4,-1724
     958:	100b883a 	mov	r5,r2
     95c:	0000d840 	call	d84 <printf>

	for (i = 0; i < 480; i++)
     960:	e03ffd15 	stw	zero,-12(fp)
     964:	00002206 	br	9f0 <init_lcd_frame+0xc4>
		for (j = 0; j < 640; j++)
     968:	e03ffe15 	stw	zero,-8(fp)
     96c:	00001a06 	br	9d8 <init_lcd_frame+0xac>
	   {
		   if (i < 320/3) data = (RED | GREEN | BLUE) ;
     970:	e0bffd17 	ldw	r2,-12(fp)
     974:	10801aa8 	cmpgeui	r2,r2,106
     978:	1000021e 	bne	r2,zero,984 <init_lcd_frame+0x58>
     97c:	00bfffc4 	movi	r2,-1
     980:	e0bfff0d 	sth	r2,-4(fp)

		   if ( (i >= 320/3) && (i < 2 * 320/3)) data = (SINGLE_SHIFT_RED | SINGLE_SHIFT_GREEN | SINGLE_SHIFT_BLUE);
     984:	e0bffd17 	ldw	r2,-12(fp)
     988:	10801ab0 	cmpltui	r2,r2,106
     98c:	1000051e 	bne	r2,zero,9a4 <init_lcd_frame+0x78>
     990:	e0bffd17 	ldw	r2,-12(fp)
     994:	10803568 	cmpgeui	r2,r2,213
     998:	1000021e 	bne	r2,zero,9a4 <init_lcd_frame+0x78>
     99c:	009efbc4 	movi	r2,31727
     9a0:	e0bfff0d 	sth	r2,-4(fp)

		   if (i >= 2 * 320/3) data = 0; //(TRIPPLE_SHIFT_RED | TRIPPLE_SHIFT_GREEN | TRIPPLE_SHIFT_BLUE);
     9a4:	e0bffd17 	ldw	r2,-12(fp)
     9a8:	10803570 	cmpltui	r2,r2,213
     9ac:	1000011e 	bne	r2,zero,9b4 <init_lcd_frame+0x88>
     9b0:	e03fff0d 	sth	zero,-4(fp)

		   *lcd_frame = data;
     9b4:	d0a6cb17 	ldw	r2,-25812(gp)
     9b8:	e0ffff0b 	ldhu	r3,-4(fp)
     9bc:	10c00005 	stb	r3,0(r2)
		   lcd_frame++;
     9c0:	d0a6cb17 	ldw	r2,-25812(gp)
     9c4:	10800044 	addi	r2,r2,1
     9c8:	d0a6cb15 	stw	r2,-25812(gp)
    unsigned short data = 0x00;
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);
	printf("%x\n", lcd_frame);

	for (i = 0; i < 480; i++)
		for (j = 0; j < 640; j++)
     9cc:	e0bffe17 	ldw	r2,-8(fp)
     9d0:	10800044 	addi	r2,r2,1
     9d4:	e0bffe15 	stw	r2,-8(fp)
     9d8:	e0bffe17 	ldw	r2,-8(fp)
     9dc:	1080a030 	cmpltui	r2,r2,640
     9e0:	103fe31e 	bne	r2,zero,970 <init_lcd_frame+0x44>
    unsigned int i, j = 0;
    unsigned short data = 0x00;
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);
	printf("%x\n", lcd_frame);

	for (i = 0; i < 480; i++)
     9e4:	e0bffd17 	ldw	r2,-12(fp)
     9e8:	10800044 	addi	r2,r2,1
     9ec:	e0bffd15 	stw	r2,-12(fp)
     9f0:	e0bffd17 	ldw	r2,-12(fp)
     9f4:	10807830 	cmpltui	r2,r2,480
     9f8:	103fdb1e 	bne	r2,zero,968 <init_lcd_frame+0x3c>

		   *lcd_frame = data;
		   lcd_frame++;
		   //IOWR(lcd_frame, (i*320 + j)*2, data);
	   }
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <print_pattern>:

void print_pattern()
{
     a10:	defffc04 	addi	sp,sp,-16
     a14:	df000315 	stw	fp,12(sp)
     a18:	df000304 	addi	fp,sp,12

    unsigned int i, j = 0;
     a1c:	e03ffe15 	stw	zero,-8(fp)
    unsigned short data = 0x00;
     a20:	e03fff0d 	sth	zero,-4(fp)
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);
     a24:	00a07c34 	movhi	r2,33264
     a28:	d0a6cb15 	stw	r2,-25812(gp)

	for (i = 0; i < 480; i++)
     a2c:	e03ffd15 	stw	zero,-12(fp)
     a30:	00001306 	br	a80 <print_pattern+0x70>
		for (j = 0; j < 640; j++)
     a34:	e03ffe15 	stw	zero,-8(fp)
     a38:	00000b06 	br	a68 <print_pattern+0x58>
	   {
		   *lcd_frame = *lcd_frame << 1;
     a3c:	d0e6cb17 	ldw	r3,-25812(gp)
     a40:	d0a6cb17 	ldw	r2,-25812(gp)
     a44:	10800003 	ldbu	r2,0(r2)
     a48:	1085883a 	add	r2,r2,r2
     a4c:	18800005 	stb	r2,0(r3)
		   lcd_frame++;
     a50:	d0a6cb17 	ldw	r2,-25812(gp)
     a54:	10800044 	addi	r2,r2,1
     a58:	d0a6cb15 	stw	r2,-25812(gp)
    unsigned int i, j = 0;
    unsigned short data = 0x00;
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);

	for (i = 0; i < 480; i++)
		for (j = 0; j < 640; j++)
     a5c:	e0bffe17 	ldw	r2,-8(fp)
     a60:	10800044 	addi	r2,r2,1
     a64:	e0bffe15 	stw	r2,-8(fp)
     a68:	e0bffe17 	ldw	r2,-8(fp)
     a6c:	1080a030 	cmpltui	r2,r2,640
     a70:	103ff21e 	bne	r2,zero,a3c <print_pattern+0x2c>

    unsigned int i, j = 0;
    unsigned short data = 0x00;
	lcd_frame = (volatile unsigned char*)(0x1f00000 | 0x80000000);

	for (i = 0; i < 480; i++)
     a74:	e0bffd17 	ldw	r2,-12(fp)
     a78:	10800044 	addi	r2,r2,1
     a7c:	e0bffd15 	stw	r2,-12(fp)
     a80:	e0bffd17 	ldw	r2,-12(fp)
     a84:	10807830 	cmpltui	r2,r2,480
     a88:	103fea1e 	bne	r2,zero,a34 <print_pattern+0x24>
	   {
		   *lcd_frame = *lcd_frame << 1;
		   lcd_frame++;
		   //IOWR(lcd_frame, (i*320 + j)*2, data);
	   }
}
     a8c:	e037883a 	mov	sp,fp
     a90:	df000017 	ldw	fp,0(sp)
     a94:	dec00104 	addi	sp,sp,4
     a98:	f800283a 	ret

00000a9c <check_lcd_frame>:

void check_lcd_frame()
{
     a9c:	defffb04 	addi	sp,sp,-20
     aa0:	dfc00415 	stw	ra,16(sp)
     aa4:	df000315 	stw	fp,12(sp)
     aa8:	df000304 	addi	fp,sp,12
	unsigned int i, j = 0;
     aac:	e03ffe15 	stw	zero,-8(fp)
	unsigned short data = 0x00;
     ab0:	e03fff0d 	sth	zero,-4(fp)
	lcd_frame = (volatile unsigned short*)(0x1f00000 | 0x80000000);
     ab4:	00a07c34 	movhi	r2,33264
     ab8:	d0a6cb15 	stw	r2,-25812(gp)
	printf("%x\n", lcd_frame);
     abc:	d0a6cb17 	ldw	r2,-25812(gp)
     ac0:	01000074 	movhi	r4,1
     ac4:	213e5104 	addi	r4,r4,-1724
     ac8:	100b883a 	mov	r5,r2
     acc:	0000d840 	call	d84 <printf>

	for (i = 0; i < 480; i++)
     ad0:	e03ffd15 	stw	zero,-12(fp)
     ad4:	00003c06 	br	bc8 <check_lcd_frame+0x12c>
		for (j = 0; j < 640; j++)
     ad8:	e03ffe15 	stw	zero,-8(fp)
     adc:	00003406 	br	bb0 <check_lcd_frame+0x114>
		{
			data = *lcd_frame; lcd_frame++;
     ae0:	d0a6cb17 	ldw	r2,-25812(gp)
     ae4:	10800003 	ldbu	r2,0(r2)
     ae8:	10803fcc 	andi	r2,r2,255
     aec:	e0bfff0d 	sth	r2,-4(fp)
     af0:	d0a6cb17 	ldw	r2,-25812(gp)
     af4:	10800044 	addi	r2,r2,1
     af8:	d0a6cb15 	stw	r2,-25812(gp)

			if (i < 110) {
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	10801ba8 	cmpgeui	r2,r2,110
     b04:	10000a1e 	bne	r2,zero,b30 <check_lcd_frame+0x94>
				if (data != BLUE) printf (" i = %u; j = %u, data = %x\n", i, j, data);
     b08:	e0bfff0b 	ldhu	r2,-4(fp)
     b0c:	108007e0 	cmpeqi	r2,r2,31
     b10:	1000071e 	bne	r2,zero,b30 <check_lcd_frame+0x94>
     b14:	e0bfff0b 	ldhu	r2,-4(fp)
     b18:	01000074 	movhi	r4,1
     b1c:	213e5204 	addi	r4,r4,-1720
     b20:	e17ffd17 	ldw	r5,-12(fp)
     b24:	e1bffe17 	ldw	r6,-8(fp)
     b28:	100f883a 	mov	r7,r2
     b2c:	0000d840 	call	d84 <printf>
			}

			if ( (i < 220) && (i >= 110) ) {
     b30:	e0bffd17 	ldw	r2,-12(fp)
     b34:	10803728 	cmpgeui	r2,r2,220
     b38:	10000d1e 	bne	r2,zero,b70 <check_lcd_frame+0xd4>
     b3c:	e0bffd17 	ldw	r2,-12(fp)
     b40:	10801bb0 	cmpltui	r2,r2,110
     b44:	10000a1e 	bne	r2,zero,b70 <check_lcd_frame+0xd4>
				if (data != GREEN) printf (" i = %u; j = %u, data = %x\n", i, i, data);
     b48:	e0bfff0b 	ldhu	r2,-4(fp)
     b4c:	1081f820 	cmpeqi	r2,r2,2016
     b50:	1000071e 	bne	r2,zero,b70 <check_lcd_frame+0xd4>
     b54:	e0bfff0b 	ldhu	r2,-4(fp)
     b58:	01000074 	movhi	r4,1
     b5c:	213e5204 	addi	r4,r4,-1720
     b60:	e17ffd17 	ldw	r5,-12(fp)
     b64:	e1bffd17 	ldw	r6,-12(fp)
     b68:	100f883a 	mov	r7,r2
     b6c:	0000d840 	call	d84 <printf>
			}

			if (i >= 220) {
     b70:	e0bffd17 	ldw	r2,-12(fp)
     b74:	10803730 	cmpltui	r2,r2,220
     b78:	10000a1e 	bne	r2,zero,ba4 <check_lcd_frame+0x108>
				if (data != RED) printf (" i = %u; j = %u, data = %x\n", i, i, data);
     b7c:	e0ffff0b 	ldhu	r3,-4(fp)
     b80:	00be0014 	movui	r2,63488
     b84:	18800726 	beq	r3,r2,ba4 <check_lcd_frame+0x108>
     b88:	e0bfff0b 	ldhu	r2,-4(fp)
     b8c:	01000074 	movhi	r4,1
     b90:	213e5204 	addi	r4,r4,-1720
     b94:	e17ffd17 	ldw	r5,-12(fp)
     b98:	e1bffd17 	ldw	r6,-12(fp)
     b9c:	100f883a 	mov	r7,r2
     ba0:	0000d840 	call	d84 <printf>
	unsigned short data = 0x00;
	lcd_frame = (volatile unsigned short*)(0x1f00000 | 0x80000000);
	printf("%x\n", lcd_frame);

	for (i = 0; i < 480; i++)
		for (j = 0; j < 640; j++)
     ba4:	e0bffe17 	ldw	r2,-8(fp)
     ba8:	10800044 	addi	r2,r2,1
     bac:	e0bffe15 	stw	r2,-8(fp)
     bb0:	e0bffe17 	ldw	r2,-8(fp)
     bb4:	1080a030 	cmpltui	r2,r2,640
     bb8:	103fc91e 	bne	r2,zero,ae0 <check_lcd_frame+0x44>
	unsigned int i, j = 0;
	unsigned short data = 0x00;
	lcd_frame = (volatile unsigned short*)(0x1f00000 | 0x80000000);
	printf("%x\n", lcd_frame);

	for (i = 0; i < 480; i++)
     bbc:	e0bffd17 	ldw	r2,-12(fp)
     bc0:	10800044 	addi	r2,r2,1
     bc4:	e0bffd15 	stw	r2,-12(fp)
     bc8:	e0bffd17 	ldw	r2,-12(fp)
     bcc:	10807830 	cmpltui	r2,r2,480
     bd0:	103fc11e 	bne	r2,zero,ad8 <check_lcd_frame+0x3c>

			if (i >= 220) {
				if (data != RED) printf (" i = %u; j = %u, data = %x\n", i, i, data);
			}
		}
}
     bd4:	e037883a 	mov	sp,fp
     bd8:	dfc00117 	ldw	ra,4(sp)
     bdc:	df000017 	ldw	fp,0(sp)
     be0:	dec00204 	addi	sp,sp,8
     be4:	f800283a 	ret

00000be8 <main>:
#include "main.h"
//#include "head.h"
int main() {
     be8:	defff304 	addi	sp,sp,-52
     bec:	dfc00c15 	stw	ra,48(sp)
     bf0:	df000b15 	stw	fp,44(sp)
     bf4:	df000b04 	addi	fp,sp,44

	unsigned int i, j = 0;
     bf8:	e03ff615 	stw	zero,-40(fp)

	volatile unsigned int *pLcdDestReg =
     bfc:	00a0c034 	movhi	r2,33536
     c00:	10840004 	addi	r2,r2,4096
     c04:	e0bff815 	stw	r2,-32(fp)
			(volatile unsigned int*) (LCD_DEST_REG_ADDR);
	volatile unsigned int *pLcdWidthReg =
     c08:	00a0c034 	movhi	r2,33536
     c0c:	10840104 	addi	r2,r2,4100
     c10:	e0bff915 	stw	r2,-28(fp)
			(volatile unsigned int*) (LCD_WIDTH_REG_ADDR);
	volatile unsigned int *pLcdHeightReg =
     c14:	00a0c034 	movhi	r2,33536
     c18:	10840204 	addi	r2,r2,4104
     c1c:	e0bffa15 	stw	r2,-24(fp)
			(volatile unsigned int*) (LCD_HEIGHT_REG_ADDR);
	volatile unsigned int *pLcdCmdReg =
     c20:	00a0c034 	movhi	r2,33536
     c24:	10840304 	addi	r2,r2,4108
     c28:	e0bffb15 	stw	r2,-20(fp)
			(volatile unsigned int*) (LCD_CMD_REG_ADDR);

	volatile unsigned int *pCam = (volatile unsigned int*) (OV7670_0_BASE
     c2c:	00a10034 	movhi	r2,33792
     c30:	e0bffc15 	stw	r2,-16(fp)
			| 0x80000000);
	volatile unsigned char pid[2] = { 0, 0 };
     c34:	e03fff05 	stb	zero,-4(fp)
     c38:	e03fff45 	stb	zero,-3(fp)

	*pLcdCmdReg = 0; // make sure that the DMA is stopped before calling the LCD init functions
     c3c:	e0bffb17 	ldw	r2,-20(fp)
     c40:	10000015 	stw	zero,0(r2)
	*pCam = 0;
     c44:	e0bffc17 	ldw	r2,-16(fp)
     c48:	10000015 	stw	zero,0(r2)
	LCD_Init();
     c4c:	00002540 	call	254 <LCD_Init>
	LCD_Clear(0X00ff);
     c50:	01003fc4 	movi	r4,255
     c54:	00008c00 	call	8c0 <LCD_Clear>
	//init_lcd_frame();

	printf("%x\n", lcd_frame);
     c58:	d0a6cb17 	ldw	r2,-25812(gp)
     c5c:	01000074 	movhi	r4,1
     c60:	213e5104 	addi	r4,r4,-1724
     c64:	100b883a 	mov	r5,r2
     c68:	0000d840 	call	d84 <printf>

	*pCam = 1; // turns the camera ON. Camera turns on with the next new frame
     c6c:	e0bffc17 	ldw	r2,-16(fp)
     c70:	00c00044 	movi	r3,1
     c74:	10c00015 	stw	r3,0(r2)
	Delay_Ms(2000); // add delay to be sure that frames are already in the memory
     c78:	0101f404 	movi	r4,2000
     c7c:	00002080 	call	208 <Delay_Ms>

	*pLcdDestReg = LT24_CONTROLLER_0_BASE + 4;
     c80:	e0fff817 	ldw	r3,-32(fp)
     c84:	0080c034 	movhi	r2,768
     c88:	10840d04 	addi	r2,r2,4148
     c8c:	18800015 	stw	r2,0(r3)
	*pLcdWidthReg = 240; // LCD width
     c90:	e0bff917 	ldw	r2,-28(fp)
     c94:	00c03c04 	movi	r3,240
     c98:	10c00015 	stw	r3,0(r2)
	*pLcdHeightReg = 320; // LCD height
     c9c:	e0bffa17 	ldw	r2,-24(fp)
     ca0:	00c05004 	movi	r3,320
     ca4:	10c00015 	stw	r3,0(r2)

	volatile unsigned char *pCamAddress = (volatile unsigned char*) (0x1f00000
     ca8:	00a07c34 	movhi	r2,33264
     cac:	e0bffd15 	stw	r2,-12(fp)
	//printf ("%x\n",*pLcdCmdReg) ;

	//volatile unsigned char *image=(volatile unsigned char *)pCamAddress;


	int iter =0;
     cb0:	e03ffe15 	stw	zero,-8(fp)
	while (1) {
		int count = 0;
     cb4:	e03ff715 	stw	zero,-36(fp)
		for (i = 0; i < 320; i++) {
     cb8:	e03ff515 	stw	zero,-44(fp)
     cbc:	00002206 	br	d48 <main+0x160>
			for (j = 0; j < 240; j++) {
     cc0:	e03ff615 	stw	zero,-40(fp)
     cc4:	00001a06 	br	d30 <main+0x148>

			if (pCamAddress[640 * j + i] < 128) {
     cc8:	e0bff617 	ldw	r2,-40(fp)
     ccc:	10c0a024 	muli	r3,r2,640
     cd0:	e0bff517 	ldw	r2,-44(fp)
     cd4:	1885883a 	add	r2,r3,r2
     cd8:	e0fffd17 	ldw	r3,-12(fp)
     cdc:	1885883a 	add	r2,r3,r2
     ce0:	10800003 	ldbu	r2,0(r2)
     ce4:	10803fcc 	andi	r2,r2,255
     ce8:	1080201c 	xori	r2,r2,128
     cec:	10bfe004 	addi	r2,r2,-128
     cf0:	10000516 	blt	r2,zero,d08 <main+0x120>
			//	if(i < 160){
					//LCD_WR_DATA(0Xffff);
			     	LCD_WR_DATA(0X0000);
     cf4:	0007883a 	mov	r3,zero
     cf8:	0080c034 	movhi	r2,768
     cfc:	10840d04 	addi	r2,r2,4148
     d00:	10c00035 	stwio	r3,0(r2)
     d04:	00000406 	br	d18 <main+0x130>
					//printf("here");

				} else {
					LCD_WR_DATA(0Xffff);
     d08:	00ffffd4 	movui	r3,65535
     d0c:	0080c034 	movhi	r2,768
     d10:	10840d04 	addi	r2,r2,4148
     d14:	10c00035 	stwio	r3,0(r2)



				}

				count++;
     d18:	e0bff717 	ldw	r2,-36(fp)
     d1c:	10800044 	addi	r2,r2,1
     d20:	e0bff715 	stw	r2,-36(fp)

	int iter =0;
	while (1) {
		int count = 0;
		for (i = 0; i < 320; i++) {
			for (j = 0; j < 240; j++) {
     d24:	e0bff617 	ldw	r2,-40(fp)
     d28:	10800044 	addi	r2,r2,1
     d2c:	e0bff615 	stw	r2,-40(fp)
     d30:	e0bff617 	ldw	r2,-40(fp)
     d34:	10803c30 	cmpltui	r2,r2,240
     d38:	103fe31e 	bne	r2,zero,cc8 <main+0xe0>


	int iter =0;
	while (1) {
		int count = 0;
		for (i = 0; i < 320; i++) {
     d3c:	e0bff517 	ldw	r2,-44(fp)
     d40:	10800044 	addi	r2,r2,1
     d44:	e0bff515 	stw	r2,-44(fp)
     d48:	e0bff517 	ldw	r2,-44(fp)
     d4c:	10805030 	cmpltui	r2,r2,320
     d50:	103fdb1e 	bne	r2,zero,cc0 <main+0xd8>

		}

		//Delay_Ms(2000);
		//sprintf("iter : %d", iter++);
	}
     d54:	003fd706 	br	cb4 <main+0xcc>

00000d58 <_printf_r>:
     d58:	defffd04 	addi	sp,sp,-12
     d5c:	dfc00015 	stw	ra,0(sp)
     d60:	d9800115 	stw	r6,4(sp)
     d64:	d9c00215 	stw	r7,8(sp)
     d68:	280d883a 	mov	r6,r5
     d6c:	21400217 	ldw	r5,8(r4)
     d70:	d9c00104 	addi	r7,sp,4
     d74:	0000dc00 	call	dc0 <___vfprintf_internal_r>
     d78:	dfc00017 	ldw	ra,0(sp)
     d7c:	dec00304 	addi	sp,sp,12
     d80:	f800283a 	ret

00000d84 <printf>:
     d84:	defffc04 	addi	sp,sp,-16
     d88:	dfc00015 	stw	ra,0(sp)
     d8c:	d9400115 	stw	r5,4(sp)
     d90:	d9800215 	stw	r6,8(sp)
     d94:	d9c00315 	stw	r7,12(sp)
     d98:	00800074 	movhi	r2,1
     d9c:	1085c204 	addi	r2,r2,5896
     da0:	10800017 	ldw	r2,0(r2)
     da4:	200b883a 	mov	r5,r4
     da8:	d9800104 	addi	r6,sp,4
     dac:	11000217 	ldw	r4,8(r2)
     db0:	0002dbc0 	call	2dbc <__vfprintf_internal>
     db4:	dfc00017 	ldw	ra,0(sp)
     db8:	dec00404 	addi	sp,sp,16
     dbc:	f800283a 	ret

00000dc0 <___vfprintf_internal_r>:
     dc0:	defeb604 	addi	sp,sp,-1320
     dc4:	dfc14915 	stw	ra,1316(sp)
     dc8:	ddc14715 	stw	r23,1308(sp)
     dcc:	dd814615 	stw	r22,1304(sp)
     dd0:	282f883a 	mov	r23,r5
     dd4:	202d883a 	mov	r22,r4
     dd8:	d9812a15 	stw	r6,1192(sp)
     ddc:	d9c12d15 	stw	r7,1204(sp)
     de0:	df014815 	stw	fp,1312(sp)
     de4:	dd414515 	stw	r21,1300(sp)
     de8:	dd014415 	stw	r20,1296(sp)
     dec:	dcc14315 	stw	r19,1292(sp)
     df0:	dc814215 	stw	r18,1288(sp)
     df4:	dc414115 	stw	r17,1284(sp)
     df8:	dc014015 	stw	r16,1280(sp)
     dfc:	00054600 	call	5460 <_localeconv_r>
     e00:	10800017 	ldw	r2,0(r2)
     e04:	1009883a 	mov	r4,r2
     e08:	d8813515 	stw	r2,1236(sp)
     e0c:	000736c0 	call	736c <strlen>
     e10:	d8813815 	stw	r2,1248(sp)
     e14:	b0000226 	beq	r22,zero,e20 <___vfprintf_internal_r+0x60>
     e18:	b0800e17 	ldw	r2,56(r22)
     e1c:	10010426 	beq	r2,zero,1230 <___vfprintf_internal_r+0x470>
     e20:	b8c0030b 	ldhu	r3,12(r23)
     e24:	1908000c 	andi	r4,r3,8192
     e28:	1805883a 	mov	r2,r3
     e2c:	2000071e 	bne	r4,zero,e4c <___vfprintf_internal_r+0x8c>
     e30:	b9001917 	ldw	r4,100(r23)
     e34:	18880014 	ori	r2,r3,8192
     e38:	00f7ffc4 	movi	r3,-8193
     e3c:	20c8703a 	and	r4,r4,r3
     e40:	b880030d 	sth	r2,12(r23)
     e44:	1007883a 	mov	r3,r2
     e48:	b9001915 	stw	r4,100(r23)
     e4c:	1100020c 	andi	r4,r2,8
     e50:	2000a726 	beq	r4,zero,10f0 <___vfprintf_internal_r+0x330>
     e54:	b9000417 	ldw	r4,16(r23)
     e58:	2000a526 	beq	r4,zero,10f0 <___vfprintf_internal_r+0x330>
     e5c:	1080068c 	andi	r2,r2,26
     e60:	01000284 	movi	r4,10
     e64:	1100ab26 	beq	r2,r4,1114 <___vfprintf_internal_r+0x354>
     e68:	dac10e04 	addi	r11,sp,1080
     e6c:	db010dc4 	addi	r12,sp,1079
     e70:	d8800404 	addi	r2,sp,16
     e74:	05000074 	movhi	r20,1
     e78:	dac12815 	stw	r11,1184(sp)
     e7c:	5b17c83a 	sub	r11,r11,r12
     e80:	a53e6984 	addi	r20,r20,-1626
     e84:	db012915 	stw	r12,1188(sp)
     e88:	d8811e15 	stw	r2,1144(sp)
     e8c:	d8012015 	stw	zero,1152(sp)
     e90:	d8011f15 	stw	zero,1148(sp)
     e94:	d8013315 	stw	zero,1228(sp)
     e98:	d8013715 	stw	zero,1244(sp)
     e9c:	d8013915 	stw	zero,1252(sp)
     ea0:	d8013b15 	stw	zero,1260(sp)
     ea4:	d8013a15 	stw	zero,1256(sp)
     ea8:	d8012f15 	stw	zero,1212(sp)
     eac:	1011883a 	mov	r8,r2
     eb0:	dac13c15 	stw	r11,1264(sp)
     eb4:	db012a17 	ldw	r12,1192(sp)
     eb8:	60800007 	ldb	r2,0(r12)
     ebc:	1000df26 	beq	r2,zero,123c <___vfprintf_internal_r+0x47c>
     ec0:	00c00944 	movi	r3,37
     ec4:	10c0dd26 	beq	r2,r3,123c <___vfprintf_internal_r+0x47c>
     ec8:	6021883a 	mov	r16,r12
     ecc:	00000106 	br	ed4 <___vfprintf_internal_r+0x114>
     ed0:	10c08426 	beq	r2,r3,10e4 <___vfprintf_internal_r+0x324>
     ed4:	84000044 	addi	r16,r16,1
     ed8:	80800007 	ldb	r2,0(r16)
     edc:	103ffc1e 	bne	r2,zero,ed0 <___vfprintf_internal_r+0x110>
     ee0:	dac12a17 	ldw	r11,1192(sp)
     ee4:	82e3c83a 	sub	r17,r16,r11
     ee8:	88000f26 	beq	r17,zero,f28 <___vfprintf_internal_r+0x168>
     eec:	d8c12017 	ldw	r3,1152(sp)
     ef0:	d8811f17 	ldw	r2,1148(sp)
     ef4:	dac12a17 	ldw	r11,1192(sp)
     ef8:	1c47883a 	add	r3,r3,r17
     efc:	10800044 	addi	r2,r2,1
     f00:	d8c12015 	stw	r3,1152(sp)
     f04:	42c00015 	stw	r11,0(r8)
     f08:	44400115 	stw	r17,4(r8)
     f0c:	d8811f15 	stw	r2,1148(sp)
     f10:	00c001c4 	movi	r3,7
     f14:	1880b416 	blt	r3,r2,11e8 <___vfprintf_internal_r+0x428>
     f18:	42000204 	addi	r8,r8,8
     f1c:	db012f17 	ldw	r12,1212(sp)
     f20:	6459883a 	add	r12,r12,r17
     f24:	db012f15 	stw	r12,1212(sp)
     f28:	80800007 	ldb	r2,0(r16)
     f2c:	1000b526 	beq	r2,zero,1204 <___vfprintf_internal_r+0x444>
     f30:	80800044 	addi	r2,r16,1
     f34:	84000047 	ldb	r16,1(r16)
     f38:	d8012785 	stb	zero,1182(sp)
     f3c:	000d883a 	mov	r6,zero
     f40:	027fffc4 	movi	r9,-1
     f44:	d8012e15 	stw	zero,1208(sp)
     f48:	0023883a 	mov	r17,zero
     f4c:	01001604 	movi	r4,88
     f50:	01400244 	movi	r5,9
     f54:	02800a84 	movi	r10,42
     f58:	01c01b04 	movi	r7,108
     f5c:	10c00044 	addi	r3,r2,1
     f60:	80bff804 	addi	r2,r16,-32
     f64:	2082f236 	bltu	r4,r2,1b30 <___vfprintf_internal_r+0xd70>
     f68:	100490ba 	slli	r2,r2,2
     f6c:	02c00034 	movhi	r11,0
     f70:	5ac3e004 	addi	r11,r11,3968
     f74:	12c5883a 	add	r2,r2,r11
     f78:	10800017 	ldw	r2,0(r2)
     f7c:	1000683a 	jmp	r2
     f80:	00001978 	rdprs	zero,zero,101
     f84:	00001b30 	cmpltui	zero,zero,108
     f88:	00001b30 	cmpltui	zero,zero,108
     f8c:	00001998 	cmpnei	zero,zero,102
     f90:	00001b30 	cmpltui	zero,zero,108
     f94:	00001b30 	cmpltui	zero,zero,108
     f98:	00001b30 	cmpltui	zero,zero,108
     f9c:	00001b30 	cmpltui	zero,zero,108
     fa0:	00001b30 	cmpltui	zero,zero,108
     fa4:	00001b30 	cmpltui	zero,zero,108
     fa8:	00001af4 	movhi	zero,107
     fac:	00001b20 	cmpeqi	zero,zero,108
     fb0:	00001b30 	cmpltui	zero,zero,108
     fb4:	00001244 	movi	zero,73
     fb8:	00001254 	movui	zero,73
     fbc:	00001b30 	cmpltui	zero,zero,108
     fc0:	00001294 	movui	zero,74
     fc4:	00001788 	cmpgei	zero,zero,94
     fc8:	00001788 	cmpgei	zero,zero,94
     fcc:	00001788 	cmpgei	zero,zero,94
     fd0:	00001788 	cmpgei	zero,zero,94
     fd4:	00001788 	cmpgei	zero,zero,94
     fd8:	00001788 	cmpgei	zero,zero,94
     fdc:	00001788 	cmpgei	zero,zero,94
     fe0:	00001788 	cmpgei	zero,zero,94
     fe4:	00001788 	cmpgei	zero,zero,94
     fe8:	00001b30 	cmpltui	zero,zero,108
     fec:	00001b30 	cmpltui	zero,zero,108
     ff0:	00001b30 	cmpltui	zero,zero,108
     ff4:	00001b30 	cmpltui	zero,zero,108
     ff8:	00001b30 	cmpltui	zero,zero,108
     ffc:	00001b30 	cmpltui	zero,zero,108
    1000:	00001b30 	cmpltui	zero,zero,108
    1004:	00001b30 	cmpltui	zero,zero,108
    1008:	00001b30 	cmpltui	zero,zero,108
    100c:	00001b30 	cmpltui	zero,zero,108
    1010:	000017bc 	xorhi	zero,zero,94
    1014:	000012a4 	muli	zero,zero,74
    1018:	00001b30 	cmpltui	zero,zero,108
    101c:	000012a4 	muli	zero,zero,74
    1020:	00001b30 	cmpltui	zero,zero,108
    1024:	00001b30 	cmpltui	zero,zero,108
    1028:	00001b30 	cmpltui	zero,zero,108
    102c:	00001b30 	cmpltui	zero,zero,108
    1030:	00001348 	cmpgei	zero,zero,77
    1034:	00001b30 	cmpltui	zero,zero,108
    1038:	00001b30 	cmpltui	zero,zero,108
    103c:	00001358 	cmpnei	zero,zero,77
    1040:	00001b30 	cmpltui	zero,zero,108
    1044:	00001b30 	cmpltui	zero,zero,108
    1048:	00001b30 	cmpltui	zero,zero,108
    104c:	00001b30 	cmpltui	zero,zero,108
    1050:	00001b30 	cmpltui	zero,zero,108
    1054:	00001754 	movui	zero,93
    1058:	00001b30 	cmpltui	zero,zero,108
    105c:	00001b30 	cmpltui	zero,zero,108
    1060:	00001804 	movi	zero,96
    1064:	00001b30 	cmpltui	zero,zero,108
    1068:	00001b30 	cmpltui	zero,zero,108
    106c:	00001b30 	cmpltui	zero,zero,108
    1070:	00001b30 	cmpltui	zero,zero,108
    1074:	00001b30 	cmpltui	zero,zero,108
    1078:	00001b30 	cmpltui	zero,zero,108
    107c:	00001b30 	cmpltui	zero,zero,108
    1080:	00001b30 	cmpltui	zero,zero,108
    1084:	00001b30 	cmpltui	zero,zero,108
    1088:	00001b30 	cmpltui	zero,zero,108
    108c:	000019f8 	rdprs	zero,zero,103
    1090:	000019a8 	cmpgeui	zero,zero,102
    1094:	000012a4 	muli	zero,zero,74
    1098:	000012a4 	muli	zero,zero,74
    109c:	000012a4 	muli	zero,zero,74
    10a0:	000019e8 	cmpgeui	zero,zero,103
    10a4:	000019a8 	cmpgeui	zero,zero,102
    10a8:	00001b30 	cmpltui	zero,zero,108
    10ac:	00001b30 	cmpltui	zero,zero,108
    10b0:	000018f0 	cmpltui	zero,zero,99
    10b4:	00001b30 	cmpltui	zero,zero,108
    10b8:	00001904 	movi	zero,100
    10bc:	00001938 	rdprs	zero,zero,100
    10c0:	00001a38 	rdprs	zero,zero,104
    10c4:	00001860 	cmpeqi	zero,zero,97
    10c8:	00001b30 	cmpltui	zero,zero,108
    10cc:	00001a80 	call	1a8 <alt_irq_handler+0xbc>
    10d0:	00001b30 	cmpltui	zero,zero,108
    10d4:	00001870 	cmpltui	zero,zero,97
    10d8:	00001b30 	cmpltui	zero,zero,108
    10dc:	00001b30 	cmpltui	zero,zero,108
    10e0:	000018b0 	cmpltui	zero,zero,98
    10e4:	db012a17 	ldw	r12,1192(sp)
    10e8:	8323c83a 	sub	r17,r16,r12
    10ec:	003f7e06 	br	ee8 <___vfprintf_internal_r+0x128>
    10f0:	b009883a 	mov	r4,r22
    10f4:	b80b883a 	mov	r5,r23
    10f8:	0002de00 	call	2de0 <__swsetup_r>
    10fc:	10002d1e 	bne	r2,zero,11b4 <___vfprintf_internal_r+0x3f4>
    1100:	b8c0030b 	ldhu	r3,12(r23)
    1104:	01000284 	movi	r4,10
    1108:	1805883a 	mov	r2,r3
    110c:	1080068c 	andi	r2,r2,26
    1110:	113f551e 	bne	r2,r4,e68 <___vfprintf_internal_r+0xa8>
    1114:	b880038b 	ldhu	r2,14(r23)
    1118:	113fffcc 	andi	r4,r2,65535
    111c:	2120001c 	xori	r4,r4,32768
    1120:	21200004 	addi	r4,r4,-32768
    1124:	203f5016 	blt	r4,zero,e68 <___vfprintf_internal_r+0xa8>
    1128:	bac01917 	ldw	r11,100(r23)
    112c:	ba800717 	ldw	r10,28(r23)
    1130:	ba400917 	ldw	r9,36(r23)
    1134:	d9812a17 	ldw	r6,1192(sp)
    1138:	d9c12d17 	ldw	r7,1204(sp)
    113c:	02010004 	movi	r8,1024
    1140:	18ffff4c 	andi	r3,r3,65533
    1144:	d881078d 	sth	r2,1054(sp)
    1148:	b009883a 	mov	r4,r22
    114c:	d8800404 	addi	r2,sp,16
    1150:	d9410404 	addi	r5,sp,1040
    1154:	d8c1070d 	sth	r3,1052(sp)
    1158:	dac11d15 	stw	r11,1140(sp)
    115c:	da810b15 	stw	r10,1068(sp)
    1160:	da410d15 	stw	r9,1076(sp)
    1164:	d8810415 	stw	r2,1040(sp)
    1168:	d8810815 	stw	r2,1056(sp)
    116c:	da010615 	stw	r8,1048(sp)
    1170:	da010915 	stw	r8,1060(sp)
    1174:	d8010a15 	stw	zero,1064(sp)
    1178:	0000dc00 	call	dc0 <___vfprintf_internal_r>
    117c:	1021883a 	mov	r16,r2
    1180:	10000416 	blt	r2,zero,1194 <___vfprintf_internal_r+0x3d4>
    1184:	b009883a 	mov	r4,r22
    1188:	d9410404 	addi	r5,sp,1040
    118c:	00048380 	call	4838 <_fflush_r>
    1190:	1006ee1e 	bne	r2,zero,2d4c <___vfprintf_internal_r+0x1f8c>
    1194:	d881070b 	ldhu	r2,1052(sp)
    1198:	1080100c 	andi	r2,r2,64
    119c:	10000326 	beq	r2,zero,11ac <___vfprintf_internal_r+0x3ec>
    11a0:	b880030b 	ldhu	r2,12(r23)
    11a4:	10801014 	ori	r2,r2,64
    11a8:	b880030d 	sth	r2,12(r23)
    11ac:	8005883a 	mov	r2,r16
    11b0:	00000106 	br	11b8 <___vfprintf_internal_r+0x3f8>
    11b4:	00bfffc4 	movi	r2,-1
    11b8:	dfc14917 	ldw	ra,1316(sp)
    11bc:	df014817 	ldw	fp,1312(sp)
    11c0:	ddc14717 	ldw	r23,1308(sp)
    11c4:	dd814617 	ldw	r22,1304(sp)
    11c8:	dd414517 	ldw	r21,1300(sp)
    11cc:	dd014417 	ldw	r20,1296(sp)
    11d0:	dcc14317 	ldw	r19,1292(sp)
    11d4:	dc814217 	ldw	r18,1288(sp)
    11d8:	dc414117 	ldw	r17,1284(sp)
    11dc:	dc014017 	ldw	r16,1280(sp)
    11e0:	dec14a04 	addi	sp,sp,1320
    11e4:	f800283a 	ret
    11e8:	b009883a 	mov	r4,r22
    11ec:	b80b883a 	mov	r5,r23
    11f0:	d9811e04 	addi	r6,sp,1144
    11f4:	00075000 	call	7500 <__sprint_r>
    11f8:	1000081e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    11fc:	da000404 	addi	r8,sp,16
    1200:	003f4606 	br	f1c <___vfprintf_internal_r+0x15c>
    1204:	d8812017 	ldw	r2,1152(sp)
    1208:	10000426 	beq	r2,zero,121c <___vfprintf_internal_r+0x45c>
    120c:	b009883a 	mov	r4,r22
    1210:	b80b883a 	mov	r5,r23
    1214:	d9811e04 	addi	r6,sp,1144
    1218:	00075000 	call	7500 <__sprint_r>
    121c:	b880030b 	ldhu	r2,12(r23)
    1220:	1080100c 	andi	r2,r2,64
    1224:	103fe31e 	bne	r2,zero,11b4 <___vfprintf_internal_r+0x3f4>
    1228:	d8812f17 	ldw	r2,1212(sp)
    122c:	003fe206 	br	11b8 <___vfprintf_internal_r+0x3f8>
    1230:	b009883a 	mov	r4,r22
    1234:	0004de00 	call	4de0 <__sinit>
    1238:	003ef906 	br	e20 <___vfprintf_internal_r+0x60>
    123c:	dc012a17 	ldw	r16,1192(sp)
    1240:	003f3906 	br	f28 <___vfprintf_internal_r+0x168>
    1244:	1805883a 	mov	r2,r3
    1248:	8c400114 	ori	r17,r17,4
    124c:	1c000007 	ldb	r16,0(r3)
    1250:	003f4206 	br	f5c <___vfprintf_internal_r+0x19c>
    1254:	1c000007 	ldb	r16,0(r3)
    1258:	18800044 	addi	r2,r3,1
    125c:	8286b326 	beq	r16,r10,2d2c <___vfprintf_internal_r+0x1f6c>
    1260:	82fff404 	addi	r11,r16,-48
    1264:	1007883a 	mov	r3,r2
    1268:	0013883a 	mov	r9,zero
    126c:	2aff3c36 	bltu	r5,r11,f60 <___vfprintf_internal_r+0x1a0>
    1270:	1c000007 	ldb	r16,0(r3)
    1274:	4a4002a4 	muli	r9,r9,10
    1278:	18c00044 	addi	r3,r3,1
    127c:	5a53883a 	add	r9,r11,r9
    1280:	82fff404 	addi	r11,r16,-48
    1284:	2afffa2e 	bgeu	r5,r11,1270 <___vfprintf_internal_r+0x4b0>
    1288:	483f350e 	bge	r9,zero,f60 <___vfprintf_internal_r+0x1a0>
    128c:	027fffc4 	movi	r9,-1
    1290:	003f3306 	br	f60 <___vfprintf_internal_r+0x1a0>
    1294:	8c402014 	ori	r17,r17,128
    1298:	1805883a 	mov	r2,r3
    129c:	1c000007 	ldb	r16,0(r3)
    12a0:	003f2e06 	br	f5c <___vfprintf_internal_r+0x19c>
    12a4:	db012d17 	ldw	r12,1204(sp)
    12a8:	dac12d17 	ldw	r11,1204(sp)
    12ac:	d8c12a15 	stw	r3,1192(sp)
    12b0:	63000017 	ldw	r12,0(r12)
    12b4:	5ac00117 	ldw	r11,4(r11)
    12b8:	d9812785 	stb	r6,1182(sp)
    12bc:	6009883a 	mov	r4,r12
    12c0:	580b883a 	mov	r5,r11
    12c4:	db013715 	stw	r12,1244(sp)
    12c8:	da013f15 	stw	r8,1276(sp)
    12cc:	da413e15 	stw	r9,1272(sp)
    12d0:	dac13915 	stw	r11,1252(sp)
    12d4:	00070c40 	call	70c4 <__fpclassifyd>
    12d8:	db012d17 	ldw	r12,1204(sp)
    12dc:	04800044 	movi	r18,1
    12e0:	da013f17 	ldw	r8,1276(sp)
    12e4:	64c00204 	addi	r19,r12,8
    12e8:	da413e17 	ldw	r9,1272(sp)
    12ec:	d9013717 	ldw	r4,1244(sp)
    12f0:	d9413917 	ldw	r5,1252(sp)
    12f4:	1484581e 	bne	r2,r18,2458 <___vfprintf_internal_r+0x1698>
    12f8:	000d883a 	mov	r6,zero
    12fc:	000f883a 	mov	r7,zero
    1300:	000bcb80 	call	bcb8 <__ledf2>
    1304:	da013f17 	ldw	r8,1276(sp)
    1308:	1005ef16 	blt	r2,zero,2ac8 <___vfprintf_internal_r+0x1d08>
    130c:	dd412783 	ldbu	r21,1182(sp)
    1310:	008011c4 	movi	r2,71
    1314:	14053b0e 	bge	r2,r16,2804 <___vfprintf_internal_r+0x1a44>
    1318:	00c00074 	movhi	r3,1
    131c:	18fe5a04 	addi	r3,r3,-1688
    1320:	d8c13115 	stw	r3,1220(sp)
    1324:	02c000c4 	movi	r11,3
    1328:	00bfdfc4 	movi	r2,-129
    132c:	dac12b15 	stw	r11,1196(sp)
    1330:	88a2703a 	and	r17,r17,r2
    1334:	dcc12d15 	stw	r19,1204(sp)
    1338:	5825883a 	mov	r18,r11
    133c:	d8013215 	stw	zero,1224(sp)
    1340:	d8013415 	stw	zero,1232(sp)
    1344:	00003206 	br	1410 <___vfprintf_internal_r+0x650>
    1348:	8c400214 	ori	r17,r17,8
    134c:	1805883a 	mov	r2,r3
    1350:	1c000007 	ldb	r16,0(r3)
    1354:	003f0106 	br	f5c <___vfprintf_internal_r+0x19c>
    1358:	8c400414 	ori	r17,r17,16
    135c:	d8c12a15 	stw	r3,1192(sp)
    1360:	88c0080c 	andi	r3,r17,32
    1364:	d8812d17 	ldw	r2,1204(sp)
    1368:	18017726 	beq	r3,zero,1948 <___vfprintf_internal_r+0xb88>
    136c:	db012d17 	ldw	r12,1204(sp)
    1370:	14c00017 	ldw	r19,0(r2)
    1374:	17000117 	ldw	fp,4(r2)
    1378:	63000204 	addi	r12,r12,8
    137c:	db012d15 	stw	r12,1204(sp)
    1380:	0005883a 	mov	r2,zero
    1384:	9f06b03a 	or	r3,r19,fp
    1388:	d8012785 	stb	zero,1182(sp)
    138c:	da413215 	stw	r9,1224(sp)
    1390:	002b883a 	mov	r21,zero
    1394:	48000216 	blt	r9,zero,13a0 <___vfprintf_internal_r+0x5e0>
    1398:	013fdfc4 	movi	r4,-129
    139c:	8922703a 	and	r17,r17,r4
    13a0:	1801ed1e 	bne	r3,zero,1b58 <___vfprintf_internal_r+0xd98>
    13a4:	4802e026 	beq	r9,zero,1f28 <___vfprintf_internal_r+0x1168>
    13a8:	10803fcc 	andi	r2,r2,255
    13ac:	00c00044 	movi	r3,1
    13b0:	10c20f26 	beq	r2,r3,1bf0 <___vfprintf_internal_r+0xe30>
    13b4:	00c00084 	movi	r3,2
    13b8:	10c2fd26 	beq	r2,r3,1fb0 <___vfprintf_internal_r+0x11f0>
    13bc:	d8c10e04 	addi	r3,sp,1080
    13c0:	9808d0fa 	srli	r4,r19,3
    13c4:	e00a977a 	slli	r5,fp,29
    13c8:	e038d0fa 	srli	fp,fp,3
    13cc:	9cc001cc 	andi	r19,r19,7
    13d0:	98800c04 	addi	r2,r19,48
    13d4:	18ffffc4 	addi	r3,r3,-1
    13d8:	2926b03a 	or	r19,r5,r4
    13dc:	18800005 	stb	r2,0(r3)
    13e0:	9f08b03a 	or	r4,r19,fp
    13e4:	203ff61e 	bne	r4,zero,13c0 <___vfprintf_internal_r+0x600>
    13e8:	8900004c 	andi	r4,r17,1
    13ec:	d8c13115 	stw	r3,1220(sp)
    13f0:	2003791e 	bne	r4,zero,21d8 <___vfprintf_internal_r+0x1418>
    13f4:	dac12817 	ldw	r11,1184(sp)
    13f8:	58e5c83a 	sub	r18,r11,r3
    13fc:	9005883a 	mov	r2,r18
    1400:	9240010e 	bge	r18,r9,1408 <___vfprintf_internal_r+0x648>
    1404:	4805883a 	mov	r2,r9
    1408:	d8812b15 	stw	r2,1196(sp)
    140c:	d8013415 	stw	zero,1232(sp)
    1410:	a8803fcc 	andi	r2,r21,255
    1414:	1080201c 	xori	r2,r2,128
    1418:	10bfe004 	addi	r2,r2,-128
    141c:	10000326 	beq	r2,zero,142c <___vfprintf_internal_r+0x66c>
    1420:	db012b17 	ldw	r12,1196(sp)
    1424:	63000044 	addi	r12,r12,1
    1428:	db012b15 	stw	r12,1196(sp)
    142c:	88c0008c 	andi	r3,r17,2
    1430:	d8c12c15 	stw	r3,1200(sp)
    1434:	18000326 	beq	r3,zero,1444 <___vfprintf_internal_r+0x684>
    1438:	dac12b17 	ldw	r11,1196(sp)
    143c:	5ac00084 	addi	r11,r11,2
    1440:	dac12b15 	stw	r11,1196(sp)
    1444:	8b00210c 	andi	r12,r17,132
    1448:	db013015 	stw	r12,1216(sp)
    144c:	6001c01e 	bne	r12,zero,1b50 <___vfprintf_internal_r+0xd90>
    1450:	dac12e17 	ldw	r11,1208(sp)
    1454:	db012b17 	ldw	r12,1196(sp)
    1458:	5b39c83a 	sub	fp,r11,r12
    145c:	0701bc0e 	bge	zero,fp,1b50 <___vfprintf_internal_r+0xd90>
    1460:	02400404 	movi	r9,16
    1464:	d8c12017 	ldw	r3,1152(sp)
    1468:	d8811f17 	ldw	r2,1148(sp)
    146c:	4f05220e 	bge	r9,fp,28f8 <___vfprintf_internal_r+0x1b38>
    1470:	01400074 	movhi	r5,1
    1474:	297e6d84 	addi	r5,r5,-1610
    1478:	d9413615 	stw	r5,1240(sp)
    147c:	482b883a 	mov	r21,r9
    1480:	04c001c4 	movi	r19,7
    1484:	00000306 	br	1494 <___vfprintf_internal_r+0x6d4>
    1488:	e73ffc04 	addi	fp,fp,-16
    148c:	42000204 	addi	r8,r8,8
    1490:	af00130e 	bge	r21,fp,14e0 <___vfprintf_internal_r+0x720>
    1494:	02c00074 	movhi	r11,1
    1498:	18c00404 	addi	r3,r3,16
    149c:	10800044 	addi	r2,r2,1
    14a0:	5afe6d84 	addi	r11,r11,-1610
    14a4:	42c00015 	stw	r11,0(r8)
    14a8:	45400115 	stw	r21,4(r8)
    14ac:	d8c12015 	stw	r3,1152(sp)
    14b0:	d8811f15 	stw	r2,1148(sp)
    14b4:	98bff40e 	bge	r19,r2,1488 <___vfprintf_internal_r+0x6c8>
    14b8:	b009883a 	mov	r4,r22
    14bc:	b80b883a 	mov	r5,r23
    14c0:	d9811e04 	addi	r6,sp,1144
    14c4:	00075000 	call	7500 <__sprint_r>
    14c8:	103f541e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    14cc:	e73ffc04 	addi	fp,fp,-16
    14d0:	d8c12017 	ldw	r3,1152(sp)
    14d4:	d8811f17 	ldw	r2,1148(sp)
    14d8:	da000404 	addi	r8,sp,16
    14dc:	af3fed16 	blt	r21,fp,1494 <___vfprintf_internal_r+0x6d4>
    14e0:	db013617 	ldw	r12,1240(sp)
    14e4:	e0c7883a 	add	r3,fp,r3
    14e8:	10800044 	addi	r2,r2,1
    14ec:	43000015 	stw	r12,0(r8)
    14f0:	47000115 	stw	fp,4(r8)
    14f4:	d8c12015 	stw	r3,1152(sp)
    14f8:	d8811f15 	stw	r2,1148(sp)
    14fc:	010001c4 	movi	r4,7
    1500:	2082f416 	blt	r4,r2,20d4 <___vfprintf_internal_r+0x1314>
    1504:	d8812787 	ldb	r2,1182(sp)
    1508:	42000204 	addi	r8,r8,8
    150c:	10000c26 	beq	r2,zero,1540 <___vfprintf_internal_r+0x780>
    1510:	d8811f17 	ldw	r2,1148(sp)
    1514:	d9012784 	addi	r4,sp,1182
    1518:	18c00044 	addi	r3,r3,1
    151c:	10800044 	addi	r2,r2,1
    1520:	41000015 	stw	r4,0(r8)
    1524:	01000044 	movi	r4,1
    1528:	41000115 	stw	r4,4(r8)
    152c:	d8c12015 	stw	r3,1152(sp)
    1530:	d8811f15 	stw	r2,1148(sp)
    1534:	010001c4 	movi	r4,7
    1538:	20828d16 	blt	r4,r2,1f70 <___vfprintf_internal_r+0x11b0>
    153c:	42000204 	addi	r8,r8,8
    1540:	dac12c17 	ldw	r11,1200(sp)
    1544:	58000c26 	beq	r11,zero,1578 <___vfprintf_internal_r+0x7b8>
    1548:	d8811f17 	ldw	r2,1148(sp)
    154c:	d9012704 	addi	r4,sp,1180
    1550:	18c00084 	addi	r3,r3,2
    1554:	10800044 	addi	r2,r2,1
    1558:	41000015 	stw	r4,0(r8)
    155c:	01000084 	movi	r4,2
    1560:	41000115 	stw	r4,4(r8)
    1564:	d8c12015 	stw	r3,1152(sp)
    1568:	d8811f15 	stw	r2,1148(sp)
    156c:	010001c4 	movi	r4,7
    1570:	20828716 	blt	r4,r2,1f90 <___vfprintf_internal_r+0x11d0>
    1574:	42000204 	addi	r8,r8,8
    1578:	db013017 	ldw	r12,1216(sp)
    157c:	00802004 	movi	r2,128
    1580:	6081e926 	beq	r12,r2,1d28 <___vfprintf_internal_r+0xf68>
    1584:	db013217 	ldw	r12,1224(sp)
    1588:	64abc83a 	sub	r21,r12,r18
    158c:	0540260e 	bge	zero,r21,1628 <___vfprintf_internal_r+0x868>
    1590:	07000404 	movi	fp,16
    1594:	d8811f17 	ldw	r2,1148(sp)
    1598:	e5443d0e 	bge	fp,r21,2690 <___vfprintf_internal_r+0x18d0>
    159c:	01400074 	movhi	r5,1
    15a0:	297e6984 	addi	r5,r5,-1626
    15a4:	d9412c15 	stw	r5,1200(sp)
    15a8:	04c001c4 	movi	r19,7
    15ac:	00000306 	br	15bc <___vfprintf_internal_r+0x7fc>
    15b0:	ad7ffc04 	addi	r21,r21,-16
    15b4:	42000204 	addi	r8,r8,8
    15b8:	e540110e 	bge	fp,r21,1600 <___vfprintf_internal_r+0x840>
    15bc:	18c00404 	addi	r3,r3,16
    15c0:	10800044 	addi	r2,r2,1
    15c4:	45000015 	stw	r20,0(r8)
    15c8:	47000115 	stw	fp,4(r8)
    15cc:	d8c12015 	stw	r3,1152(sp)
    15d0:	d8811f15 	stw	r2,1148(sp)
    15d4:	98bff60e 	bge	r19,r2,15b0 <___vfprintf_internal_r+0x7f0>
    15d8:	b009883a 	mov	r4,r22
    15dc:	b80b883a 	mov	r5,r23
    15e0:	d9811e04 	addi	r6,sp,1144
    15e4:	00075000 	call	7500 <__sprint_r>
    15e8:	103f0c1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    15ec:	ad7ffc04 	addi	r21,r21,-16
    15f0:	d8c12017 	ldw	r3,1152(sp)
    15f4:	d8811f17 	ldw	r2,1148(sp)
    15f8:	da000404 	addi	r8,sp,16
    15fc:	e57fef16 	blt	fp,r21,15bc <___vfprintf_internal_r+0x7fc>
    1600:	dac12c17 	ldw	r11,1200(sp)
    1604:	1d47883a 	add	r3,r3,r21
    1608:	10800044 	addi	r2,r2,1
    160c:	42c00015 	stw	r11,0(r8)
    1610:	45400115 	stw	r21,4(r8)
    1614:	d8c12015 	stw	r3,1152(sp)
    1618:	d8811f15 	stw	r2,1148(sp)
    161c:	010001c4 	movi	r4,7
    1620:	20824b16 	blt	r4,r2,1f50 <___vfprintf_internal_r+0x1190>
    1624:	42000204 	addi	r8,r8,8
    1628:	8880400c 	andi	r2,r17,256
    162c:	1001761e 	bne	r2,zero,1c08 <___vfprintf_internal_r+0xe48>
    1630:	d8811f17 	ldw	r2,1148(sp)
    1634:	db013117 	ldw	r12,1220(sp)
    1638:	1c87883a 	add	r3,r3,r18
    163c:	10800044 	addi	r2,r2,1
    1640:	43000015 	stw	r12,0(r8)
    1644:	44800115 	stw	r18,4(r8)
    1648:	d8c12015 	stw	r3,1152(sp)
    164c:	d8811f15 	stw	r2,1148(sp)
    1650:	010001c4 	movi	r4,7
    1654:	20822616 	blt	r4,r2,1ef0 <___vfprintf_internal_r+0x1130>
    1658:	42000204 	addi	r8,r8,8
    165c:	8c40010c 	andi	r17,r17,4
    1660:	88003126 	beq	r17,zero,1728 <___vfprintf_internal_r+0x968>
    1664:	db012e17 	ldw	r12,1208(sp)
    1668:	dac12b17 	ldw	r11,1196(sp)
    166c:	62e1c83a 	sub	r16,r12,r11
    1670:	04002d0e 	bge	zero,r16,1728 <___vfprintf_internal_r+0x968>
    1674:	04400404 	movi	r17,16
    1678:	d8811f17 	ldw	r2,1148(sp)
    167c:	8c04df0e 	bge	r17,r16,29fc <___vfprintf_internal_r+0x1c3c>
    1680:	01000074 	movhi	r4,1
    1684:	213e6d84 	addi	r4,r4,-1610
    1688:	d9013615 	stw	r4,1240(sp)
    168c:	048001c4 	movi	r18,7
    1690:	00000306 	br	16a0 <___vfprintf_internal_r+0x8e0>
    1694:	843ffc04 	addi	r16,r16,-16
    1698:	42000204 	addi	r8,r8,8
    169c:	8c00130e 	bge	r17,r16,16ec <___vfprintf_internal_r+0x92c>
    16a0:	01400074 	movhi	r5,1
    16a4:	18c00404 	addi	r3,r3,16
    16a8:	10800044 	addi	r2,r2,1
    16ac:	297e6d84 	addi	r5,r5,-1610
    16b0:	41400015 	stw	r5,0(r8)
    16b4:	44400115 	stw	r17,4(r8)
    16b8:	d8c12015 	stw	r3,1152(sp)
    16bc:	d8811f15 	stw	r2,1148(sp)
    16c0:	90bff40e 	bge	r18,r2,1694 <___vfprintf_internal_r+0x8d4>
    16c4:	b009883a 	mov	r4,r22
    16c8:	b80b883a 	mov	r5,r23
    16cc:	d9811e04 	addi	r6,sp,1144
    16d0:	00075000 	call	7500 <__sprint_r>
    16d4:	103ed11e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    16d8:	843ffc04 	addi	r16,r16,-16
    16dc:	d8c12017 	ldw	r3,1152(sp)
    16e0:	d8811f17 	ldw	r2,1148(sp)
    16e4:	da000404 	addi	r8,sp,16
    16e8:	8c3fed16 	blt	r17,r16,16a0 <___vfprintf_internal_r+0x8e0>
    16ec:	dac13617 	ldw	r11,1240(sp)
    16f0:	1c07883a 	add	r3,r3,r16
    16f4:	10800044 	addi	r2,r2,1
    16f8:	42c00015 	stw	r11,0(r8)
    16fc:	44000115 	stw	r16,4(r8)
    1700:	d8c12015 	stw	r3,1152(sp)
    1704:	d8811f15 	stw	r2,1148(sp)
    1708:	010001c4 	movi	r4,7
    170c:	2080060e 	bge	r4,r2,1728 <___vfprintf_internal_r+0x968>
    1710:	b009883a 	mov	r4,r22
    1714:	b80b883a 	mov	r5,r23
    1718:	d9811e04 	addi	r6,sp,1144
    171c:	00075000 	call	7500 <__sprint_r>
    1720:	103ebe1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1724:	d8c12017 	ldw	r3,1152(sp)
    1728:	d8812b17 	ldw	r2,1196(sp)
    172c:	db012e17 	ldw	r12,1208(sp)
    1730:	1300010e 	bge	r2,r12,1738 <___vfprintf_internal_r+0x978>
    1734:	6005883a 	mov	r2,r12
    1738:	dac12f17 	ldw	r11,1212(sp)
    173c:	5897883a 	add	r11,r11,r2
    1740:	dac12f15 	stw	r11,1212(sp)
    1744:	1801f21e 	bne	r3,zero,1f10 <___vfprintf_internal_r+0x1150>
    1748:	d8011f15 	stw	zero,1148(sp)
    174c:	da000404 	addi	r8,sp,16
    1750:	003dd806 	br	eb4 <___vfprintf_internal_r+0xf4>
    1754:	8c400414 	ori	r17,r17,16
    1758:	d8c12a15 	stw	r3,1192(sp)
    175c:	88c0080c 	andi	r3,r17,32
    1760:	d8812d17 	ldw	r2,1204(sp)
    1764:	18004626 	beq	r3,zero,1880 <___vfprintf_internal_r+0xac0>
    1768:	dac12d17 	ldw	r11,1204(sp)
    176c:	14c00017 	ldw	r19,0(r2)
    1770:	17000117 	ldw	fp,4(r2)
    1774:	5ac00204 	addi	r11,r11,8
    1778:	dac12d15 	stw	r11,1204(sp)
    177c:	00800044 	movi	r2,1
    1780:	9f06b03a 	or	r3,r19,fp
    1784:	003f0006 	br	1388 <___vfprintf_internal_r+0x5c8>
    1788:	1805883a 	mov	r2,r3
    178c:	d8012e15 	stw	zero,1208(sp)
    1790:	82fff404 	addi	r11,r16,-48
    1794:	0019883a 	mov	r12,zero
    1798:	14000007 	ldb	r16,0(r2)
    179c:	630002a4 	muli	r12,r12,10
    17a0:	18c00044 	addi	r3,r3,1
    17a4:	1805883a 	mov	r2,r3
    17a8:	62d9883a 	add	r12,r12,r11
    17ac:	82fff404 	addi	r11,r16,-48
    17b0:	2afff92e 	bgeu	r5,r11,1798 <___vfprintf_internal_r+0x9d8>
    17b4:	db012e15 	stw	r12,1208(sp)
    17b8:	003de906 	br	f60 <___vfprintf_internal_r+0x1a0>
    17bc:	8c400414 	ori	r17,r17,16
    17c0:	d8c12a15 	stw	r3,1192(sp)
    17c4:	d9812785 	stb	r6,1182(sp)
    17c8:	8880080c 	andi	r2,r17,32
    17cc:	d8c12d17 	ldw	r3,1204(sp)
    17d0:	10007a26 	beq	r2,zero,19bc <___vfprintf_internal_r+0xbfc>
    17d4:	db012d17 	ldw	r12,1204(sp)
    17d8:	18800117 	ldw	r2,4(r3)
    17dc:	1cc00017 	ldw	r19,0(r3)
    17e0:	63000204 	addi	r12,r12,8
    17e4:	db012d15 	stw	r12,1204(sp)
    17e8:	1039883a 	mov	fp,r2
    17ec:	10031016 	blt	r2,zero,2430 <___vfprintf_internal_r+0x1670>
    17f0:	dd412783 	ldbu	r21,1182(sp)
    17f4:	da413215 	stw	r9,1224(sp)
    17f8:	00800044 	movi	r2,1
    17fc:	9f06b03a 	or	r3,r19,fp
    1800:	003ee406 	br	1394 <___vfprintf_internal_r+0x5d4>
    1804:	03000074 	movhi	r12,1
    1808:	633e5d04 	addi	r12,r12,-1676
    180c:	d8c12a15 	stw	r3,1192(sp)
    1810:	d9812785 	stb	r6,1182(sp)
    1814:	db013b15 	stw	r12,1260(sp)
    1818:	88c0080c 	andi	r3,r17,32
    181c:	d8812d17 	ldw	r2,1204(sp)
    1820:	18002b26 	beq	r3,zero,18d0 <___vfprintf_internal_r+0xb10>
    1824:	dac12d17 	ldw	r11,1204(sp)
    1828:	14c00017 	ldw	r19,0(r2)
    182c:	17000117 	ldw	fp,4(r2)
    1830:	5ac00204 	addi	r11,r11,8
    1834:	dac12d15 	stw	r11,1204(sp)
    1838:	8880004c 	andi	r2,r17,1
    183c:	10025b26 	beq	r2,zero,21ac <___vfprintf_internal_r+0x13ec>
    1840:	9f06b03a 	or	r3,r19,fp
    1844:	18037026 	beq	r3,zero,2608 <___vfprintf_internal_r+0x1848>
    1848:	00800c04 	movi	r2,48
    184c:	d8812705 	stb	r2,1180(sp)
    1850:	dc012745 	stb	r16,1181(sp)
    1854:	8c400094 	ori	r17,r17,2
    1858:	00800084 	movi	r2,2
    185c:	003eca06 	br	1388 <___vfprintf_internal_r+0x5c8>
    1860:	8c400814 	ori	r17,r17,32
    1864:	1805883a 	mov	r2,r3
    1868:	1c000007 	ldb	r16,0(r3)
    186c:	003dbb06 	br	f5c <___vfprintf_internal_r+0x19c>
    1870:	d8c12a15 	stw	r3,1192(sp)
    1874:	88c0080c 	andi	r3,r17,32
    1878:	d8812d17 	ldw	r2,1204(sp)
    187c:	183fba1e 	bne	r3,zero,1768 <___vfprintf_internal_r+0x9a8>
    1880:	88c0040c 	andi	r3,r17,16
    1884:	18024c1e 	bne	r3,zero,21b8 <___vfprintf_internal_r+0x13f8>
    1888:	88c0100c 	andi	r3,r17,64
    188c:	18024a26 	beq	r3,zero,21b8 <___vfprintf_internal_r+0x13f8>
    1890:	dac12d17 	ldw	r11,1204(sp)
    1894:	14c0000b 	ldhu	r19,0(r2)
    1898:	0039883a 	mov	fp,zero
    189c:	5ac00104 	addi	r11,r11,4
    18a0:	dac12d15 	stw	r11,1204(sp)
    18a4:	00800044 	movi	r2,1
    18a8:	9807883a 	mov	r3,r19
    18ac:	003eb606 	br	1388 <___vfprintf_internal_r+0x5c8>
    18b0:	00800074 	movhi	r2,1
    18b4:	10be6204 	addi	r2,r2,-1656
    18b8:	d8c12a15 	stw	r3,1192(sp)
    18bc:	d8813b15 	stw	r2,1260(sp)
    18c0:	d9812785 	stb	r6,1182(sp)
    18c4:	88c0080c 	andi	r3,r17,32
    18c8:	d8812d17 	ldw	r2,1204(sp)
    18cc:	183fd51e 	bne	r3,zero,1824 <___vfprintf_internal_r+0xa64>
    18d0:	88c0040c 	andi	r3,r17,16
    18d4:	18034126 	beq	r3,zero,25dc <___vfprintf_internal_r+0x181c>
    18d8:	db012d17 	ldw	r12,1204(sp)
    18dc:	14c00017 	ldw	r19,0(r2)
    18e0:	0039883a 	mov	fp,zero
    18e4:	63000104 	addi	r12,r12,4
    18e8:	db012d15 	stw	r12,1204(sp)
    18ec:	003fd206 	br	1838 <___vfprintf_internal_r+0xa78>
    18f0:	1c000007 	ldb	r16,0(r3)
    18f4:	81c3d626 	beq	r16,r7,2850 <___vfprintf_internal_r+0x1a90>
    18f8:	8c400414 	ori	r17,r17,16
    18fc:	1805883a 	mov	r2,r3
    1900:	003d9606 	br	f5c <___vfprintf_internal_r+0x19c>
    1904:	d8c12a15 	stw	r3,1192(sp)
    1908:	d9812785 	stb	r6,1182(sp)
    190c:	8880080c 	andi	r2,r17,32
    1910:	10033f26 	beq	r2,zero,2610 <___vfprintf_internal_r+0x1850>
    1914:	db012d17 	ldw	r12,1204(sp)
    1918:	dac12f17 	ldw	r11,1212(sp)
    191c:	60800017 	ldw	r2,0(r12)
    1920:	5807d7fa 	srai	r3,r11,31
    1924:	63000104 	addi	r12,r12,4
    1928:	db012d15 	stw	r12,1204(sp)
    192c:	12c00015 	stw	r11,0(r2)
    1930:	10c00115 	stw	r3,4(r2)
    1934:	003d5f06 	br	eb4 <___vfprintf_internal_r+0xf4>
    1938:	d8c12a15 	stw	r3,1192(sp)
    193c:	88c0080c 	andi	r3,r17,32
    1940:	d8812d17 	ldw	r2,1204(sp)
    1944:	183e891e 	bne	r3,zero,136c <___vfprintf_internal_r+0x5ac>
    1948:	88c0040c 	andi	r3,r17,16
    194c:	1801ea1e 	bne	r3,zero,20f8 <___vfprintf_internal_r+0x1338>
    1950:	88c0100c 	andi	r3,r17,64
    1954:	1801e826 	beq	r3,zero,20f8 <___vfprintf_internal_r+0x1338>
    1958:	db012d17 	ldw	r12,1204(sp)
    195c:	14c0000b 	ldhu	r19,0(r2)
    1960:	0039883a 	mov	fp,zero
    1964:	63000104 	addi	r12,r12,4
    1968:	db012d15 	stw	r12,1204(sp)
    196c:	0005883a 	mov	r2,zero
    1970:	9807883a 	mov	r3,r19
    1974:	003e8406 	br	1388 <___vfprintf_internal_r+0x5c8>
    1978:	30803fcc 	andi	r2,r6,255
    197c:	1080201c 	xori	r2,r2,128
    1980:	10bfe004 	addi	r2,r2,-128
    1984:	10031d1e 	bne	r2,zero,25fc <___vfprintf_internal_r+0x183c>
    1988:	1805883a 	mov	r2,r3
    198c:	01800804 	movi	r6,32
    1990:	1c000007 	ldb	r16,0(r3)
    1994:	003d7106 	br	f5c <___vfprintf_internal_r+0x19c>
    1998:	8c400054 	ori	r17,r17,1
    199c:	1805883a 	mov	r2,r3
    19a0:	1c000007 	ldb	r16,0(r3)
    19a4:	003d6d06 	br	f5c <___vfprintf_internal_r+0x19c>
    19a8:	d8c12a15 	stw	r3,1192(sp)
    19ac:	d9812785 	stb	r6,1182(sp)
    19b0:	8880080c 	andi	r2,r17,32
    19b4:	d8c12d17 	ldw	r3,1204(sp)
    19b8:	103f861e 	bne	r2,zero,17d4 <___vfprintf_internal_r+0xa14>
    19bc:	8880040c 	andi	r2,r17,16
    19c0:	1001f31e 	bne	r2,zero,2190 <___vfprintf_internal_r+0x13d0>
    19c4:	8880100c 	andi	r2,r17,64
    19c8:	1001f126 	beq	r2,zero,2190 <___vfprintf_internal_r+0x13d0>
    19cc:	1cc0000f 	ldh	r19,0(r3)
    19d0:	db012d17 	ldw	r12,1204(sp)
    19d4:	9839d7fa 	srai	fp,r19,31
    19d8:	63000104 	addi	r12,r12,4
    19dc:	db012d15 	stw	r12,1204(sp)
    19e0:	e005883a 	mov	r2,fp
    19e4:	003f8106 	br	17ec <___vfprintf_internal_r+0xa2c>
    19e8:	8c401014 	ori	r17,r17,64
    19ec:	1805883a 	mov	r2,r3
    19f0:	1c000007 	ldb	r16,0(r3)
    19f4:	003d5906 	br	f5c <___vfprintf_internal_r+0x19c>
    19f8:	db012d17 	ldw	r12,1204(sp)
    19fc:	d8c12a15 	stw	r3,1192(sp)
    1a00:	00c00044 	movi	r3,1
    1a04:	60800017 	ldw	r2,0(r12)
    1a08:	63000104 	addi	r12,r12,4
    1a0c:	d8c12b15 	stw	r3,1196(sp)
    1a10:	d8012785 	stb	zero,1182(sp)
    1a14:	d8810405 	stb	r2,1040(sp)
    1a18:	db012d15 	stw	r12,1204(sp)
    1a1c:	dac10404 	addi	r11,sp,1040
    1a20:	1825883a 	mov	r18,r3
    1a24:	d8013215 	stw	zero,1224(sp)
    1a28:	d8013415 	stw	zero,1232(sp)
    1a2c:	dac13115 	stw	r11,1220(sp)
    1a30:	0005883a 	mov	r2,zero
    1a34:	003e7d06 	br	142c <___vfprintf_internal_r+0x66c>
    1a38:	db012d17 	ldw	r12,1204(sp)
    1a3c:	00800c04 	movi	r2,48
    1a40:	d8812705 	stb	r2,1180(sp)
    1a44:	64c00017 	ldw	r19,0(r12)
    1a48:	00801e04 	movi	r2,120
    1a4c:	d8812745 	stb	r2,1181(sp)
    1a50:	00800074 	movhi	r2,1
    1a54:	10be6204 	addi	r2,r2,-1656
    1a58:	63000104 	addi	r12,r12,4
    1a5c:	d8c12a15 	stw	r3,1192(sp)
    1a60:	d8813b15 	stw	r2,1260(sp)
    1a64:	0039883a 	mov	fp,zero
    1a68:	8c400094 	ori	r17,r17,2
    1a6c:	db012d15 	stw	r12,1204(sp)
    1a70:	00800084 	movi	r2,2
    1a74:	04001e04 	movi	r16,120
    1a78:	9807883a 	mov	r3,r19
    1a7c:	003e4206 	br	1388 <___vfprintf_internal_r+0x5c8>
    1a80:	dac12d17 	ldw	r11,1204(sp)
    1a84:	db012d17 	ldw	r12,1204(sp)
    1a88:	d8c12a15 	stw	r3,1192(sp)
    1a8c:	5ac00017 	ldw	r11,0(r11)
    1a90:	d8012785 	stb	zero,1182(sp)
    1a94:	64c00104 	addi	r19,r12,4
    1a98:	dac13115 	stw	r11,1220(sp)
    1a9c:	5803e826 	beq	r11,zero,2a40 <___vfprintf_internal_r+0x1c80>
    1aa0:	d9013117 	ldw	r4,1220(sp)
    1aa4:	48037a16 	blt	r9,zero,2890 <___vfprintf_internal_r+0x1ad0>
    1aa8:	480d883a 	mov	r6,r9
    1aac:	000b883a 	mov	r5,zero
    1ab0:	da013f15 	stw	r8,1276(sp)
    1ab4:	da413e15 	stw	r9,1272(sp)
    1ab8:	0005df40 	call	5df4 <memchr>
    1abc:	da013f17 	ldw	r8,1276(sp)
    1ac0:	da413e17 	ldw	r9,1272(sp)
    1ac4:	10044426 	beq	r2,zero,2bd8 <___vfprintf_internal_r+0x1e18>
    1ac8:	d8c13117 	ldw	r3,1220(sp)
    1acc:	10e5c83a 	sub	r18,r2,r3
    1ad0:	4c834416 	blt	r9,r18,27e4 <___vfprintf_internal_r+0x1a24>
    1ad4:	9005883a 	mov	r2,r18
    1ad8:	90037216 	blt	r18,zero,28a4 <___vfprintf_internal_r+0x1ae4>
    1adc:	dd412783 	ldbu	r21,1182(sp)
    1ae0:	d8812b15 	stw	r2,1196(sp)
    1ae4:	dcc12d15 	stw	r19,1204(sp)
    1ae8:	d8013215 	stw	zero,1224(sp)
    1aec:	d8013415 	stw	zero,1232(sp)
    1af0:	003e4706 	br	1410 <___vfprintf_internal_r+0x650>
    1af4:	dac12d17 	ldw	r11,1204(sp)
    1af8:	db012d17 	ldw	r12,1204(sp)
    1afc:	5ac00017 	ldw	r11,0(r11)
    1b00:	dac12e15 	stw	r11,1208(sp)
    1b04:	62c00104 	addi	r11,r12,4
    1b08:	db012e17 	ldw	r12,1208(sp)
    1b0c:	60034a16 	blt	r12,zero,2838 <___vfprintf_internal_r+0x1a78>
    1b10:	dac12d15 	stw	r11,1204(sp)
    1b14:	1805883a 	mov	r2,r3
    1b18:	1c000007 	ldb	r16,0(r3)
    1b1c:	003d0f06 	br	f5c <___vfprintf_internal_r+0x19c>
    1b20:	1805883a 	mov	r2,r3
    1b24:	01800ac4 	movi	r6,43
    1b28:	1c000007 	ldb	r16,0(r3)
    1b2c:	003d0b06 	br	f5c <___vfprintf_internal_r+0x19c>
    1b30:	d8c12a15 	stw	r3,1192(sp)
    1b34:	d9812785 	stb	r6,1182(sp)
    1b38:	803db226 	beq	r16,zero,1204 <___vfprintf_internal_r+0x444>
    1b3c:	00c00044 	movi	r3,1
    1b40:	d8c12b15 	stw	r3,1196(sp)
    1b44:	dc010405 	stb	r16,1040(sp)
    1b48:	d8012785 	stb	zero,1182(sp)
    1b4c:	003fb306 	br	1a1c <___vfprintf_internal_r+0xc5c>
    1b50:	d8c12017 	ldw	r3,1152(sp)
    1b54:	003e6d06 	br	150c <___vfprintf_internal_r+0x74c>
    1b58:	10803fcc 	andi	r2,r2,255
    1b5c:	00c00044 	movi	r3,1
    1b60:	10fe141e 	bne	r2,r3,13b4 <___vfprintf_internal_r+0x5f4>
    1b64:	e000021e 	bne	fp,zero,1b70 <___vfprintf_internal_r+0xdb0>
    1b68:	00800244 	movi	r2,9
    1b6c:	14c0202e 	bgeu	r2,r19,1bf0 <___vfprintf_internal_r+0xe30>
    1b70:	dc012b15 	stw	r16,1196(sp)
    1b74:	dc412c15 	stw	r17,1200(sp)
    1b78:	9821883a 	mov	r16,r19
    1b7c:	e023883a 	mov	r17,fp
    1b80:	dc810e04 	addi	r18,sp,1080
    1b84:	4027883a 	mov	r19,r8
    1b88:	4839883a 	mov	fp,r9
    1b8c:	8009883a 	mov	r4,r16
    1b90:	880b883a 	mov	r5,r17
    1b94:	01800284 	movi	r6,10
    1b98:	000f883a 	mov	r7,zero
    1b9c:	000a3300 	call	a330 <__umoddi3>
    1ba0:	10800c04 	addi	r2,r2,48
    1ba4:	94bfffc4 	addi	r18,r18,-1
    1ba8:	8009883a 	mov	r4,r16
    1bac:	880b883a 	mov	r5,r17
    1bb0:	01800284 	movi	r6,10
    1bb4:	000f883a 	mov	r7,zero
    1bb8:	90800005 	stb	r2,0(r18)
    1bbc:	0009d700 	call	9d70 <__udivdi3>
    1bc0:	1021883a 	mov	r16,r2
    1bc4:	10c4b03a 	or	r2,r2,r3
    1bc8:	1823883a 	mov	r17,r3
    1bcc:	103fef1e 	bne	r2,zero,1b8c <___vfprintf_internal_r+0xdcc>
    1bd0:	dac12817 	ldw	r11,1184(sp)
    1bd4:	dc813115 	stw	r18,1220(sp)
    1bd8:	dc012b17 	ldw	r16,1196(sp)
    1bdc:	9811883a 	mov	r8,r19
    1be0:	dc412c17 	ldw	r17,1200(sp)
    1be4:	e013883a 	mov	r9,fp
    1be8:	5ca5c83a 	sub	r18,r11,r18
    1bec:	003e0306 	br	13fc <___vfprintf_internal_r+0x63c>
    1bf0:	9cc00c04 	addi	r19,r19,48
    1bf4:	d8c10dc4 	addi	r3,sp,1079
    1bf8:	dcc10dc5 	stb	r19,1079(sp)
    1bfc:	dc813c17 	ldw	r18,1264(sp)
    1c00:	d8c13115 	stw	r3,1220(sp)
    1c04:	003dfd06 	br	13fc <___vfprintf_internal_r+0x63c>
    1c08:	00801944 	movi	r2,101
    1c0c:	1400710e 	bge	r2,r16,1dd4 <___vfprintf_internal_r+0x1014>
    1c10:	d9013717 	ldw	r4,1244(sp)
    1c14:	d9413917 	ldw	r5,1252(sp)
    1c18:	000d883a 	mov	r6,zero
    1c1c:	000f883a 	mov	r7,zero
    1c20:	d8c13d15 	stw	r3,1268(sp)
    1c24:	da013f15 	stw	r8,1276(sp)
    1c28:	000bb540 	call	bb54 <__eqdf2>
    1c2c:	d8c13d17 	ldw	r3,1268(sp)
    1c30:	da013f17 	ldw	r8,1276(sp)
    1c34:	1000ef1e 	bne	r2,zero,1ff4 <___vfprintf_internal_r+0x1234>
    1c38:	d8811f17 	ldw	r2,1148(sp)
    1c3c:	01000074 	movhi	r4,1
    1c40:	213e6904 	addi	r4,r4,-1628
    1c44:	18c00044 	addi	r3,r3,1
    1c48:	10800044 	addi	r2,r2,1
    1c4c:	41000015 	stw	r4,0(r8)
    1c50:	01000044 	movi	r4,1
    1c54:	41000115 	stw	r4,4(r8)
    1c58:	d8c12015 	stw	r3,1152(sp)
    1c5c:	d8811f15 	stw	r2,1148(sp)
    1c60:	010001c4 	movi	r4,7
    1c64:	20828e16 	blt	r4,r2,26a0 <___vfprintf_internal_r+0x18e0>
    1c68:	42000204 	addi	r8,r8,8
    1c6c:	d8812617 	ldw	r2,1176(sp)
    1c70:	dac13317 	ldw	r11,1228(sp)
    1c74:	12c00216 	blt	r2,r11,1c80 <___vfprintf_internal_r+0xec0>
    1c78:	8880004c 	andi	r2,r17,1
    1c7c:	103e7726 	beq	r2,zero,165c <___vfprintf_internal_r+0x89c>
    1c80:	db013817 	ldw	r12,1248(sp)
    1c84:	d8811f17 	ldw	r2,1148(sp)
    1c88:	dac13517 	ldw	r11,1236(sp)
    1c8c:	1b07883a 	add	r3,r3,r12
    1c90:	10800044 	addi	r2,r2,1
    1c94:	42c00015 	stw	r11,0(r8)
    1c98:	43000115 	stw	r12,4(r8)
    1c9c:	d8c12015 	stw	r3,1152(sp)
    1ca0:	d8811f15 	stw	r2,1148(sp)
    1ca4:	010001c4 	movi	r4,7
    1ca8:	2082ed16 	blt	r4,r2,2860 <___vfprintf_internal_r+0x1aa0>
    1cac:	42000204 	addi	r8,r8,8
    1cb0:	db013317 	ldw	r12,1228(sp)
    1cb4:	643fffc4 	addi	r16,r12,-1
    1cb8:	043e680e 	bge	zero,r16,165c <___vfprintf_internal_r+0x89c>
    1cbc:	04800404 	movi	r18,16
    1cc0:	d8811f17 	ldw	r2,1148(sp)
    1cc4:	94007e0e 	bge	r18,r16,1ec0 <___vfprintf_internal_r+0x1100>
    1cc8:	01400074 	movhi	r5,1
    1ccc:	297e6984 	addi	r5,r5,-1626
    1cd0:	d9412c15 	stw	r5,1200(sp)
    1cd4:	054001c4 	movi	r21,7
    1cd8:	00000306 	br	1ce8 <___vfprintf_internal_r+0xf28>
    1cdc:	42000204 	addi	r8,r8,8
    1ce0:	843ffc04 	addi	r16,r16,-16
    1ce4:	9400790e 	bge	r18,r16,1ecc <___vfprintf_internal_r+0x110c>
    1ce8:	18c00404 	addi	r3,r3,16
    1cec:	10800044 	addi	r2,r2,1
    1cf0:	45000015 	stw	r20,0(r8)
    1cf4:	44800115 	stw	r18,4(r8)
    1cf8:	d8c12015 	stw	r3,1152(sp)
    1cfc:	d8811f15 	stw	r2,1148(sp)
    1d00:	a8bff60e 	bge	r21,r2,1cdc <___vfprintf_internal_r+0xf1c>
    1d04:	b009883a 	mov	r4,r22
    1d08:	b80b883a 	mov	r5,r23
    1d0c:	d9811e04 	addi	r6,sp,1144
    1d10:	00075000 	call	7500 <__sprint_r>
    1d14:	103d411e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1d18:	d8c12017 	ldw	r3,1152(sp)
    1d1c:	d8811f17 	ldw	r2,1148(sp)
    1d20:	da000404 	addi	r8,sp,16
    1d24:	003fee06 	br	1ce0 <___vfprintf_internal_r+0xf20>
    1d28:	dac12e17 	ldw	r11,1208(sp)
    1d2c:	db012b17 	ldw	r12,1196(sp)
    1d30:	5b2bc83a 	sub	r21,r11,r12
    1d34:	057e130e 	bge	zero,r21,1584 <___vfprintf_internal_r+0x7c4>
    1d38:	07000404 	movi	fp,16
    1d3c:	d8811f17 	ldw	r2,1148(sp)
    1d40:	e543640e 	bge	fp,r21,2ad4 <___vfprintf_internal_r+0x1d14>
    1d44:	01400074 	movhi	r5,1
    1d48:	297e6984 	addi	r5,r5,-1626
    1d4c:	d9412c15 	stw	r5,1200(sp)
    1d50:	04c001c4 	movi	r19,7
    1d54:	00000306 	br	1d64 <___vfprintf_internal_r+0xfa4>
    1d58:	ad7ffc04 	addi	r21,r21,-16
    1d5c:	42000204 	addi	r8,r8,8
    1d60:	e540110e 	bge	fp,r21,1da8 <___vfprintf_internal_r+0xfe8>
    1d64:	18c00404 	addi	r3,r3,16
    1d68:	10800044 	addi	r2,r2,1
    1d6c:	45000015 	stw	r20,0(r8)
    1d70:	47000115 	stw	fp,4(r8)
    1d74:	d8c12015 	stw	r3,1152(sp)
    1d78:	d8811f15 	stw	r2,1148(sp)
    1d7c:	98bff60e 	bge	r19,r2,1d58 <___vfprintf_internal_r+0xf98>
    1d80:	b009883a 	mov	r4,r22
    1d84:	b80b883a 	mov	r5,r23
    1d88:	d9811e04 	addi	r6,sp,1144
    1d8c:	00075000 	call	7500 <__sprint_r>
    1d90:	103d221e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1d94:	ad7ffc04 	addi	r21,r21,-16
    1d98:	d8c12017 	ldw	r3,1152(sp)
    1d9c:	d8811f17 	ldw	r2,1148(sp)
    1da0:	da000404 	addi	r8,sp,16
    1da4:	e57fef16 	blt	fp,r21,1d64 <___vfprintf_internal_r+0xfa4>
    1da8:	dac12c17 	ldw	r11,1200(sp)
    1dac:	1d47883a 	add	r3,r3,r21
    1db0:	10800044 	addi	r2,r2,1
    1db4:	42c00015 	stw	r11,0(r8)
    1db8:	45400115 	stw	r21,4(r8)
    1dbc:	d8c12015 	stw	r3,1152(sp)
    1dc0:	d8811f15 	stw	r2,1148(sp)
    1dc4:	010001c4 	movi	r4,7
    1dc8:	20819116 	blt	r4,r2,2410 <___vfprintf_internal_r+0x1650>
    1dcc:	42000204 	addi	r8,r8,8
    1dd0:	003dec06 	br	1584 <___vfprintf_internal_r+0x7c4>
    1dd4:	db013317 	ldw	r12,1228(sp)
    1dd8:	00800044 	movi	r2,1
    1ddc:	18c00044 	addi	r3,r3,1
    1de0:	1301530e 	bge	r2,r12,2330 <___vfprintf_internal_r+0x1570>
    1de4:	dc011f17 	ldw	r16,1148(sp)
    1de8:	dac13117 	ldw	r11,1220(sp)
    1dec:	00800044 	movi	r2,1
    1df0:	84000044 	addi	r16,r16,1
    1df4:	40800115 	stw	r2,4(r8)
    1df8:	42c00015 	stw	r11,0(r8)
    1dfc:	d8c12015 	stw	r3,1152(sp)
    1e00:	dc011f15 	stw	r16,1148(sp)
    1e04:	008001c4 	movi	r2,7
    1e08:	14016b16 	blt	r2,r16,23b8 <___vfprintf_internal_r+0x15f8>
    1e0c:	42000204 	addi	r8,r8,8
    1e10:	db013817 	ldw	r12,1248(sp)
    1e14:	dac13517 	ldw	r11,1236(sp)
    1e18:	84000044 	addi	r16,r16,1
    1e1c:	1b07883a 	add	r3,r3,r12
    1e20:	42c00015 	stw	r11,0(r8)
    1e24:	43000115 	stw	r12,4(r8)
    1e28:	d8c12015 	stw	r3,1152(sp)
    1e2c:	dc011f15 	stw	r16,1148(sp)
    1e30:	008001c4 	movi	r2,7
    1e34:	14016916 	blt	r2,r16,23dc <___vfprintf_internal_r+0x161c>
    1e38:	44800204 	addi	r18,r8,8
    1e3c:	d9013717 	ldw	r4,1244(sp)
    1e40:	d9413917 	ldw	r5,1252(sp)
    1e44:	000d883a 	mov	r6,zero
    1e48:	000f883a 	mov	r7,zero
    1e4c:	d8c13d15 	stw	r3,1268(sp)
    1e50:	000bb540 	call	bb54 <__eqdf2>
    1e54:	d8c13d17 	ldw	r3,1268(sp)
    1e58:	db013317 	ldw	r12,1228(sp)
    1e5c:	1000ae26 	beq	r2,zero,2118 <___vfprintf_internal_r+0x1358>
    1e60:	dac13117 	ldw	r11,1220(sp)
    1e64:	60bfffc4 	addi	r2,r12,-1
    1e68:	1887883a 	add	r3,r3,r2
    1e6c:	59000044 	addi	r4,r11,1
    1e70:	84000044 	addi	r16,r16,1
    1e74:	90800115 	stw	r2,4(r18)
    1e78:	91000015 	stw	r4,0(r18)
    1e7c:	d8c12015 	stw	r3,1152(sp)
    1e80:	dc011f15 	stw	r16,1148(sp)
    1e84:	008001c4 	movi	r2,7
    1e88:	14014216 	blt	r2,r16,2394 <___vfprintf_internal_r+0x15d4>
    1e8c:	94800204 	addi	r18,r18,8
    1e90:	dac13a17 	ldw	r11,1256(sp)
    1e94:	dd4122c4 	addi	r21,sp,1163
    1e98:	84000044 	addi	r16,r16,1
    1e9c:	58c7883a 	add	r3,r11,r3
    1ea0:	95400015 	stw	r21,0(r18)
    1ea4:	92c00115 	stw	r11,4(r18)
    1ea8:	d8c12015 	stw	r3,1152(sp)
    1eac:	dc011f15 	stw	r16,1148(sp)
    1eb0:	008001c4 	movi	r2,7
    1eb4:	14000e16 	blt	r2,r16,1ef0 <___vfprintf_internal_r+0x1130>
    1eb8:	92000204 	addi	r8,r18,8
    1ebc:	003de706 	br	165c <___vfprintf_internal_r+0x89c>
    1ec0:	01000074 	movhi	r4,1
    1ec4:	213e6984 	addi	r4,r4,-1626
    1ec8:	d9012c15 	stw	r4,1200(sp)
    1ecc:	dac12c17 	ldw	r11,1200(sp)
    1ed0:	1c07883a 	add	r3,r3,r16
    1ed4:	44000115 	stw	r16,4(r8)
    1ed8:	42c00015 	stw	r11,0(r8)
    1edc:	10800044 	addi	r2,r2,1
    1ee0:	d8c12015 	stw	r3,1152(sp)
    1ee4:	d8811f15 	stw	r2,1148(sp)
    1ee8:	010001c4 	movi	r4,7
    1eec:	20bdda0e 	bge	r4,r2,1658 <___vfprintf_internal_r+0x898>
    1ef0:	b009883a 	mov	r4,r22
    1ef4:	b80b883a 	mov	r5,r23
    1ef8:	d9811e04 	addi	r6,sp,1144
    1efc:	00075000 	call	7500 <__sprint_r>
    1f00:	103cc61e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1f04:	d8c12017 	ldw	r3,1152(sp)
    1f08:	da000404 	addi	r8,sp,16
    1f0c:	003dd306 	br	165c <___vfprintf_internal_r+0x89c>
    1f10:	b009883a 	mov	r4,r22
    1f14:	b80b883a 	mov	r5,r23
    1f18:	d9811e04 	addi	r6,sp,1144
    1f1c:	00075000 	call	7500 <__sprint_r>
    1f20:	103e0926 	beq	r2,zero,1748 <___vfprintf_internal_r+0x988>
    1f24:	003cbd06 	br	121c <___vfprintf_internal_r+0x45c>
    1f28:	10803fcc 	andi	r2,r2,255
    1f2c:	1000651e 	bne	r2,zero,20c4 <___vfprintf_internal_r+0x1304>
    1f30:	8880004c 	andi	r2,r17,1
    1f34:	10013226 	beq	r2,zero,2400 <___vfprintf_internal_r+0x1640>
    1f38:	00800c04 	movi	r2,48
    1f3c:	d8c10dc4 	addi	r3,sp,1079
    1f40:	d8810dc5 	stb	r2,1079(sp)
    1f44:	dc813c17 	ldw	r18,1264(sp)
    1f48:	d8c13115 	stw	r3,1220(sp)
    1f4c:	003d2b06 	br	13fc <___vfprintf_internal_r+0x63c>
    1f50:	b009883a 	mov	r4,r22
    1f54:	b80b883a 	mov	r5,r23
    1f58:	d9811e04 	addi	r6,sp,1144
    1f5c:	00075000 	call	7500 <__sprint_r>
    1f60:	103cae1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1f64:	d8c12017 	ldw	r3,1152(sp)
    1f68:	da000404 	addi	r8,sp,16
    1f6c:	003dae06 	br	1628 <___vfprintf_internal_r+0x868>
    1f70:	b009883a 	mov	r4,r22
    1f74:	b80b883a 	mov	r5,r23
    1f78:	d9811e04 	addi	r6,sp,1144
    1f7c:	00075000 	call	7500 <__sprint_r>
    1f80:	103ca61e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1f84:	d8c12017 	ldw	r3,1152(sp)
    1f88:	da000404 	addi	r8,sp,16
    1f8c:	003d6c06 	br	1540 <___vfprintf_internal_r+0x780>
    1f90:	b009883a 	mov	r4,r22
    1f94:	b80b883a 	mov	r5,r23
    1f98:	d9811e04 	addi	r6,sp,1144
    1f9c:	00075000 	call	7500 <__sprint_r>
    1fa0:	103c9e1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    1fa4:	d8c12017 	ldw	r3,1152(sp)
    1fa8:	da000404 	addi	r8,sp,16
    1fac:	003d7206 	br	1578 <___vfprintf_internal_r+0x7b8>
    1fb0:	d9413b17 	ldw	r5,1260(sp)
    1fb4:	d8c10e04 	addi	r3,sp,1080
    1fb8:	988003cc 	andi	r2,r19,15
    1fbc:	e008973a 	slli	r4,fp,28
    1fc0:	2885883a 	add	r2,r5,r2
    1fc4:	9826d13a 	srli	r19,r19,4
    1fc8:	10800003 	ldbu	r2,0(r2)
    1fcc:	e038d13a 	srli	fp,fp,4
    1fd0:	18ffffc4 	addi	r3,r3,-1
    1fd4:	24e6b03a 	or	r19,r4,r19
    1fd8:	18800005 	stb	r2,0(r3)
    1fdc:	9f04b03a 	or	r2,r19,fp
    1fe0:	103ff51e 	bne	r2,zero,1fb8 <___vfprintf_internal_r+0x11f8>
    1fe4:	db012817 	ldw	r12,1184(sp)
    1fe8:	d8c13115 	stw	r3,1220(sp)
    1fec:	60e5c83a 	sub	r18,r12,r3
    1ff0:	003d0206 	br	13fc <___vfprintf_internal_r+0x63c>
    1ff4:	dc012617 	ldw	r16,1176(sp)
    1ff8:	0401b10e 	bge	zero,r16,26c0 <___vfprintf_internal_r+0x1900>
    1ffc:	db013117 	ldw	r12,1220(sp)
    2000:	dac13317 	ldw	r11,1228(sp)
    2004:	62e1883a 	add	r16,r12,r11
    2008:	db013417 	ldw	r12,1232(sp)
    200c:	5825883a 	mov	r18,r11
    2010:	62c0010e 	bge	r12,r11,2018 <___vfprintf_internal_r+0x1258>
    2014:	6025883a 	mov	r18,r12
    2018:	04800b0e 	bge	zero,r18,2048 <___vfprintf_internal_r+0x1288>
    201c:	d8811f17 	ldw	r2,1148(sp)
    2020:	dac13117 	ldw	r11,1220(sp)
    2024:	1c87883a 	add	r3,r3,r18
    2028:	10800044 	addi	r2,r2,1
    202c:	42c00015 	stw	r11,0(r8)
    2030:	44800115 	stw	r18,4(r8)
    2034:	d8c12015 	stw	r3,1152(sp)
    2038:	d8811f15 	stw	r2,1148(sp)
    203c:	010001c4 	movi	r4,7
    2040:	20824f16 	blt	r4,r2,2980 <___vfprintf_internal_r+0x1bc0>
    2044:	42000204 	addi	r8,r8,8
    2048:	90024b16 	blt	r18,zero,2978 <___vfprintf_internal_r+0x1bb8>
    204c:	db013417 	ldw	r12,1232(sp)
    2050:	64a5c83a 	sub	r18,r12,r18
    2054:	0480730e 	bge	zero,r18,2224 <___vfprintf_internal_r+0x1464>
    2058:	05400404 	movi	r21,16
    205c:	d8811f17 	ldw	r2,1148(sp)
    2060:	ac817d0e 	bge	r21,r18,2658 <___vfprintf_internal_r+0x1898>
    2064:	01400074 	movhi	r5,1
    2068:	297e6984 	addi	r5,r5,-1626
    206c:	d9412c15 	stw	r5,1200(sp)
    2070:	070001c4 	movi	fp,7
    2074:	00000306 	br	2084 <___vfprintf_internal_r+0x12c4>
    2078:	42000204 	addi	r8,r8,8
    207c:	94bffc04 	addi	r18,r18,-16
    2080:	ac81780e 	bge	r21,r18,2664 <___vfprintf_internal_r+0x18a4>
    2084:	18c00404 	addi	r3,r3,16
    2088:	10800044 	addi	r2,r2,1
    208c:	45000015 	stw	r20,0(r8)
    2090:	45400115 	stw	r21,4(r8)
    2094:	d8c12015 	stw	r3,1152(sp)
    2098:	d8811f15 	stw	r2,1148(sp)
    209c:	e0bff60e 	bge	fp,r2,2078 <___vfprintf_internal_r+0x12b8>
    20a0:	b009883a 	mov	r4,r22
    20a4:	b80b883a 	mov	r5,r23
    20a8:	d9811e04 	addi	r6,sp,1144
    20ac:	00075000 	call	7500 <__sprint_r>
    20b0:	103c5a1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    20b4:	d8c12017 	ldw	r3,1152(sp)
    20b8:	d8811f17 	ldw	r2,1148(sp)
    20bc:	da000404 	addi	r8,sp,16
    20c0:	003fee06 	br	207c <___vfprintf_internal_r+0x12bc>
    20c4:	dac10e04 	addi	r11,sp,1080
    20c8:	0025883a 	mov	r18,zero
    20cc:	dac13115 	stw	r11,1220(sp)
    20d0:	003cca06 	br	13fc <___vfprintf_internal_r+0x63c>
    20d4:	b009883a 	mov	r4,r22
    20d8:	b80b883a 	mov	r5,r23
    20dc:	d9811e04 	addi	r6,sp,1144
    20e0:	00075000 	call	7500 <__sprint_r>
    20e4:	103c4d1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    20e8:	d8c12017 	ldw	r3,1152(sp)
    20ec:	d8812787 	ldb	r2,1182(sp)
    20f0:	da000404 	addi	r8,sp,16
    20f4:	003d0506 	br	150c <___vfprintf_internal_r+0x74c>
    20f8:	dac12d17 	ldw	r11,1204(sp)
    20fc:	14c00017 	ldw	r19,0(r2)
    2100:	0039883a 	mov	fp,zero
    2104:	5ac00104 	addi	r11,r11,4
    2108:	dac12d15 	stw	r11,1204(sp)
    210c:	0005883a 	mov	r2,zero
    2110:	9807883a 	mov	r3,r19
    2114:	003c9c06 	br	1388 <___vfprintf_internal_r+0x5c8>
    2118:	657fffc4 	addi	r21,r12,-1
    211c:	057f5c0e 	bge	zero,r21,1e90 <___vfprintf_internal_r+0x10d0>
    2120:	07000404 	movi	fp,16
    2124:	e5408f0e 	bge	fp,r21,2364 <___vfprintf_internal_r+0x15a4>
    2128:	01000074 	movhi	r4,1
    212c:	213e6984 	addi	r4,r4,-1626
    2130:	d9012c15 	stw	r4,1200(sp)
    2134:	01c001c4 	movi	r7,7
    2138:	00000306 	br	2148 <___vfprintf_internal_r+0x1388>
    213c:	94800204 	addi	r18,r18,8
    2140:	ad7ffc04 	addi	r21,r21,-16
    2144:	e5408a0e 	bge	fp,r21,2370 <___vfprintf_internal_r+0x15b0>
    2148:	18c00404 	addi	r3,r3,16
    214c:	84000044 	addi	r16,r16,1
    2150:	95000015 	stw	r20,0(r18)
    2154:	97000115 	stw	fp,4(r18)
    2158:	d8c12015 	stw	r3,1152(sp)
    215c:	dc011f15 	stw	r16,1148(sp)
    2160:	3c3ff60e 	bge	r7,r16,213c <___vfprintf_internal_r+0x137c>
    2164:	b009883a 	mov	r4,r22
    2168:	b80b883a 	mov	r5,r23
    216c:	d9811e04 	addi	r6,sp,1144
    2170:	d9c13d15 	stw	r7,1268(sp)
    2174:	00075000 	call	7500 <__sprint_r>
    2178:	d9c13d17 	ldw	r7,1268(sp)
    217c:	103c271e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2180:	d8c12017 	ldw	r3,1152(sp)
    2184:	dc011f17 	ldw	r16,1148(sp)
    2188:	dc800404 	addi	r18,sp,16
    218c:	003fec06 	br	2140 <___vfprintf_internal_r+0x1380>
    2190:	1cc00017 	ldw	r19,0(r3)
    2194:	dac12d17 	ldw	r11,1204(sp)
    2198:	9839d7fa 	srai	fp,r19,31
    219c:	5ac00104 	addi	r11,r11,4
    21a0:	dac12d15 	stw	r11,1204(sp)
    21a4:	e005883a 	mov	r2,fp
    21a8:	003d9006 	br	17ec <___vfprintf_internal_r+0xa2c>
    21ac:	00800084 	movi	r2,2
    21b0:	9f06b03a 	or	r3,r19,fp
    21b4:	003c7406 	br	1388 <___vfprintf_internal_r+0x5c8>
    21b8:	db012d17 	ldw	r12,1204(sp)
    21bc:	14c00017 	ldw	r19,0(r2)
    21c0:	0039883a 	mov	fp,zero
    21c4:	63000104 	addi	r12,r12,4
    21c8:	db012d15 	stw	r12,1204(sp)
    21cc:	00800044 	movi	r2,1
    21d0:	9807883a 	mov	r3,r19
    21d4:	003c6c06 	br	1388 <___vfprintf_internal_r+0x5c8>
    21d8:	10803fcc 	andi	r2,r2,255
    21dc:	1080201c 	xori	r2,r2,128
    21e0:	10bfe004 	addi	r2,r2,-128
    21e4:	01000c04 	movi	r4,48
    21e8:	1101a526 	beq	r2,r4,2880 <___vfprintf_internal_r+0x1ac0>
    21ec:	dac13117 	ldw	r11,1220(sp)
    21f0:	db012817 	ldw	r12,1184(sp)
    21f4:	193fffc5 	stb	r4,-1(r3)
    21f8:	5affffc4 	addi	r11,r11,-1
    21fc:	dac13115 	stw	r11,1220(sp)
    2200:	62e5c83a 	sub	r18,r12,r11
    2204:	003c7d06 	br	13fc <___vfprintf_internal_r+0x63c>
    2208:	b009883a 	mov	r4,r22
    220c:	b80b883a 	mov	r5,r23
    2210:	d9811e04 	addi	r6,sp,1144
    2214:	00075000 	call	7500 <__sprint_r>
    2218:	103c001e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    221c:	d8c12017 	ldw	r3,1152(sp)
    2220:	da000404 	addi	r8,sp,16
    2224:	db013117 	ldw	r12,1220(sp)
    2228:	dac13417 	ldw	r11,1232(sp)
    222c:	d8812617 	ldw	r2,1176(sp)
    2230:	62e5883a 	add	r18,r12,r11
    2234:	db013317 	ldw	r12,1228(sp)
    2238:	13000216 	blt	r2,r12,2244 <___vfprintf_internal_r+0x1484>
    223c:	8900004c 	andi	r4,r17,1
    2240:	20000c26 	beq	r4,zero,2274 <___vfprintf_internal_r+0x14b4>
    2244:	dac13817 	ldw	r11,1248(sp)
    2248:	d9011f17 	ldw	r4,1148(sp)
    224c:	db013517 	ldw	r12,1236(sp)
    2250:	1ac7883a 	add	r3,r3,r11
    2254:	21000044 	addi	r4,r4,1
    2258:	43000015 	stw	r12,0(r8)
    225c:	42c00115 	stw	r11,4(r8)
    2260:	d8c12015 	stw	r3,1152(sp)
    2264:	d9011f15 	stw	r4,1148(sp)
    2268:	014001c4 	movi	r5,7
    226c:	2901cc16 	blt	r5,r4,29a0 <___vfprintf_internal_r+0x1be0>
    2270:	42000204 	addi	r8,r8,8
    2274:	dac13317 	ldw	r11,1228(sp)
    2278:	8489c83a 	sub	r4,r16,r18
    227c:	5885c83a 	sub	r2,r11,r2
    2280:	1021883a 	mov	r16,r2
    2284:	2080010e 	bge	r4,r2,228c <___vfprintf_internal_r+0x14cc>
    2288:	2021883a 	mov	r16,r4
    228c:	04000a0e 	bge	zero,r16,22b8 <___vfprintf_internal_r+0x14f8>
    2290:	d9011f17 	ldw	r4,1148(sp)
    2294:	1c07883a 	add	r3,r3,r16
    2298:	44800015 	stw	r18,0(r8)
    229c:	21000044 	addi	r4,r4,1
    22a0:	44000115 	stw	r16,4(r8)
    22a4:	d8c12015 	stw	r3,1152(sp)
    22a8:	d9011f15 	stw	r4,1148(sp)
    22ac:	014001c4 	movi	r5,7
    22b0:	2901d616 	blt	r5,r4,2a0c <___vfprintf_internal_r+0x1c4c>
    22b4:	42000204 	addi	r8,r8,8
    22b8:	8001df16 	blt	r16,zero,2a38 <___vfprintf_internal_r+0x1c78>
    22bc:	1421c83a 	sub	r16,r2,r16
    22c0:	043ce60e 	bge	zero,r16,165c <___vfprintf_internal_r+0x89c>
    22c4:	04800404 	movi	r18,16
    22c8:	d8811f17 	ldw	r2,1148(sp)
    22cc:	943efc0e 	bge	r18,r16,1ec0 <___vfprintf_internal_r+0x1100>
    22d0:	01400074 	movhi	r5,1
    22d4:	297e6984 	addi	r5,r5,-1626
    22d8:	d9412c15 	stw	r5,1200(sp)
    22dc:	054001c4 	movi	r21,7
    22e0:	00000306 	br	22f0 <___vfprintf_internal_r+0x1530>
    22e4:	42000204 	addi	r8,r8,8
    22e8:	843ffc04 	addi	r16,r16,-16
    22ec:	943ef70e 	bge	r18,r16,1ecc <___vfprintf_internal_r+0x110c>
    22f0:	18c00404 	addi	r3,r3,16
    22f4:	10800044 	addi	r2,r2,1
    22f8:	45000015 	stw	r20,0(r8)
    22fc:	44800115 	stw	r18,4(r8)
    2300:	d8c12015 	stw	r3,1152(sp)
    2304:	d8811f15 	stw	r2,1148(sp)
    2308:	a8bff60e 	bge	r21,r2,22e4 <___vfprintf_internal_r+0x1524>
    230c:	b009883a 	mov	r4,r22
    2310:	b80b883a 	mov	r5,r23
    2314:	d9811e04 	addi	r6,sp,1144
    2318:	00075000 	call	7500 <__sprint_r>
    231c:	103bbf1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2320:	d8c12017 	ldw	r3,1152(sp)
    2324:	d8811f17 	ldw	r2,1148(sp)
    2328:	da000404 	addi	r8,sp,16
    232c:	003fee06 	br	22e8 <___vfprintf_internal_r+0x1528>
    2330:	8888703a 	and	r4,r17,r2
    2334:	203eab1e 	bne	r4,zero,1de4 <___vfprintf_internal_r+0x1024>
    2338:	dc011f17 	ldw	r16,1148(sp)
    233c:	db013117 	ldw	r12,1220(sp)
    2340:	40800115 	stw	r2,4(r8)
    2344:	84000044 	addi	r16,r16,1
    2348:	43000015 	stw	r12,0(r8)
    234c:	d8c12015 	stw	r3,1152(sp)
    2350:	dc011f15 	stw	r16,1148(sp)
    2354:	008001c4 	movi	r2,7
    2358:	14000e16 	blt	r2,r16,2394 <___vfprintf_internal_r+0x15d4>
    235c:	44800204 	addi	r18,r8,8
    2360:	003ecb06 	br	1e90 <___vfprintf_internal_r+0x10d0>
    2364:	00800074 	movhi	r2,1
    2368:	10be6984 	addi	r2,r2,-1626
    236c:	d8812c15 	stw	r2,1200(sp)
    2370:	dac12c17 	ldw	r11,1200(sp)
    2374:	1d47883a 	add	r3,r3,r21
    2378:	84000044 	addi	r16,r16,1
    237c:	92c00015 	stw	r11,0(r18)
    2380:	95400115 	stw	r21,4(r18)
    2384:	d8c12015 	stw	r3,1152(sp)
    2388:	dc011f15 	stw	r16,1148(sp)
    238c:	008001c4 	movi	r2,7
    2390:	143ebe0e 	bge	r2,r16,1e8c <___vfprintf_internal_r+0x10cc>
    2394:	b009883a 	mov	r4,r22
    2398:	b80b883a 	mov	r5,r23
    239c:	d9811e04 	addi	r6,sp,1144
    23a0:	00075000 	call	7500 <__sprint_r>
    23a4:	103b9d1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    23a8:	d8c12017 	ldw	r3,1152(sp)
    23ac:	dc011f17 	ldw	r16,1148(sp)
    23b0:	dc800404 	addi	r18,sp,16
    23b4:	003eb606 	br	1e90 <___vfprintf_internal_r+0x10d0>
    23b8:	b009883a 	mov	r4,r22
    23bc:	b80b883a 	mov	r5,r23
    23c0:	d9811e04 	addi	r6,sp,1144
    23c4:	00075000 	call	7500 <__sprint_r>
    23c8:	103b941e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    23cc:	d8c12017 	ldw	r3,1152(sp)
    23d0:	dc011f17 	ldw	r16,1148(sp)
    23d4:	da000404 	addi	r8,sp,16
    23d8:	003e8d06 	br	1e10 <___vfprintf_internal_r+0x1050>
    23dc:	b009883a 	mov	r4,r22
    23e0:	b80b883a 	mov	r5,r23
    23e4:	d9811e04 	addi	r6,sp,1144
    23e8:	00075000 	call	7500 <__sprint_r>
    23ec:	103b8b1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    23f0:	d8c12017 	ldw	r3,1152(sp)
    23f4:	dc011f17 	ldw	r16,1148(sp)
    23f8:	dc800404 	addi	r18,sp,16
    23fc:	003e8f06 	br	1e3c <___vfprintf_internal_r+0x107c>
    2400:	db010e04 	addi	r12,sp,1080
    2404:	0025883a 	mov	r18,zero
    2408:	db013115 	stw	r12,1220(sp)
    240c:	003bfb06 	br	13fc <___vfprintf_internal_r+0x63c>
    2410:	b009883a 	mov	r4,r22
    2414:	b80b883a 	mov	r5,r23
    2418:	d9811e04 	addi	r6,sp,1144
    241c:	00075000 	call	7500 <__sprint_r>
    2420:	103b7e1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2424:	d8c12017 	ldw	r3,1152(sp)
    2428:	da000404 	addi	r8,sp,16
    242c:	003c5506 	br	1584 <___vfprintf_internal_r+0x7c4>
    2430:	04e7c83a 	sub	r19,zero,r19
    2434:	9804c03a 	cmpne	r2,r19,zero
    2438:	0739c83a 	sub	fp,zero,fp
    243c:	e0b9c83a 	sub	fp,fp,r2
    2440:	05400b44 	movi	r21,45
    2444:	dd412785 	stb	r21,1182(sp)
    2448:	da413215 	stw	r9,1224(sp)
    244c:	00800044 	movi	r2,1
    2450:	9f06b03a 	or	r3,r19,fp
    2454:	003bcf06 	br	1394 <___vfprintf_internal_r+0x5d4>
    2458:	da013f15 	stw	r8,1276(sp)
    245c:	da413e15 	stw	r9,1272(sp)
    2460:	00070c40 	call	70c4 <__fpclassifyd>
    2464:	da013f17 	ldw	r8,1276(sp)
    2468:	da413e17 	ldw	r9,1272(sp)
    246c:	1000ce26 	beq	r2,zero,27a8 <___vfprintf_internal_r+0x19e8>
    2470:	057ff7c4 	movi	r21,-33
    2474:	00bfffc4 	movi	r2,-1
    2478:	856a703a 	and	r21,r16,r21
    247c:	4881f026 	beq	r9,r2,2c40 <___vfprintf_internal_r+0x1e80>
    2480:	008011c4 	movi	r2,71
    2484:	a881e526 	beq	r21,r2,2c1c <___vfprintf_internal_r+0x1e5c>
    2488:	db013917 	ldw	r12,1252(sp)
    248c:	8ac04014 	ori	r11,r17,256
    2490:	dac12d15 	stw	r11,1204(sp)
    2494:	6001e416 	blt	r12,zero,2c28 <___vfprintf_internal_r+0x1e68>
    2498:	dc813917 	ldw	r18,1252(sp)
    249c:	d8012b05 	stb	zero,1196(sp)
    24a0:	00801984 	movi	r2,102
    24a4:	80811826 	beq	r16,r2,2908 <___vfprintf_internal_r+0x1b48>
    24a8:	00801184 	movi	r2,70
    24ac:	80811626 	beq	r16,r2,2908 <___vfprintf_internal_r+0x1b48>
    24b0:	00801144 	movi	r2,69
    24b4:	a881e026 	beq	r21,r2,2c38 <___vfprintf_internal_r+0x1e78>
    24b8:	4839883a 	mov	fp,r9
    24bc:	d8812604 	addi	r2,sp,1176
    24c0:	d8800115 	stw	r2,4(sp)
    24c4:	d9413717 	ldw	r5,1244(sp)
    24c8:	d8812504 	addi	r2,sp,1172
    24cc:	d8800215 	stw	r2,8(sp)
    24d0:	d8812104 	addi	r2,sp,1156
    24d4:	df000015 	stw	fp,0(sp)
    24d8:	d8800315 	stw	r2,12(sp)
    24dc:	b009883a 	mov	r4,r22
    24e0:	900d883a 	mov	r6,r18
    24e4:	01c00084 	movi	r7,2
    24e8:	da013f15 	stw	r8,1276(sp)
    24ec:	da413e15 	stw	r9,1272(sp)
    24f0:	00031100 	call	3110 <_dtoa_r>
    24f4:	d8813115 	stw	r2,1220(sp)
    24f8:	008019c4 	movi	r2,103
    24fc:	da013f17 	ldw	r8,1276(sp)
    2500:	da413e17 	ldw	r9,1272(sp)
    2504:	80800226 	beq	r16,r2,2510 <___vfprintf_internal_r+0x1750>
    2508:	008011c4 	movi	r2,71
    250c:	8081101e 	bne	r16,r2,2950 <___vfprintf_internal_r+0x1b90>
    2510:	8880004c 	andi	r2,r17,1
    2514:	1001df26 	beq	r2,zero,2c94 <___vfprintf_internal_r+0x1ed4>
    2518:	db013117 	ldw	r12,1220(sp)
    251c:	6715883a 	add	r10,r12,fp
    2520:	d9013717 	ldw	r4,1244(sp)
    2524:	900b883a 	mov	r5,r18
    2528:	000d883a 	mov	r6,zero
    252c:	000f883a 	mov	r7,zero
    2530:	da013f15 	stw	r8,1276(sp)
    2534:	da413e15 	stw	r9,1272(sp)
    2538:	da813d15 	stw	r10,1268(sp)
    253c:	000bb540 	call	bb54 <__eqdf2>
    2540:	da013f17 	ldw	r8,1276(sp)
    2544:	da413e17 	ldw	r9,1272(sp)
    2548:	da813d17 	ldw	r10,1268(sp)
    254c:	10016526 	beq	r2,zero,2ae4 <___vfprintf_internal_r+0x1d24>
    2550:	d8812117 	ldw	r2,1156(sp)
    2554:	1280062e 	bgeu	r2,r10,2570 <___vfprintf_internal_r+0x17b0>
    2558:	01000c04 	movi	r4,48
    255c:	10c00044 	addi	r3,r2,1
    2560:	d8c12115 	stw	r3,1156(sp)
    2564:	11000005 	stb	r4,0(r2)
    2568:	d8812117 	ldw	r2,1156(sp)
    256c:	12bffb36 	bltu	r2,r10,255c <___vfprintf_internal_r+0x179c>
    2570:	db013117 	ldw	r12,1220(sp)
    2574:	1305c83a 	sub	r2,r2,r12
    2578:	d8813315 	stw	r2,1228(sp)
    257c:	008011c4 	movi	r2,71
    2580:	a8814a26 	beq	r21,r2,2aac <___vfprintf_internal_r+0x1cec>
    2584:	00801944 	movi	r2,101
    2588:	14020a0e 	bge	r2,r16,2db4 <___vfprintf_internal_r+0x1ff4>
    258c:	00801984 	movi	r2,102
    2590:	8081b626 	beq	r16,r2,2c6c <___vfprintf_internal_r+0x1eac>
    2594:	db012617 	ldw	r12,1176(sp)
    2598:	db013415 	stw	r12,1232(sp)
    259c:	db013417 	ldw	r12,1232(sp)
    25a0:	dac13317 	ldw	r11,1228(sp)
    25a4:	62c1a816 	blt	r12,r11,2c48 <___vfprintf_internal_r+0x1e88>
    25a8:	8c40004c 	andi	r17,r17,1
    25ac:	8801ca1e 	bne	r17,zero,2cd8 <___vfprintf_internal_r+0x1f18>
    25b0:	6005883a 	mov	r2,r12
    25b4:	6001b516 	blt	r12,zero,2c8c <___vfprintf_internal_r+0x1ecc>
    25b8:	dc813417 	ldw	r18,1232(sp)
    25bc:	df012b07 	ldb	fp,1196(sp)
    25c0:	e001321e 	bne	fp,zero,2a8c <___vfprintf_internal_r+0x1ccc>
    25c4:	dc412d17 	ldw	r17,1204(sp)
    25c8:	dd412783 	ldbu	r21,1182(sp)
    25cc:	d8812b15 	stw	r2,1196(sp)
    25d0:	dcc12d15 	stw	r19,1204(sp)
    25d4:	d8013215 	stw	zero,1224(sp)
    25d8:	003b8d06 	br	1410 <___vfprintf_internal_r+0x650>
    25dc:	88c0100c 	andi	r3,r17,64
    25e0:	18008226 	beq	r3,zero,27ec <___vfprintf_internal_r+0x1a2c>
    25e4:	dac12d17 	ldw	r11,1204(sp)
    25e8:	14c0000b 	ldhu	r19,0(r2)
    25ec:	0039883a 	mov	fp,zero
    25f0:	5ac00104 	addi	r11,r11,4
    25f4:	dac12d15 	stw	r11,1204(sp)
    25f8:	003c8f06 	br	1838 <___vfprintf_internal_r+0xa78>
    25fc:	1c000007 	ldb	r16,0(r3)
    2600:	1805883a 	mov	r2,r3
    2604:	003a5506 	br	f5c <___vfprintf_internal_r+0x19c>
    2608:	00800084 	movi	r2,2
    260c:	003b5e06 	br	1388 <___vfprintf_internal_r+0x5c8>
    2610:	8880040c 	andi	r2,r17,16
    2614:	1000091e 	bne	r2,zero,263c <___vfprintf_internal_r+0x187c>
    2618:	8c40100c 	andi	r17,r17,64
    261c:	88000726 	beq	r17,zero,263c <___vfprintf_internal_r+0x187c>
    2620:	db012d17 	ldw	r12,1204(sp)
    2624:	dac12f17 	ldw	r11,1212(sp)
    2628:	60800017 	ldw	r2,0(r12)
    262c:	63000104 	addi	r12,r12,4
    2630:	db012d15 	stw	r12,1204(sp)
    2634:	12c0000d 	sth	r11,0(r2)
    2638:	003a1e06 	br	eb4 <___vfprintf_internal_r+0xf4>
    263c:	db012d17 	ldw	r12,1204(sp)
    2640:	dac12f17 	ldw	r11,1212(sp)
    2644:	60800017 	ldw	r2,0(r12)
    2648:	63000104 	addi	r12,r12,4
    264c:	db012d15 	stw	r12,1204(sp)
    2650:	12c00015 	stw	r11,0(r2)
    2654:	003a1706 	br	eb4 <___vfprintf_internal_r+0xf4>
    2658:	01000074 	movhi	r4,1
    265c:	213e6984 	addi	r4,r4,-1626
    2660:	d9012c15 	stw	r4,1200(sp)
    2664:	dac12c17 	ldw	r11,1200(sp)
    2668:	1c87883a 	add	r3,r3,r18
    266c:	10800044 	addi	r2,r2,1
    2670:	42c00015 	stw	r11,0(r8)
    2674:	44800115 	stw	r18,4(r8)
    2678:	d8c12015 	stw	r3,1152(sp)
    267c:	d8811f15 	stw	r2,1148(sp)
    2680:	010001c4 	movi	r4,7
    2684:	20bee016 	blt	r4,r2,2208 <___vfprintf_internal_r+0x1448>
    2688:	42000204 	addi	r8,r8,8
    268c:	003ee506 	br	2224 <___vfprintf_internal_r+0x1464>
    2690:	01000074 	movhi	r4,1
    2694:	213e6984 	addi	r4,r4,-1626
    2698:	d9012c15 	stw	r4,1200(sp)
    269c:	003bd806 	br	1600 <___vfprintf_internal_r+0x840>
    26a0:	b009883a 	mov	r4,r22
    26a4:	b80b883a 	mov	r5,r23
    26a8:	d9811e04 	addi	r6,sp,1144
    26ac:	00075000 	call	7500 <__sprint_r>
    26b0:	103ada1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    26b4:	d8c12017 	ldw	r3,1152(sp)
    26b8:	da000404 	addi	r8,sp,16
    26bc:	003d6b06 	br	1c6c <___vfprintf_internal_r+0xeac>
    26c0:	d8811f17 	ldw	r2,1148(sp)
    26c4:	03000074 	movhi	r12,1
    26c8:	01000044 	movi	r4,1
    26cc:	18c00044 	addi	r3,r3,1
    26d0:	10800044 	addi	r2,r2,1
    26d4:	633e6904 	addi	r12,r12,-1628
    26d8:	41000115 	stw	r4,4(r8)
    26dc:	43000015 	stw	r12,0(r8)
    26e0:	d8c12015 	stw	r3,1152(sp)
    26e4:	d8811f15 	stw	r2,1148(sp)
    26e8:	010001c4 	movi	r4,7
    26ec:	20804916 	blt	r4,r2,2814 <___vfprintf_internal_r+0x1a54>
    26f0:	42000204 	addi	r8,r8,8
    26f4:	8000041e 	bne	r16,zero,2708 <___vfprintf_internal_r+0x1948>
    26f8:	dac13317 	ldw	r11,1228(sp)
    26fc:	5800021e 	bne	r11,zero,2708 <___vfprintf_internal_r+0x1948>
    2700:	8880004c 	andi	r2,r17,1
    2704:	103bd526 	beq	r2,zero,165c <___vfprintf_internal_r+0x89c>
    2708:	db013817 	ldw	r12,1248(sp)
    270c:	d8811f17 	ldw	r2,1148(sp)
    2710:	dac13517 	ldw	r11,1236(sp)
    2714:	1b07883a 	add	r3,r3,r12
    2718:	10800044 	addi	r2,r2,1
    271c:	42c00015 	stw	r11,0(r8)
    2720:	43000115 	stw	r12,4(r8)
    2724:	d8c12015 	stw	r3,1152(sp)
    2728:	d8811f15 	stw	r2,1148(sp)
    272c:	010001c4 	movi	r4,7
    2730:	20813016 	blt	r4,r2,2bf4 <___vfprintf_internal_r+0x1e34>
    2734:	42000204 	addi	r8,r8,8
    2738:	0421c83a 	sub	r16,zero,r16
    273c:	0400630e 	bge	zero,r16,28cc <___vfprintf_internal_r+0x1b0c>
    2740:	04800404 	movi	r18,16
    2744:	94009f0e 	bge	r18,r16,29c4 <___vfprintf_internal_r+0x1c04>
    2748:	01000074 	movhi	r4,1
    274c:	213e6984 	addi	r4,r4,-1626
    2750:	d9012c15 	stw	r4,1200(sp)
    2754:	054001c4 	movi	r21,7
    2758:	00000306 	br	2768 <___vfprintf_internal_r+0x19a8>
    275c:	42000204 	addi	r8,r8,8
    2760:	843ffc04 	addi	r16,r16,-16
    2764:	94009a0e 	bge	r18,r16,29d0 <___vfprintf_internal_r+0x1c10>
    2768:	18c00404 	addi	r3,r3,16
    276c:	10800044 	addi	r2,r2,1
    2770:	45000015 	stw	r20,0(r8)
    2774:	44800115 	stw	r18,4(r8)
    2778:	d8c12015 	stw	r3,1152(sp)
    277c:	d8811f15 	stw	r2,1148(sp)
    2780:	a8bff60e 	bge	r21,r2,275c <___vfprintf_internal_r+0x199c>
    2784:	b009883a 	mov	r4,r22
    2788:	b80b883a 	mov	r5,r23
    278c:	d9811e04 	addi	r6,sp,1144
    2790:	00075000 	call	7500 <__sprint_r>
    2794:	103aa11e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2798:	d8c12017 	ldw	r3,1152(sp)
    279c:	d8811f17 	ldw	r2,1148(sp)
    27a0:	da000404 	addi	r8,sp,16
    27a4:	003fee06 	br	2760 <___vfprintf_internal_r+0x19a0>
    27a8:	008011c4 	movi	r2,71
    27ac:	1400b316 	blt	r2,r16,2a7c <___vfprintf_internal_r+0x1cbc>
    27b0:	03000074 	movhi	r12,1
    27b4:	633e5b04 	addi	r12,r12,-1684
    27b8:	db013115 	stw	r12,1220(sp)
    27bc:	00c000c4 	movi	r3,3
    27c0:	00bfdfc4 	movi	r2,-129
    27c4:	d8c12b15 	stw	r3,1196(sp)
    27c8:	88a2703a 	and	r17,r17,r2
    27cc:	dd412783 	ldbu	r21,1182(sp)
    27d0:	dcc12d15 	stw	r19,1204(sp)
    27d4:	1825883a 	mov	r18,r3
    27d8:	d8013215 	stw	zero,1224(sp)
    27dc:	d8013415 	stw	zero,1232(sp)
    27e0:	003b0b06 	br	1410 <___vfprintf_internal_r+0x650>
    27e4:	4825883a 	mov	r18,r9
    27e8:	003cba06 	br	1ad4 <___vfprintf_internal_r+0xd14>
    27ec:	db012d17 	ldw	r12,1204(sp)
    27f0:	14c00017 	ldw	r19,0(r2)
    27f4:	0039883a 	mov	fp,zero
    27f8:	63000104 	addi	r12,r12,4
    27fc:	db012d15 	stw	r12,1204(sp)
    2800:	003c0d06 	br	1838 <___vfprintf_internal_r+0xa78>
    2804:	00800074 	movhi	r2,1
    2808:	10be5904 	addi	r2,r2,-1692
    280c:	d8813115 	stw	r2,1220(sp)
    2810:	003ac406 	br	1324 <___vfprintf_internal_r+0x564>
    2814:	b009883a 	mov	r4,r22
    2818:	b80b883a 	mov	r5,r23
    281c:	d9811e04 	addi	r6,sp,1144
    2820:	00075000 	call	7500 <__sprint_r>
    2824:	103a7d1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2828:	dc012617 	ldw	r16,1176(sp)
    282c:	d8c12017 	ldw	r3,1152(sp)
    2830:	da000404 	addi	r8,sp,16
    2834:	003faf06 	br	26f4 <___vfprintf_internal_r+0x1934>
    2838:	db012e17 	ldw	r12,1208(sp)
    283c:	1805883a 	mov	r2,r3
    2840:	dac12d15 	stw	r11,1204(sp)
    2844:	0319c83a 	sub	r12,zero,r12
    2848:	db012e15 	stw	r12,1208(sp)
    284c:	003a7e06 	br	1248 <___vfprintf_internal_r+0x488>
    2850:	18800044 	addi	r2,r3,1
    2854:	8c400814 	ori	r17,r17,32
    2858:	1c000047 	ldb	r16,1(r3)
    285c:	0039bf06 	br	f5c <___vfprintf_internal_r+0x19c>
    2860:	b009883a 	mov	r4,r22
    2864:	b80b883a 	mov	r5,r23
    2868:	d9811e04 	addi	r6,sp,1144
    286c:	00075000 	call	7500 <__sprint_r>
    2870:	103a6a1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2874:	d8c12017 	ldw	r3,1152(sp)
    2878:	da000404 	addi	r8,sp,16
    287c:	003d0c06 	br	1cb0 <___vfprintf_internal_r+0xef0>
    2880:	db012817 	ldw	r12,1184(sp)
    2884:	d8c13117 	ldw	r3,1220(sp)
    2888:	60e5c83a 	sub	r18,r12,r3
    288c:	003adb06 	br	13fc <___vfprintf_internal_r+0x63c>
    2890:	da013f15 	stw	r8,1276(sp)
    2894:	000736c0 	call	736c <strlen>
    2898:	1025883a 	mov	r18,r2
    289c:	da013f17 	ldw	r8,1276(sp)
    28a0:	903c8e0e 	bge	r18,zero,1adc <___vfprintf_internal_r+0xd1c>
    28a4:	0005883a 	mov	r2,zero
    28a8:	003c8c06 	br	1adc <___vfprintf_internal_r+0xd1c>
    28ac:	b009883a 	mov	r4,r22
    28b0:	b80b883a 	mov	r5,r23
    28b4:	d9811e04 	addi	r6,sp,1144
    28b8:	00075000 	call	7500 <__sprint_r>
    28bc:	103a571e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    28c0:	d8c12017 	ldw	r3,1152(sp)
    28c4:	d8811f17 	ldw	r2,1148(sp)
    28c8:	da000404 	addi	r8,sp,16
    28cc:	db013317 	ldw	r12,1228(sp)
    28d0:	dac13117 	ldw	r11,1220(sp)
    28d4:	10800044 	addi	r2,r2,1
    28d8:	60c7883a 	add	r3,r12,r3
    28dc:	42c00015 	stw	r11,0(r8)
    28e0:	43000115 	stw	r12,4(r8)
    28e4:	d8c12015 	stw	r3,1152(sp)
    28e8:	d8811f15 	stw	r2,1148(sp)
    28ec:	010001c4 	movi	r4,7
    28f0:	20bb590e 	bge	r4,r2,1658 <___vfprintf_internal_r+0x898>
    28f4:	003d7e06 	br	1ef0 <___vfprintf_internal_r+0x1130>
    28f8:	01000074 	movhi	r4,1
    28fc:	213e6d84 	addi	r4,r4,-1610
    2900:	d9013615 	stw	r4,1240(sp)
    2904:	003af606 	br	14e0 <___vfprintf_internal_r+0x720>
    2908:	d8812604 	addi	r2,sp,1176
    290c:	d8800115 	stw	r2,4(sp)
    2910:	d9413717 	ldw	r5,1244(sp)
    2914:	d8812504 	addi	r2,sp,1172
    2918:	d8800215 	stw	r2,8(sp)
    291c:	d8812104 	addi	r2,sp,1156
    2920:	da400015 	stw	r9,0(sp)
    2924:	d8800315 	stw	r2,12(sp)
    2928:	b009883a 	mov	r4,r22
    292c:	900d883a 	mov	r6,r18
    2930:	01c000c4 	movi	r7,3
    2934:	da013f15 	stw	r8,1276(sp)
    2938:	da413e15 	stw	r9,1272(sp)
    293c:	00031100 	call	3110 <_dtoa_r>
    2940:	da413e17 	ldw	r9,1272(sp)
    2944:	da013f17 	ldw	r8,1276(sp)
    2948:	d8813115 	stw	r2,1220(sp)
    294c:	4839883a 	mov	fp,r9
    2950:	dac13117 	ldw	r11,1220(sp)
    2954:	00801184 	movi	r2,70
    2958:	5f15883a 	add	r10,r11,fp
    295c:	a8bef01e 	bne	r21,r2,2520 <___vfprintf_internal_r+0x1760>
    2960:	59000007 	ldb	r4,0(r11)
    2964:	00800c04 	movi	r2,48
    2968:	2080e026 	beq	r4,r2,2cec <___vfprintf_internal_r+0x1f2c>
    296c:	d8c12617 	ldw	r3,1176(sp)
    2970:	50d5883a 	add	r10,r10,r3
    2974:	003eea06 	br	2520 <___vfprintf_internal_r+0x1760>
    2978:	0025883a 	mov	r18,zero
    297c:	003db306 	br	204c <___vfprintf_internal_r+0x128c>
    2980:	b009883a 	mov	r4,r22
    2984:	b80b883a 	mov	r5,r23
    2988:	d9811e04 	addi	r6,sp,1144
    298c:	00075000 	call	7500 <__sprint_r>
    2990:	103a221e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2994:	d8c12017 	ldw	r3,1152(sp)
    2998:	da000404 	addi	r8,sp,16
    299c:	003daa06 	br	2048 <___vfprintf_internal_r+0x1288>
    29a0:	b009883a 	mov	r4,r22
    29a4:	b80b883a 	mov	r5,r23
    29a8:	d9811e04 	addi	r6,sp,1144
    29ac:	00075000 	call	7500 <__sprint_r>
    29b0:	103a1a1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    29b4:	d8812617 	ldw	r2,1176(sp)
    29b8:	d8c12017 	ldw	r3,1152(sp)
    29bc:	da000404 	addi	r8,sp,16
    29c0:	003e2c06 	br	2274 <___vfprintf_internal_r+0x14b4>
    29c4:	03000074 	movhi	r12,1
    29c8:	633e6984 	addi	r12,r12,-1626
    29cc:	db012c15 	stw	r12,1200(sp)
    29d0:	dac12c17 	ldw	r11,1200(sp)
    29d4:	1c07883a 	add	r3,r3,r16
    29d8:	10800044 	addi	r2,r2,1
    29dc:	42c00015 	stw	r11,0(r8)
    29e0:	44000115 	stw	r16,4(r8)
    29e4:	d8c12015 	stw	r3,1152(sp)
    29e8:	d8811f15 	stw	r2,1148(sp)
    29ec:	010001c4 	movi	r4,7
    29f0:	20bfae16 	blt	r4,r2,28ac <___vfprintf_internal_r+0x1aec>
    29f4:	42000204 	addi	r8,r8,8
    29f8:	003fb406 	br	28cc <___vfprintf_internal_r+0x1b0c>
    29fc:	03000074 	movhi	r12,1
    2a00:	633e6d84 	addi	r12,r12,-1610
    2a04:	db013615 	stw	r12,1240(sp)
    2a08:	003b3806 	br	16ec <___vfprintf_internal_r+0x92c>
    2a0c:	b009883a 	mov	r4,r22
    2a10:	b80b883a 	mov	r5,r23
    2a14:	d9811e04 	addi	r6,sp,1144
    2a18:	00075000 	call	7500 <__sprint_r>
    2a1c:	1039ff1e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2a20:	d8812617 	ldw	r2,1176(sp)
    2a24:	db013317 	ldw	r12,1228(sp)
    2a28:	d8c12017 	ldw	r3,1152(sp)
    2a2c:	da000404 	addi	r8,sp,16
    2a30:	6085c83a 	sub	r2,r12,r2
    2a34:	003e2006 	br	22b8 <___vfprintf_internal_r+0x14f8>
    2a38:	0021883a 	mov	r16,zero
    2a3c:	003e1f06 	br	22bc <___vfprintf_internal_r+0x14fc>
    2a40:	00800184 	movi	r2,6
    2a44:	1240012e 	bgeu	r2,r9,2a4c <___vfprintf_internal_r+0x1c8c>
    2a48:	1013883a 	mov	r9,r2
    2a4c:	4825883a 	mov	r18,r9
    2a50:	4805883a 	mov	r2,r9
    2a54:	48009e16 	blt	r9,zero,2cd0 <___vfprintf_internal_r+0x1f10>
    2a58:	d8812b15 	stw	r2,1196(sp)
    2a5c:	00800074 	movhi	r2,1
    2a60:	10be6704 	addi	r2,r2,-1636
    2a64:	d8813115 	stw	r2,1220(sp)
    2a68:	dcc12d15 	stw	r19,1204(sp)
    2a6c:	d8013215 	stw	zero,1224(sp)
    2a70:	d8013415 	stw	zero,1232(sp)
    2a74:	0005883a 	mov	r2,zero
    2a78:	003a6c06 	br	142c <___vfprintf_internal_r+0x66c>
    2a7c:	00800074 	movhi	r2,1
    2a80:	10be5c04 	addi	r2,r2,-1680
    2a84:	d8813115 	stw	r2,1220(sp)
    2a88:	003f4c06 	br	27bc <___vfprintf_internal_r+0x19fc>
    2a8c:	00c00b44 	movi	r3,45
    2a90:	d8812b15 	stw	r2,1196(sp)
    2a94:	dc412d17 	ldw	r17,1204(sp)
    2a98:	d8c12785 	stb	r3,1182(sp)
    2a9c:	dcc12d15 	stw	r19,1204(sp)
    2aa0:	d8013215 	stw	zero,1224(sp)
    2aa4:	00800b44 	movi	r2,45
    2aa8:	003a5d06 	br	1420 <___vfprintf_internal_r+0x660>
    2aac:	d8c12617 	ldw	r3,1176(sp)
    2ab0:	00bfff44 	movi	r2,-3
    2ab4:	18800d16 	blt	r3,r2,2aec <___vfprintf_internal_r+0x1d2c>
    2ab8:	48c00c16 	blt	r9,r3,2aec <___vfprintf_internal_r+0x1d2c>
    2abc:	d8c13415 	stw	r3,1232(sp)
    2ac0:	040019c4 	movi	r16,103
    2ac4:	003eb506 	br	259c <___vfprintf_internal_r+0x17dc>
    2ac8:	05400b44 	movi	r21,45
    2acc:	dd412785 	stb	r21,1182(sp)
    2ad0:	003a0f06 	br	1310 <___vfprintf_internal_r+0x550>
    2ad4:	01000074 	movhi	r4,1
    2ad8:	213e6984 	addi	r4,r4,-1626
    2adc:	d9012c15 	stw	r4,1200(sp)
    2ae0:	003cb106 	br	1da8 <___vfprintf_internal_r+0xfe8>
    2ae4:	5005883a 	mov	r2,r10
    2ae8:	003ea106 	br	2570 <___vfprintf_internal_r+0x17b0>
    2aec:	843fff84 	addi	r16,r16,-2
    2af0:	1f3fffc4 	addi	fp,r3,-1
    2af4:	df012615 	stw	fp,1176(sp)
    2af8:	dc0122c5 	stb	r16,1163(sp)
    2afc:	e0009516 	blt	fp,zero,2d54 <___vfprintf_internal_r+0x1f94>
    2b00:	00800ac4 	movi	r2,43
    2b04:	d8812305 	stb	r2,1164(sp)
    2b08:	00800244 	movi	r2,9
    2b0c:	1700690e 	bge	r2,fp,2cb4 <___vfprintf_internal_r+0x1ef4>
    2b10:	dd4122c4 	addi	r21,sp,1163
    2b14:	dc012c15 	stw	r16,1200(sp)
    2b18:	8825883a 	mov	r18,r17
    2b1c:	a821883a 	mov	r16,r21
    2b20:	4023883a 	mov	r17,r8
    2b24:	e009883a 	mov	r4,fp
    2b28:	01400284 	movi	r5,10
    2b2c:	000a9800 	call	a980 <__modsi3>
    2b30:	10800c04 	addi	r2,r2,48
    2b34:	843fffc4 	addi	r16,r16,-1
    2b38:	e009883a 	mov	r4,fp
    2b3c:	01400284 	movi	r5,10
    2b40:	80800005 	stb	r2,0(r16)
    2b44:	000a92c0 	call	a92c <__divsi3>
    2b48:	1039883a 	mov	fp,r2
    2b4c:	00800244 	movi	r2,9
    2b50:	173ff416 	blt	r2,fp,2b24 <___vfprintf_internal_r+0x1d64>
    2b54:	8811883a 	mov	r8,r17
    2b58:	e0800c04 	addi	r2,fp,48
    2b5c:	9023883a 	mov	r17,r18
    2b60:	8025883a 	mov	r18,r16
    2b64:	913fffc4 	addi	r4,r18,-1
    2b68:	90bfffc5 	stb	r2,-1(r18)
    2b6c:	dc012c17 	ldw	r16,1200(sp)
    2b70:	25408e2e 	bgeu	r4,r21,2dac <___vfprintf_internal_r+0x1fec>
    2b74:	d9412384 	addi	r5,sp,1166
    2b78:	2c8bc83a 	sub	r5,r5,r18
    2b7c:	d8c12344 	addi	r3,sp,1165
    2b80:	a94b883a 	add	r5,r21,r5
    2b84:	00000106 	br	2b8c <___vfprintf_internal_r+0x1dcc>
    2b88:	20800003 	ldbu	r2,0(r4)
    2b8c:	18800005 	stb	r2,0(r3)
    2b90:	18c00044 	addi	r3,r3,1
    2b94:	21000044 	addi	r4,r4,1
    2b98:	197ffb1e 	bne	r3,r5,2b88 <___vfprintf_internal_r+0x1dc8>
    2b9c:	d8812304 	addi	r2,sp,1164
    2ba0:	1485c83a 	sub	r2,r2,r18
    2ba4:	d8c12344 	addi	r3,sp,1165
    2ba8:	1885883a 	add	r2,r3,r2
    2bac:	dac13317 	ldw	r11,1228(sp)
    2bb0:	156bc83a 	sub	r21,r2,r21
    2bb4:	dd413a15 	stw	r21,1256(sp)
    2bb8:	00800044 	movi	r2,1
    2bbc:	5d65883a 	add	r18,r11,r21
    2bc0:	12c0770e 	bge	r2,r11,2da0 <___vfprintf_internal_r+0x1fe0>
    2bc4:	94800044 	addi	r18,r18,1
    2bc8:	9005883a 	mov	r2,r18
    2bcc:	90007216 	blt	r18,zero,2d98 <___vfprintf_internal_r+0x1fd8>
    2bd0:	d8013415 	stw	zero,1232(sp)
    2bd4:	003e7906 	br	25bc <___vfprintf_internal_r+0x17fc>
    2bd8:	da412b15 	stw	r9,1196(sp)
    2bdc:	dd412783 	ldbu	r21,1182(sp)
    2be0:	4825883a 	mov	r18,r9
    2be4:	dcc12d15 	stw	r19,1204(sp)
    2be8:	d8013215 	stw	zero,1224(sp)
    2bec:	d8013415 	stw	zero,1232(sp)
    2bf0:	003a0706 	br	1410 <___vfprintf_internal_r+0x650>
    2bf4:	b009883a 	mov	r4,r22
    2bf8:	b80b883a 	mov	r5,r23
    2bfc:	d9811e04 	addi	r6,sp,1144
    2c00:	00075000 	call	7500 <__sprint_r>
    2c04:	1039851e 	bne	r2,zero,121c <___vfprintf_internal_r+0x45c>
    2c08:	dc012617 	ldw	r16,1176(sp)
    2c0c:	d8c12017 	ldw	r3,1152(sp)
    2c10:	d8811f17 	ldw	r2,1148(sp)
    2c14:	da000404 	addi	r8,sp,16
    2c18:	003ec706 	br	2738 <___vfprintf_internal_r+0x1978>
    2c1c:	483e1a1e 	bne	r9,zero,2488 <___vfprintf_internal_r+0x16c8>
    2c20:	9013883a 	mov	r9,r18
    2c24:	003e1806 	br	2488 <___vfprintf_internal_r+0x16c8>
    2c28:	00c00b44 	movi	r3,45
    2c2c:	64a0003c 	xorhi	r18,r12,32768
    2c30:	d8c12b05 	stb	r3,1196(sp)
    2c34:	003e1a06 	br	24a0 <___vfprintf_internal_r+0x16e0>
    2c38:	4f000044 	addi	fp,r9,1
    2c3c:	003e1f06 	br	24bc <___vfprintf_internal_r+0x16fc>
    2c40:	02400184 	movi	r9,6
    2c44:	003e1006 	br	2488 <___vfprintf_internal_r+0x16c8>
    2c48:	d8c13417 	ldw	r3,1232(sp)
    2c4c:	00c04b0e 	bge	zero,r3,2d7c <___vfprintf_internal_r+0x1fbc>
    2c50:	04800044 	movi	r18,1
    2c54:	dac13317 	ldw	r11,1228(sp)
    2c58:	92e5883a 	add	r18,r18,r11
    2c5c:	9005883a 	mov	r2,r18
    2c60:	903e560e 	bge	r18,zero,25bc <___vfprintf_internal_r+0x17fc>
    2c64:	0005883a 	mov	r2,zero
    2c68:	003e5406 	br	25bc <___vfprintf_internal_r+0x17fc>
    2c6c:	d8c12617 	ldw	r3,1176(sp)
    2c70:	d8c13415 	stw	r3,1232(sp)
    2c74:	00c03b0e 	bge	zero,r3,2d64 <___vfprintf_internal_r+0x1fa4>
    2c78:	4800081e 	bne	r9,zero,2c9c <___vfprintf_internal_r+0x1edc>
    2c7c:	8c40004c 	andi	r17,r17,1
    2c80:	8800061e 	bne	r17,zero,2c9c <___vfprintf_internal_r+0x1edc>
    2c84:	1805883a 	mov	r2,r3
    2c88:	183e4b0e 	bge	r3,zero,25b8 <___vfprintf_internal_r+0x17f8>
    2c8c:	0005883a 	mov	r2,zero
    2c90:	003e4906 	br	25b8 <___vfprintf_internal_r+0x17f8>
    2c94:	d8812117 	ldw	r2,1156(sp)
    2c98:	003e3506 	br	2570 <___vfprintf_internal_r+0x17b0>
    2c9c:	dac13417 	ldw	r11,1232(sp)
    2ca0:	4a400044 	addi	r9,r9,1
    2ca4:	5a65883a 	add	r18,r11,r9
    2ca8:	9005883a 	mov	r2,r18
    2cac:	903e430e 	bge	r18,zero,25bc <___vfprintf_internal_r+0x17fc>
    2cb0:	003fec06 	br	2c64 <___vfprintf_internal_r+0x1ea4>
    2cb4:	00800c04 	movi	r2,48
    2cb8:	e0c00c04 	addi	r3,fp,48
    2cbc:	d8812345 	stb	r2,1165(sp)
    2cc0:	d8c12385 	stb	r3,1166(sp)
    2cc4:	d88123c4 	addi	r2,sp,1167
    2cc8:	dd4122c4 	addi	r21,sp,1163
    2ccc:	003fb706 	br	2bac <___vfprintf_internal_r+0x1dec>
    2cd0:	0005883a 	mov	r2,zero
    2cd4:	003f6006 	br	2a58 <___vfprintf_internal_r+0x1c98>
    2cd8:	db013417 	ldw	r12,1232(sp)
    2cdc:	64800044 	addi	r18,r12,1
    2ce0:	9005883a 	mov	r2,r18
    2ce4:	903e350e 	bge	r18,zero,25bc <___vfprintf_internal_r+0x17fc>
    2ce8:	003fde06 	br	2c64 <___vfprintf_internal_r+0x1ea4>
    2cec:	d9013717 	ldw	r4,1244(sp)
    2cf0:	900b883a 	mov	r5,r18
    2cf4:	000d883a 	mov	r6,zero
    2cf8:	000f883a 	mov	r7,zero
    2cfc:	da013f15 	stw	r8,1276(sp)
    2d00:	da413e15 	stw	r9,1272(sp)
    2d04:	da813d15 	stw	r10,1268(sp)
    2d08:	000bb540 	call	bb54 <__eqdf2>
    2d0c:	da013f17 	ldw	r8,1276(sp)
    2d10:	da413e17 	ldw	r9,1272(sp)
    2d14:	da813d17 	ldw	r10,1268(sp)
    2d18:	103f1426 	beq	r2,zero,296c <___vfprintf_internal_r+0x1bac>
    2d1c:	00800044 	movi	r2,1
    2d20:	1707c83a 	sub	r3,r2,fp
    2d24:	d8c12615 	stw	r3,1176(sp)
    2d28:	003f1106 	br	2970 <___vfprintf_internal_r+0x1bb0>
    2d2c:	dac12d17 	ldw	r11,1204(sp)
    2d30:	5a400017 	ldw	r9,0(r11)
    2d34:	5ac00104 	addi	r11,r11,4
    2d38:	dac12d15 	stw	r11,1204(sp)
    2d3c:	483ec60e 	bge	r9,zero,2858 <___vfprintf_internal_r+0x1a98>
    2d40:	027fffc4 	movi	r9,-1
    2d44:	1c000047 	ldb	r16,1(r3)
    2d48:	00388406 	br	f5c <___vfprintf_internal_r+0x19c>
    2d4c:	043fffc4 	movi	r16,-1
    2d50:	00391006 	br	1194 <___vfprintf_internal_r+0x3d4>
    2d54:	00800b44 	movi	r2,45
    2d58:	0739c83a 	sub	fp,zero,fp
    2d5c:	d8812305 	stb	r2,1164(sp)
    2d60:	003f6906 	br	2b08 <___vfprintf_internal_r+0x1d48>
    2d64:	4800081e 	bne	r9,zero,2d88 <___vfprintf_internal_r+0x1fc8>
    2d68:	8c40004c 	andi	r17,r17,1
    2d6c:	8800061e 	bne	r17,zero,2d88 <___vfprintf_internal_r+0x1fc8>
    2d70:	00800044 	movi	r2,1
    2d74:	1025883a 	mov	r18,r2
    2d78:	003e1006 	br	25bc <___vfprintf_internal_r+0x17fc>
    2d7c:	04800084 	movi	r18,2
    2d80:	90e5c83a 	sub	r18,r18,r3
    2d84:	003fb306 	br	2c54 <___vfprintf_internal_r+0x1e94>
    2d88:	4c800084 	addi	r18,r9,2
    2d8c:	9005883a 	mov	r2,r18
    2d90:	903e0a0e 	bge	r18,zero,25bc <___vfprintf_internal_r+0x17fc>
    2d94:	003fb306 	br	2c64 <___vfprintf_internal_r+0x1ea4>
    2d98:	0005883a 	mov	r2,zero
    2d9c:	003f8c06 	br	2bd0 <___vfprintf_internal_r+0x1e10>
    2da0:	88a2703a 	and	r17,r17,r2
    2da4:	883f8826 	beq	r17,zero,2bc8 <___vfprintf_internal_r+0x1e08>
    2da8:	003f8606 	br	2bc4 <___vfprintf_internal_r+0x1e04>
    2dac:	d8812344 	addi	r2,sp,1165
    2db0:	003f7e06 	br	2bac <___vfprintf_internal_r+0x1dec>
    2db4:	d8c12617 	ldw	r3,1176(sp)
    2db8:	003f4d06 	br	2af0 <___vfprintf_internal_r+0x1d30>

00002dbc <__vfprintf_internal>:
    2dbc:	2007883a 	mov	r3,r4
    2dc0:	01000074 	movhi	r4,1
    2dc4:	2105c204 	addi	r4,r4,5896
    2dc8:	21000017 	ldw	r4,0(r4)
    2dcc:	2805883a 	mov	r2,r5
    2dd0:	300f883a 	mov	r7,r6
    2dd4:	180b883a 	mov	r5,r3
    2dd8:	100d883a 	mov	r6,r2
    2ddc:	0000dc01 	jmpi	dc0 <___vfprintf_internal_r>

00002de0 <__swsetup_r>:
    2de0:	00800074 	movhi	r2,1
    2de4:	defffd04 	addi	sp,sp,-12
    2de8:	1085c204 	addi	r2,r2,5896
    2dec:	dc400115 	stw	r17,4(sp)
    2df0:	2023883a 	mov	r17,r4
    2df4:	11000017 	ldw	r4,0(r2)
    2df8:	dc000015 	stw	r16,0(sp)
    2dfc:	dfc00215 	stw	ra,8(sp)
    2e00:	2821883a 	mov	r16,r5
    2e04:	20000226 	beq	r4,zero,2e10 <__swsetup_r+0x30>
    2e08:	20c00e17 	ldw	r3,56(r4)
    2e0c:	18002e26 	beq	r3,zero,2ec8 <__swsetup_r+0xe8>
    2e10:	8080030b 	ldhu	r2,12(r16)
    2e14:	10c0020c 	andi	r3,r2,8
    2e18:	100d883a 	mov	r6,r2
    2e1c:	18000f26 	beq	r3,zero,2e5c <__swsetup_r+0x7c>
    2e20:	80c00417 	ldw	r3,16(r16)
    2e24:	18001526 	beq	r3,zero,2e7c <__swsetup_r+0x9c>
    2e28:	1100004c 	andi	r4,r2,1
    2e2c:	20001c1e 	bne	r4,zero,2ea0 <__swsetup_r+0xc0>
    2e30:	1080008c 	andi	r2,r2,2
    2e34:	1000261e 	bne	r2,zero,2ed0 <__swsetup_r+0xf0>
    2e38:	80800517 	ldw	r2,20(r16)
    2e3c:	80800215 	stw	r2,8(r16)
    2e40:	18001c26 	beq	r3,zero,2eb4 <__swsetup_r+0xd4>
    2e44:	0005883a 	mov	r2,zero
    2e48:	dfc00217 	ldw	ra,8(sp)
    2e4c:	dc400117 	ldw	r17,4(sp)
    2e50:	dc000017 	ldw	r16,0(sp)
    2e54:	dec00304 	addi	sp,sp,12
    2e58:	f800283a 	ret
    2e5c:	3080040c 	andi	r2,r6,16
    2e60:	10001726 	beq	r2,zero,2ec0 <__swsetup_r+0xe0>
    2e64:	3080010c 	andi	r2,r6,4
    2e68:	10001b1e 	bne	r2,zero,2ed8 <__swsetup_r+0xf8>
    2e6c:	80c00417 	ldw	r3,16(r16)
    2e70:	30800214 	ori	r2,r6,8
    2e74:	8080030d 	sth	r2,12(r16)
    2e78:	183feb1e 	bne	r3,zero,2e28 <__swsetup_r+0x48>
    2e7c:	1140a00c 	andi	r5,r2,640
    2e80:	01008004 	movi	r4,512
    2e84:	293fe826 	beq	r5,r4,2e28 <__swsetup_r+0x48>
    2e88:	8809883a 	mov	r4,r17
    2e8c:	800b883a 	mov	r5,r16
    2e90:	00054940 	call	5494 <__smakebuf_r>
    2e94:	8080030b 	ldhu	r2,12(r16)
    2e98:	80c00417 	ldw	r3,16(r16)
    2e9c:	003fe206 	br	2e28 <__swsetup_r+0x48>
    2ea0:	80800517 	ldw	r2,20(r16)
    2ea4:	80000215 	stw	zero,8(r16)
    2ea8:	0085c83a 	sub	r2,zero,r2
    2eac:	80800615 	stw	r2,24(r16)
    2eb0:	183fe41e 	bne	r3,zero,2e44 <__swsetup_r+0x64>
    2eb4:	8080030b 	ldhu	r2,12(r16)
    2eb8:	1080200c 	andi	r2,r2,128
    2ebc:	103fe226 	beq	r2,zero,2e48 <__swsetup_r+0x68>
    2ec0:	00bfffc4 	movi	r2,-1
    2ec4:	003fe006 	br	2e48 <__swsetup_r+0x68>
    2ec8:	0004de00 	call	4de0 <__sinit>
    2ecc:	003fd006 	br	2e10 <__swsetup_r+0x30>
    2ed0:	0005883a 	mov	r2,zero
    2ed4:	003fd906 	br	2e3c <__swsetup_r+0x5c>
    2ed8:	81400c17 	ldw	r5,48(r16)
    2edc:	28000626 	beq	r5,zero,2ef8 <__swsetup_r+0x118>
    2ee0:	80801004 	addi	r2,r16,64
    2ee4:	28800326 	beq	r5,r2,2ef4 <__swsetup_r+0x114>
    2ee8:	8809883a 	mov	r4,r17
    2eec:	0004f540 	call	4f54 <_free_r>
    2ef0:	8180030b 	ldhu	r6,12(r16)
    2ef4:	80000c15 	stw	zero,48(r16)
    2ef8:	80c00417 	ldw	r3,16(r16)
    2efc:	00bff6c4 	movi	r2,-37
    2f00:	118c703a 	and	r6,r2,r6
    2f04:	80000115 	stw	zero,4(r16)
    2f08:	80c00015 	stw	r3,0(r16)
    2f0c:	003fd806 	br	2e70 <__swsetup_r+0x90>

00002f10 <quorem>:
    2f10:	defff704 	addi	sp,sp,-36
    2f14:	dc800215 	stw	r18,8(sp)
    2f18:	20800417 	ldw	r2,16(r4)
    2f1c:	2c800417 	ldw	r18,16(r5)
    2f20:	dfc00815 	stw	ra,32(sp)
    2f24:	ddc00715 	stw	r23,28(sp)
    2f28:	dd800615 	stw	r22,24(sp)
    2f2c:	dd400515 	stw	r21,20(sp)
    2f30:	dd000415 	stw	r20,16(sp)
    2f34:	dcc00315 	stw	r19,12(sp)
    2f38:	dc400115 	stw	r17,4(sp)
    2f3c:	dc000015 	stw	r16,0(sp)
    2f40:	14807116 	blt	r2,r18,3108 <quorem+0x1f8>
    2f44:	94bfffc4 	addi	r18,r18,-1
    2f48:	94ad883a 	add	r22,r18,r18
    2f4c:	b5ad883a 	add	r22,r22,r22
    2f50:	2c400504 	addi	r17,r5,20
    2f54:	8da9883a 	add	r20,r17,r22
    2f58:	25400504 	addi	r21,r4,20
    2f5c:	282f883a 	mov	r23,r5
    2f60:	adad883a 	add	r22,r21,r22
    2f64:	a1400017 	ldw	r5,0(r20)
    2f68:	2021883a 	mov	r16,r4
    2f6c:	b1000017 	ldw	r4,0(r22)
    2f70:	29400044 	addi	r5,r5,1
    2f74:	000a9dc0 	call	a9dc <__udivsi3>
    2f78:	1027883a 	mov	r19,r2
    2f7c:	10002c26 	beq	r2,zero,3030 <quorem+0x120>
    2f80:	a813883a 	mov	r9,r21
    2f84:	8811883a 	mov	r8,r17
    2f88:	0009883a 	mov	r4,zero
    2f8c:	000d883a 	mov	r6,zero
    2f90:	41c00017 	ldw	r7,0(r8)
    2f94:	49400017 	ldw	r5,0(r9)
    2f98:	42000104 	addi	r8,r8,4
    2f9c:	38bfffcc 	andi	r2,r7,65535
    2fa0:	14c5383a 	mul	r2,r2,r19
    2fa4:	380ed43a 	srli	r7,r7,16
    2fa8:	28ffffcc 	andi	r3,r5,65535
    2fac:	2085883a 	add	r2,r4,r2
    2fb0:	1008d43a 	srli	r4,r2,16
    2fb4:	3ccf383a 	mul	r7,r7,r19
    2fb8:	198d883a 	add	r6,r3,r6
    2fbc:	10ffffcc 	andi	r3,r2,65535
    2fc0:	30c7c83a 	sub	r3,r6,r3
    2fc4:	280ad43a 	srli	r5,r5,16
    2fc8:	21c9883a 	add	r4,r4,r7
    2fcc:	180dd43a 	srai	r6,r3,16
    2fd0:	20bfffcc 	andi	r2,r4,65535
    2fd4:	288bc83a 	sub	r5,r5,r2
    2fd8:	298b883a 	add	r5,r5,r6
    2fdc:	280e943a 	slli	r7,r5,16
    2fe0:	18ffffcc 	andi	r3,r3,65535
    2fe4:	2008d43a 	srli	r4,r4,16
    2fe8:	38ceb03a 	or	r7,r7,r3
    2fec:	49c00015 	stw	r7,0(r9)
    2ff0:	280dd43a 	srai	r6,r5,16
    2ff4:	4a400104 	addi	r9,r9,4
    2ff8:	a23fe52e 	bgeu	r20,r8,2f90 <quorem+0x80>
    2ffc:	b0800017 	ldw	r2,0(r22)
    3000:	10000b1e 	bne	r2,zero,3030 <quorem+0x120>
    3004:	b0bfff04 	addi	r2,r22,-4
    3008:	a880082e 	bgeu	r21,r2,302c <quorem+0x11c>
    300c:	b0ffff17 	ldw	r3,-4(r22)
    3010:	18000326 	beq	r3,zero,3020 <quorem+0x110>
    3014:	00000506 	br	302c <quorem+0x11c>
    3018:	10c00017 	ldw	r3,0(r2)
    301c:	1800031e 	bne	r3,zero,302c <quorem+0x11c>
    3020:	10bfff04 	addi	r2,r2,-4
    3024:	94bfffc4 	addi	r18,r18,-1
    3028:	a8bffb36 	bltu	r21,r2,3018 <quorem+0x108>
    302c:	84800415 	stw	r18,16(r16)
    3030:	8009883a 	mov	r4,r16
    3034:	b80b883a 	mov	r5,r23
    3038:	00069f80 	call	69f8 <__mcmp>
    303c:	10002616 	blt	r2,zero,30d8 <quorem+0x1c8>
    3040:	9cc00044 	addi	r19,r19,1
    3044:	a80d883a 	mov	r6,r21
    3048:	000b883a 	mov	r5,zero
    304c:	31000017 	ldw	r4,0(r6)
    3050:	88800017 	ldw	r2,0(r17)
    3054:	31800104 	addi	r6,r6,4
    3058:	20ffffcc 	andi	r3,r4,65535
    305c:	194b883a 	add	r5,r3,r5
    3060:	10ffffcc 	andi	r3,r2,65535
    3064:	28c7c83a 	sub	r3,r5,r3
    3068:	1004d43a 	srli	r2,r2,16
    306c:	2008d43a 	srli	r4,r4,16
    3070:	180bd43a 	srai	r5,r3,16
    3074:	18ffffcc 	andi	r3,r3,65535
    3078:	2089c83a 	sub	r4,r4,r2
    307c:	2149883a 	add	r4,r4,r5
    3080:	2004943a 	slli	r2,r4,16
    3084:	8c400104 	addi	r17,r17,4
    3088:	200bd43a 	srai	r5,r4,16
    308c:	10c6b03a 	or	r3,r2,r3
    3090:	30ffff15 	stw	r3,-4(r6)
    3094:	a47fed2e 	bgeu	r20,r17,304c <quorem+0x13c>
    3098:	9485883a 	add	r2,r18,r18
    309c:	1085883a 	add	r2,r2,r2
    30a0:	a887883a 	add	r3,r21,r2
    30a4:	18800017 	ldw	r2,0(r3)
    30a8:	10000b1e 	bne	r2,zero,30d8 <quorem+0x1c8>
    30ac:	18bfff04 	addi	r2,r3,-4
    30b0:	a880082e 	bgeu	r21,r2,30d4 <quorem+0x1c4>
    30b4:	18ffff17 	ldw	r3,-4(r3)
    30b8:	18000326 	beq	r3,zero,30c8 <quorem+0x1b8>
    30bc:	00000506 	br	30d4 <quorem+0x1c4>
    30c0:	10c00017 	ldw	r3,0(r2)
    30c4:	1800031e 	bne	r3,zero,30d4 <quorem+0x1c4>
    30c8:	10bfff04 	addi	r2,r2,-4
    30cc:	94bfffc4 	addi	r18,r18,-1
    30d0:	a8bffb36 	bltu	r21,r2,30c0 <quorem+0x1b0>
    30d4:	84800415 	stw	r18,16(r16)
    30d8:	9805883a 	mov	r2,r19
    30dc:	dfc00817 	ldw	ra,32(sp)
    30e0:	ddc00717 	ldw	r23,28(sp)
    30e4:	dd800617 	ldw	r22,24(sp)
    30e8:	dd400517 	ldw	r21,20(sp)
    30ec:	dd000417 	ldw	r20,16(sp)
    30f0:	dcc00317 	ldw	r19,12(sp)
    30f4:	dc800217 	ldw	r18,8(sp)
    30f8:	dc400117 	ldw	r17,4(sp)
    30fc:	dc000017 	ldw	r16,0(sp)
    3100:	dec00904 	addi	sp,sp,36
    3104:	f800283a 	ret
    3108:	0005883a 	mov	r2,zero
    310c:	003ff306 	br	30dc <quorem+0x1cc>

00003110 <_dtoa_r>:
    3110:	20801017 	ldw	r2,64(r4)
    3114:	deffde04 	addi	sp,sp,-136
    3118:	dd401d15 	stw	r21,116(sp)
    311c:	dcc01b15 	stw	r19,108(sp)
    3120:	dc801a15 	stw	r18,104(sp)
    3124:	dc401915 	stw	r17,100(sp)
    3128:	dc001815 	stw	r16,96(sp)
    312c:	dfc02115 	stw	ra,132(sp)
    3130:	df002015 	stw	fp,128(sp)
    3134:	ddc01f15 	stw	r23,124(sp)
    3138:	dd801e15 	stw	r22,120(sp)
    313c:	dd001c15 	stw	r20,112(sp)
    3140:	d9c00315 	stw	r7,12(sp)
    3144:	2021883a 	mov	r16,r4
    3148:	302b883a 	mov	r21,r6
    314c:	2825883a 	mov	r18,r5
    3150:	dc402417 	ldw	r17,144(sp)
    3154:	3027883a 	mov	r19,r6
    3158:	10000826 	beq	r2,zero,317c <_dtoa_r+0x6c>
    315c:	21801117 	ldw	r6,68(r4)
    3160:	00c00044 	movi	r3,1
    3164:	100b883a 	mov	r5,r2
    3168:	1986983a 	sll	r3,r3,r6
    316c:	11800115 	stw	r6,4(r2)
    3170:	10c00215 	stw	r3,8(r2)
    3174:	00061e00 	call	61e0 <_Bfree>
    3178:	80001015 	stw	zero,64(r16)
    317c:	a8002d16 	blt	r21,zero,3234 <_dtoa_r+0x124>
    3180:	88000015 	stw	zero,0(r17)
    3184:	a8dffc2c 	andhi	r3,r21,32752
    3188:	009ffc34 	movhi	r2,32752
    318c:	18801b26 	beq	r3,r2,31fc <_dtoa_r+0xec>
    3190:	9009883a 	mov	r4,r18
    3194:	980b883a 	mov	r5,r19
    3198:	000d883a 	mov	r6,zero
    319c:	000f883a 	mov	r7,zero
    31a0:	000bb540 	call	bb54 <__eqdf2>
    31a4:	10002a1e 	bne	r2,zero,3250 <_dtoa_r+0x140>
    31a8:	d8c02317 	ldw	r3,140(sp)
    31ac:	d9002517 	ldw	r4,148(sp)
    31b0:	00800044 	movi	r2,1
    31b4:	18800015 	stw	r2,0(r3)
    31b8:	2001a226 	beq	r4,zero,3844 <_dtoa_r+0x734>
    31bc:	00800074 	movhi	r2,1
    31c0:	10be6944 	addi	r2,r2,-1627
    31c4:	20800015 	stw	r2,0(r4)
    31c8:	10bfffc4 	addi	r2,r2,-1
    31cc:	dfc02117 	ldw	ra,132(sp)
    31d0:	df002017 	ldw	fp,128(sp)
    31d4:	ddc01f17 	ldw	r23,124(sp)
    31d8:	dd801e17 	ldw	r22,120(sp)
    31dc:	dd401d17 	ldw	r21,116(sp)
    31e0:	dd001c17 	ldw	r20,112(sp)
    31e4:	dcc01b17 	ldw	r19,108(sp)
    31e8:	dc801a17 	ldw	r18,104(sp)
    31ec:	dc401917 	ldw	r17,100(sp)
    31f0:	dc001817 	ldw	r16,96(sp)
    31f4:	dec02204 	addi	sp,sp,136
    31f8:	f800283a 	ret
    31fc:	d8c02317 	ldw	r3,140(sp)
    3200:	0089c3c4 	movi	r2,9999
    3204:	18800015 	stw	r2,0(r3)
    3208:	90017c26 	beq	r18,zero,37fc <_dtoa_r+0x6ec>
    320c:	00800074 	movhi	r2,1
    3210:	10be7504 	addi	r2,r2,-1580
    3214:	d9002517 	ldw	r4,148(sp)
    3218:	203fec26 	beq	r4,zero,31cc <_dtoa_r+0xbc>
    321c:	10c000c7 	ldb	r3,3(r2)
    3220:	18017d1e 	bne	r3,zero,3818 <_dtoa_r+0x708>
    3224:	10c000c4 	addi	r3,r2,3
    3228:	d9802517 	ldw	r6,148(sp)
    322c:	30c00015 	stw	r3,0(r6)
    3230:	003fe606 	br	31cc <_dtoa_r+0xbc>
    3234:	04e00034 	movhi	r19,32768
    3238:	9cffffc4 	addi	r19,r19,-1
    323c:	00800044 	movi	r2,1
    3240:	ace6703a 	and	r19,r21,r19
    3244:	88800015 	stw	r2,0(r17)
    3248:	982b883a 	mov	r21,r19
    324c:	003fcd06 	br	3184 <_dtoa_r+0x74>
    3250:	d8800204 	addi	r2,sp,8
    3254:	a822d53a 	srli	r17,r21,20
    3258:	d8800015 	stw	r2,0(sp)
    325c:	8009883a 	mov	r4,r16
    3260:	900b883a 	mov	r5,r18
    3264:	980d883a 	mov	r6,r19
    3268:	d9c00104 	addi	r7,sp,4
    326c:	0006d6c0 	call	6d6c <__d2b>
    3270:	1039883a 	mov	fp,r2
    3274:	88016a1e 	bne	r17,zero,3820 <_dtoa_r+0x710>
    3278:	dd000217 	ldw	r20,8(sp)
    327c:	dc400117 	ldw	r17,4(sp)
    3280:	00befbc4 	movi	r2,-1041
    3284:	a463883a 	add	r17,r20,r17
    3288:	8882ea16 	blt	r17,r2,3e34 <_dtoa_r+0xd24>
    328c:	00bf0384 	movi	r2,-1010
    3290:	1445c83a 	sub	r2,r2,r17
    3294:	89010484 	addi	r4,r17,1042
    3298:	a8aa983a 	sll	r21,r21,r2
    329c:	9108d83a 	srl	r4,r18,r4
    32a0:	a908b03a 	or	r4,r21,r4
    32a4:	000cee40 	call	cee4 <__floatunsidf>
    32a8:	017f8434 	movhi	r5,65040
    32ac:	01800044 	movi	r6,1
    32b0:	1009883a 	mov	r4,r2
    32b4:	194b883a 	add	r5,r3,r5
    32b8:	8c7fffc4 	addi	r17,r17,-1
    32bc:	d9800f15 	stw	r6,60(sp)
    32c0:	000d883a 	mov	r6,zero
    32c4:	01cffe34 	movhi	r7,16376
    32c8:	000c4bc0 	call	c4bc <__subdf3>
    32cc:	0198dbf4 	movhi	r6,25455
    32d0:	01cff4f4 	movhi	r7,16339
    32d4:	1009883a 	mov	r4,r2
    32d8:	180b883a 	mov	r5,r3
    32dc:	3190d844 	addi	r6,r6,17249
    32e0:	39e1e9c4 	addi	r7,r7,-30809
    32e4:	000bd980 	call	bd98 <__muldf3>
    32e8:	01a2d874 	movhi	r6,35681
    32ec:	01cff1f4 	movhi	r7,16327
    32f0:	180b883a 	mov	r5,r3
    32f4:	31b22cc4 	addi	r6,r6,-14157
    32f8:	39e28a04 	addi	r7,r7,-30168
    32fc:	1009883a 	mov	r4,r2
    3300:	000a9ec0 	call	a9ec <__adddf3>
    3304:	8809883a 	mov	r4,r17
    3308:	102d883a 	mov	r22,r2
    330c:	182b883a 	mov	r21,r3
    3310:	000ce140 	call	ce14 <__floatsidf>
    3314:	019427f4 	movhi	r6,20639
    3318:	01cff4f4 	movhi	r7,16339
    331c:	1009883a 	mov	r4,r2
    3320:	180b883a 	mov	r5,r3
    3324:	319e7ec4 	addi	r6,r6,31227
    3328:	39d104c4 	addi	r7,r7,17427
    332c:	000bd980 	call	bd98 <__muldf3>
    3330:	b009883a 	mov	r4,r22
    3334:	a80b883a 	mov	r5,r21
    3338:	100d883a 	mov	r6,r2
    333c:	180f883a 	mov	r7,r3
    3340:	000a9ec0 	call	a9ec <__adddf3>
    3344:	1009883a 	mov	r4,r2
    3348:	180b883a 	mov	r5,r3
    334c:	102d883a 	mov	r22,r2
    3350:	182b883a 	mov	r21,r3
    3354:	000cd8c0 	call	cd8c <__fixdfsi>
    3358:	b009883a 	mov	r4,r22
    335c:	a80b883a 	mov	r5,r21
    3360:	000d883a 	mov	r6,zero
    3364:	000f883a 	mov	r7,zero
    3368:	d8800515 	stw	r2,20(sp)
    336c:	000bcb80 	call	bcb8 <__ledf2>
    3370:	10023116 	blt	r2,zero,3c38 <_dtoa_r+0xb28>
    3374:	d8c00517 	ldw	r3,20(sp)
    3378:	00800584 	movi	r2,22
    337c:	10c21f36 	bltu	r2,r3,3bfc <_dtoa_r+0xaec>
    3380:	180490fa 	slli	r2,r3,3
    3384:	00c00074 	movhi	r3,1
    3388:	18fe9104 	addi	r3,r3,-1468
    338c:	1885883a 	add	r2,r3,r2
    3390:	11000017 	ldw	r4,0(r2)
    3394:	11400117 	ldw	r5,4(r2)
    3398:	900d883a 	mov	r6,r18
    339c:	980f883a 	mov	r7,r19
    33a0:	000bbd80 	call	bbd8 <__gedf2>
    33a4:	0082a70e 	bge	zero,r2,3e44 <_dtoa_r+0xd34>
    33a8:	d9000517 	ldw	r4,20(sp)
    33ac:	d8000c15 	stw	zero,48(sp)
    33b0:	213fffc4 	addi	r4,r4,-1
    33b4:	d9000515 	stw	r4,20(sp)
    33b8:	a463c83a 	sub	r17,r20,r17
    33bc:	8dbfffc4 	addi	r22,r17,-1
    33c0:	b0021916 	blt	r22,zero,3c28 <_dtoa_r+0xb18>
    33c4:	d8000815 	stw	zero,32(sp)
    33c8:	d8800517 	ldw	r2,20(sp)
    33cc:	10020e16 	blt	r2,zero,3c08 <_dtoa_r+0xaf8>
    33d0:	b0ad883a 	add	r22,r22,r2
    33d4:	d8800a15 	stw	r2,40(sp)
    33d8:	d8000915 	stw	zero,36(sp)
    33dc:	d8c00317 	ldw	r3,12(sp)
    33e0:	00800244 	movi	r2,9
    33e4:	10c11a36 	bltu	r2,r3,3850 <_dtoa_r+0x740>
    33e8:	00800144 	movi	r2,5
    33ec:	10c4fc0e 	bge	r2,r3,47e0 <_dtoa_r+0x16d0>
    33f0:	18ffff04 	addi	r3,r3,-4
    33f4:	d8c00315 	stw	r3,12(sp)
    33f8:	0029883a 	mov	r20,zero
    33fc:	d9800317 	ldw	r6,12(sp)
    3400:	008000c4 	movi	r2,3
    3404:	3083bd26 	beq	r6,r2,42fc <_dtoa_r+0x11ec>
    3408:	1183670e 	bge	r2,r6,41a8 <_dtoa_r+0x1098>
    340c:	d8c00317 	ldw	r3,12(sp)
    3410:	00800104 	movi	r2,4
    3414:	1882e726 	beq	r3,r2,3fb4 <_dtoa_r+0xea4>
    3418:	00800144 	movi	r2,5
    341c:	1884f21e 	bne	r3,r2,47e8 <_dtoa_r+0x16d8>
    3420:	00800044 	movi	r2,1
    3424:	d8800b15 	stw	r2,44(sp)
    3428:	d8c02217 	ldw	r3,136(sp)
    342c:	d9000517 	ldw	r4,20(sp)
    3430:	1907883a 	add	r3,r3,r4
    3434:	19800044 	addi	r6,r3,1
    3438:	d8c00d15 	stw	r3,52(sp)
    343c:	d9800615 	stw	r6,24(sp)
    3440:	0183c30e 	bge	zero,r6,4350 <_dtoa_r+0x1240>
    3444:	d9800617 	ldw	r6,24(sp)
    3448:	3023883a 	mov	r17,r6
    344c:	80001115 	stw	zero,68(r16)
    3450:	008005c4 	movi	r2,23
    3454:	1184f62e 	bgeu	r2,r6,4830 <_dtoa_r+0x1720>
    3458:	00c00044 	movi	r3,1
    345c:	00800104 	movi	r2,4
    3460:	1085883a 	add	r2,r2,r2
    3464:	11000504 	addi	r4,r2,20
    3468:	180b883a 	mov	r5,r3
    346c:	18c00044 	addi	r3,r3,1
    3470:	313ffb2e 	bgeu	r6,r4,3460 <_dtoa_r+0x350>
    3474:	81401115 	stw	r5,68(r16)
    3478:	8009883a 	mov	r4,r16
    347c:	00061380 	call	6138 <_Balloc>
    3480:	d8800715 	stw	r2,28(sp)
    3484:	80801015 	stw	r2,64(r16)
    3488:	00800384 	movi	r2,14
    348c:	1440fd36 	bltu	r2,r17,3884 <_dtoa_r+0x774>
    3490:	a000fc26 	beq	r20,zero,3884 <_dtoa_r+0x774>
    3494:	d8800517 	ldw	r2,20(sp)
    3498:	0083b90e 	bge	zero,r2,4380 <_dtoa_r+0x1270>
    349c:	d8c00517 	ldw	r3,20(sp)
    34a0:	108003cc 	andi	r2,r2,15
    34a4:	100490fa 	slli	r2,r2,3
    34a8:	182fd13a 	srai	r23,r3,4
    34ac:	00c00074 	movhi	r3,1
    34b0:	18fe9104 	addi	r3,r3,-1468
    34b4:	1885883a 	add	r2,r3,r2
    34b8:	b8c0040c 	andi	r3,r23,16
    34bc:	12c00017 	ldw	r11,0(r2)
    34c0:	12800117 	ldw	r10,4(r2)
    34c4:	18039726 	beq	r3,zero,4324 <_dtoa_r+0x1214>
    34c8:	00800074 	movhi	r2,1
    34cc:	10be8704 	addi	r2,r2,-1508
    34d0:	11800817 	ldw	r6,32(r2)
    34d4:	11c00917 	ldw	r7,36(r2)
    34d8:	9009883a 	mov	r4,r18
    34dc:	980b883a 	mov	r5,r19
    34e0:	da801615 	stw	r10,88(sp)
    34e4:	dac01515 	stw	r11,84(sp)
    34e8:	000b2880 	call	b288 <__divdf3>
    34ec:	da801617 	ldw	r10,88(sp)
    34f0:	dac01517 	ldw	r11,84(sp)
    34f4:	bdc003cc 	andi	r23,r23,15
    34f8:	044000c4 	movi	r17,3
    34fc:	d8800e15 	stw	r2,56(sp)
    3500:	182b883a 	mov	r21,r3
    3504:	b8001126 	beq	r23,zero,354c <_dtoa_r+0x43c>
    3508:	05000074 	movhi	r20,1
    350c:	a53e8704 	addi	r20,r20,-1508
    3510:	5805883a 	mov	r2,r11
    3514:	5007883a 	mov	r3,r10
    3518:	b980004c 	andi	r6,r23,1
    351c:	1009883a 	mov	r4,r2
    3520:	b82fd07a 	srai	r23,r23,1
    3524:	180b883a 	mov	r5,r3
    3528:	30000426 	beq	r6,zero,353c <_dtoa_r+0x42c>
    352c:	a1800017 	ldw	r6,0(r20)
    3530:	a1c00117 	ldw	r7,4(r20)
    3534:	8c400044 	addi	r17,r17,1
    3538:	000bd980 	call	bd98 <__muldf3>
    353c:	a5000204 	addi	r20,r20,8
    3540:	b83ff51e 	bne	r23,zero,3518 <_dtoa_r+0x408>
    3544:	1017883a 	mov	r11,r2
    3548:	1815883a 	mov	r10,r3
    354c:	d9000e17 	ldw	r4,56(sp)
    3550:	a80b883a 	mov	r5,r21
    3554:	580d883a 	mov	r6,r11
    3558:	500f883a 	mov	r7,r10
    355c:	000b2880 	call	b288 <__divdf3>
    3560:	1029883a 	mov	r20,r2
    3564:	182b883a 	mov	r21,r3
    3568:	d9800c17 	ldw	r6,48(sp)
    356c:	30000626 	beq	r6,zero,3588 <_dtoa_r+0x478>
    3570:	a009883a 	mov	r4,r20
    3574:	a80b883a 	mov	r5,r21
    3578:	000d883a 	mov	r6,zero
    357c:	01cffc34 	movhi	r7,16368
    3580:	000bcb80 	call	bcb8 <__ledf2>
    3584:	10043216 	blt	r2,zero,4650 <_dtoa_r+0x1540>
    3588:	8809883a 	mov	r4,r17
    358c:	000ce140 	call	ce14 <__floatsidf>
    3590:	1009883a 	mov	r4,r2
    3594:	180b883a 	mov	r5,r3
    3598:	a00d883a 	mov	r6,r20
    359c:	a80f883a 	mov	r7,r21
    35a0:	000bd980 	call	bd98 <__muldf3>
    35a4:	000d883a 	mov	r6,zero
    35a8:	1009883a 	mov	r4,r2
    35ac:	180b883a 	mov	r5,r3
    35b0:	01d00734 	movhi	r7,16412
    35b4:	000a9ec0 	call	a9ec <__adddf3>
    35b8:	1023883a 	mov	r17,r2
    35bc:	d9800617 	ldw	r6,24(sp)
    35c0:	00bf3034 	movhi	r2,64704
    35c4:	1885883a 	add	r2,r3,r2
    35c8:	d8800e15 	stw	r2,56(sp)
    35cc:	30032e26 	beq	r6,zero,4288 <_dtoa_r+0x1178>
    35d0:	d8c00517 	ldw	r3,20(sp)
    35d4:	da800617 	ldw	r10,24(sp)
    35d8:	d8c01215 	stw	r3,72(sp)
    35dc:	d9000b17 	ldw	r4,44(sp)
    35e0:	2003b026 	beq	r4,zero,44a4 <_dtoa_r+0x1394>
    35e4:	50bfffc4 	addi	r2,r10,-1
    35e8:	100490fa 	slli	r2,r2,3
    35ec:	00c00074 	movhi	r3,1
    35f0:	18fe9104 	addi	r3,r3,-1468
    35f4:	1885883a 	add	r2,r3,r2
    35f8:	11800017 	ldw	r6,0(r2)
    35fc:	11c00117 	ldw	r7,4(r2)
    3600:	d8800717 	ldw	r2,28(sp)
    3604:	0009883a 	mov	r4,zero
    3608:	014ff834 	movhi	r5,16352
    360c:	da801615 	stw	r10,88(sp)
    3610:	15c00044 	addi	r23,r2,1
    3614:	000b2880 	call	b288 <__divdf3>
    3618:	d9c00e17 	ldw	r7,56(sp)
    361c:	880d883a 	mov	r6,r17
    3620:	1009883a 	mov	r4,r2
    3624:	180b883a 	mov	r5,r3
    3628:	000c4bc0 	call	c4bc <__subdf3>
    362c:	a80b883a 	mov	r5,r21
    3630:	a009883a 	mov	r4,r20
    3634:	d8c01015 	stw	r3,64(sp)
    3638:	d8800e15 	stw	r2,56(sp)
    363c:	000cd8c0 	call	cd8c <__fixdfsi>
    3640:	1009883a 	mov	r4,r2
    3644:	d8801715 	stw	r2,92(sp)
    3648:	000ce140 	call	ce14 <__floatsidf>
    364c:	a009883a 	mov	r4,r20
    3650:	a80b883a 	mov	r5,r21
    3654:	100d883a 	mov	r6,r2
    3658:	180f883a 	mov	r7,r3
    365c:	000c4bc0 	call	c4bc <__subdf3>
    3660:	da001717 	ldw	r8,92(sp)
    3664:	1829883a 	mov	r20,r3
    3668:	d8c00717 	ldw	r3,28(sp)
    366c:	d9000e17 	ldw	r4,56(sp)
    3670:	d9401017 	ldw	r5,64(sp)
    3674:	42000c04 	addi	r8,r8,48
    3678:	1023883a 	mov	r17,r2
    367c:	1a000005 	stb	r8,0(r3)
    3680:	880d883a 	mov	r6,r17
    3684:	a00f883a 	mov	r7,r20
    3688:	402b883a 	mov	r21,r8
    368c:	000bbd80 	call	bbd8 <__gedf2>
    3690:	00844516 	blt	zero,r2,47a8 <_dtoa_r+0x1698>
    3694:	0009883a 	mov	r4,zero
    3698:	014ffc34 	movhi	r5,16368
    369c:	880d883a 	mov	r6,r17
    36a0:	a00f883a 	mov	r7,r20
    36a4:	000c4bc0 	call	c4bc <__subdf3>
    36a8:	d9000e17 	ldw	r4,56(sp)
    36ac:	d9401017 	ldw	r5,64(sp)
    36b0:	100d883a 	mov	r6,r2
    36b4:	180f883a 	mov	r7,r3
    36b8:	000bbd80 	call	bbd8 <__gedf2>
    36bc:	da801617 	ldw	r10,88(sp)
    36c0:	00843616 	blt	zero,r2,479c <_dtoa_r+0x168c>
    36c4:	00800044 	movi	r2,1
    36c8:	12806e0e 	bge	r2,r10,3884 <_dtoa_r+0x774>
    36cc:	d9000717 	ldw	r4,28(sp)
    36d0:	dd801315 	stw	r22,76(sp)
    36d4:	dc001115 	stw	r16,68(sp)
    36d8:	2295883a 	add	r10,r4,r10
    36dc:	dcc01415 	stw	r19,80(sp)
    36e0:	502d883a 	mov	r22,r10
    36e4:	dcc01017 	ldw	r19,64(sp)
    36e8:	b821883a 	mov	r16,r23
    36ec:	dc801015 	stw	r18,64(sp)
    36f0:	dc800e17 	ldw	r18,56(sp)
    36f4:	00000906 	br	371c <_dtoa_r+0x60c>
    36f8:	000c4bc0 	call	c4bc <__subdf3>
    36fc:	1009883a 	mov	r4,r2
    3700:	180b883a 	mov	r5,r3
    3704:	900d883a 	mov	r6,r18
    3708:	980f883a 	mov	r7,r19
    370c:	000bcb80 	call	bcb8 <__ledf2>
    3710:	10040e16 	blt	r2,zero,474c <_dtoa_r+0x163c>
    3714:	b821883a 	mov	r16,r23
    3718:	bd841026 	beq	r23,r22,475c <_dtoa_r+0x164c>
    371c:	9009883a 	mov	r4,r18
    3720:	980b883a 	mov	r5,r19
    3724:	000d883a 	mov	r6,zero
    3728:	01d00934 	movhi	r7,16420
    372c:	000bd980 	call	bd98 <__muldf3>
    3730:	000d883a 	mov	r6,zero
    3734:	01d00934 	movhi	r7,16420
    3738:	8809883a 	mov	r4,r17
    373c:	a00b883a 	mov	r5,r20
    3740:	1025883a 	mov	r18,r2
    3744:	1827883a 	mov	r19,r3
    3748:	000bd980 	call	bd98 <__muldf3>
    374c:	180b883a 	mov	r5,r3
    3750:	1009883a 	mov	r4,r2
    3754:	1823883a 	mov	r17,r3
    3758:	1029883a 	mov	r20,r2
    375c:	000cd8c0 	call	cd8c <__fixdfsi>
    3760:	1009883a 	mov	r4,r2
    3764:	102b883a 	mov	r21,r2
    3768:	000ce140 	call	ce14 <__floatsidf>
    376c:	a009883a 	mov	r4,r20
    3770:	880b883a 	mov	r5,r17
    3774:	100d883a 	mov	r6,r2
    3778:	180f883a 	mov	r7,r3
    377c:	000c4bc0 	call	c4bc <__subdf3>
    3780:	ad400c04 	addi	r21,r21,48
    3784:	1009883a 	mov	r4,r2
    3788:	180b883a 	mov	r5,r3
    378c:	900d883a 	mov	r6,r18
    3790:	980f883a 	mov	r7,r19
    3794:	85400005 	stb	r21,0(r16)
    3798:	1023883a 	mov	r17,r2
    379c:	1829883a 	mov	r20,r3
    37a0:	000bcb80 	call	bcb8 <__ledf2>
    37a4:	bdc00044 	addi	r23,r23,1
    37a8:	0009883a 	mov	r4,zero
    37ac:	014ffc34 	movhi	r5,16368
    37b0:	880d883a 	mov	r6,r17
    37b4:	a00f883a 	mov	r7,r20
    37b8:	103fcf0e 	bge	r2,zero,36f8 <_dtoa_r+0x5e8>
    37bc:	d9801217 	ldw	r6,72(sp)
    37c0:	dc001117 	ldw	r16,68(sp)
    37c4:	d9800515 	stw	r6,20(sp)
    37c8:	8009883a 	mov	r4,r16
    37cc:	e00b883a 	mov	r5,fp
    37d0:	00061e00 	call	61e0 <_Bfree>
    37d4:	d8c00517 	ldw	r3,20(sp)
    37d8:	d9002317 	ldw	r4,140(sp)
    37dc:	d9802517 	ldw	r6,148(sp)
    37e0:	b8000005 	stb	zero,0(r23)
    37e4:	18800044 	addi	r2,r3,1
    37e8:	20800015 	stw	r2,0(r4)
    37ec:	30027226 	beq	r6,zero,41b8 <_dtoa_r+0x10a8>
    37f0:	35c00015 	stw	r23,0(r6)
    37f4:	d8800717 	ldw	r2,28(sp)
    37f8:	003e7406 	br	31cc <_dtoa_r+0xbc>
    37fc:	00800434 	movhi	r2,16
    3800:	10bfffc4 	addi	r2,r2,-1
    3804:	a8aa703a 	and	r21,r21,r2
    3808:	a83e801e 	bne	r21,zero,320c <_dtoa_r+0xfc>
    380c:	00800074 	movhi	r2,1
    3810:	10be7204 	addi	r2,r2,-1592
    3814:	003e7f06 	br	3214 <_dtoa_r+0x104>
    3818:	10c00204 	addi	r3,r2,8
    381c:	003e8206 	br	3228 <_dtoa_r+0x118>
    3820:	01400434 	movhi	r5,16
    3824:	297fffc4 	addi	r5,r5,-1
    3828:	994a703a 	and	r5,r19,r5
    382c:	9009883a 	mov	r4,r18
    3830:	8c7f0044 	addi	r17,r17,-1023
    3834:	294ffc34 	orhi	r5,r5,16368
    3838:	dd000217 	ldw	r20,8(sp)
    383c:	d8000f15 	stw	zero,60(sp)
    3840:	003e9f06 	br	32c0 <_dtoa_r+0x1b0>
    3844:	00800074 	movhi	r2,1
    3848:	10be6904 	addi	r2,r2,-1628
    384c:	003e5f06 	br	31cc <_dtoa_r+0xbc>
    3850:	80001115 	stw	zero,68(r16)
    3854:	8009883a 	mov	r4,r16
    3858:	000b883a 	mov	r5,zero
    385c:	00061380 	call	6138 <_Balloc>
    3860:	01bfffc4 	movi	r6,-1
    3864:	d8800715 	stw	r2,28(sp)
    3868:	80801015 	stw	r2,64(r16)
    386c:	00800044 	movi	r2,1
    3870:	d9800615 	stw	r6,24(sp)
    3874:	d8800b15 	stw	r2,44(sp)
    3878:	d8002215 	stw	zero,136(sp)
    387c:	d9800d15 	stw	r6,52(sp)
    3880:	d8000315 	stw	zero,12(sp)
    3884:	d8800117 	ldw	r2,4(sp)
    3888:	10008e16 	blt	r2,zero,3ac4 <_dtoa_r+0x9b4>
    388c:	d9000517 	ldw	r4,20(sp)
    3890:	00c00384 	movi	r3,14
    3894:	19008b16 	blt	r3,r4,3ac4 <_dtoa_r+0x9b4>
    3898:	200490fa 	slli	r2,r4,3
    389c:	00c00074 	movhi	r3,1
    38a0:	d9802217 	ldw	r6,136(sp)
    38a4:	18fe9104 	addi	r3,r3,-1468
    38a8:	1885883a 	add	r2,r3,r2
    38ac:	14400017 	ldw	r17,0(r2)
    38b0:	15000117 	ldw	r20,4(r2)
    38b4:	3001c716 	blt	r6,zero,3fd4 <_dtoa_r+0xec4>
    38b8:	880d883a 	mov	r6,r17
    38bc:	a00f883a 	mov	r7,r20
    38c0:	9009883a 	mov	r4,r18
    38c4:	980b883a 	mov	r5,r19
    38c8:	000b2880 	call	b288 <__divdf3>
    38cc:	180b883a 	mov	r5,r3
    38d0:	1009883a 	mov	r4,r2
    38d4:	000cd8c0 	call	cd8c <__fixdfsi>
    38d8:	1009883a 	mov	r4,r2
    38dc:	102d883a 	mov	r22,r2
    38e0:	000ce140 	call	ce14 <__floatsidf>
    38e4:	1009883a 	mov	r4,r2
    38e8:	180b883a 	mov	r5,r3
    38ec:	880d883a 	mov	r6,r17
    38f0:	a00f883a 	mov	r7,r20
    38f4:	000bd980 	call	bd98 <__muldf3>
    38f8:	9009883a 	mov	r4,r18
    38fc:	980b883a 	mov	r5,r19
    3900:	100d883a 	mov	r6,r2
    3904:	180f883a 	mov	r7,r3
    3908:	000c4bc0 	call	c4bc <__subdf3>
    390c:	d9000717 	ldw	r4,28(sp)
    3910:	d9800617 	ldw	r6,24(sp)
    3914:	180b883a 	mov	r5,r3
    3918:	b0c00c04 	addi	r3,r22,48
    391c:	20c00005 	stb	r3,0(r4)
    3920:	25c00044 	addi	r23,r4,1
    3924:	01000044 	movi	r4,1
    3928:	1011883a 	mov	r8,r2
    392c:	2807883a 	mov	r3,r5
    3930:	31003d26 	beq	r6,r4,3a28 <_dtoa_r+0x918>
    3934:	000d883a 	mov	r6,zero
    3938:	01d00934 	movhi	r7,16420
    393c:	1009883a 	mov	r4,r2
    3940:	000bd980 	call	bd98 <__muldf3>
    3944:	1009883a 	mov	r4,r2
    3948:	180b883a 	mov	r5,r3
    394c:	000d883a 	mov	r6,zero
    3950:	000f883a 	mov	r7,zero
    3954:	1027883a 	mov	r19,r2
    3958:	182b883a 	mov	r21,r3
    395c:	000bb540 	call	bb54 <__eqdf2>
    3960:	103f9926 	beq	r2,zero,37c8 <_dtoa_r+0x6b8>
    3964:	d8c00617 	ldw	r3,24(sp)
    3968:	d9000717 	ldw	r4,28(sp)
    396c:	b825883a 	mov	r18,r23
    3970:	18bfffc4 	addi	r2,r3,-1
    3974:	20ad883a 	add	r22,r4,r2
    3978:	dc000315 	stw	r16,12(sp)
    397c:	00000a06 	br	39a8 <_dtoa_r+0x898>
    3980:	000bd980 	call	bd98 <__muldf3>
    3984:	1009883a 	mov	r4,r2
    3988:	180b883a 	mov	r5,r3
    398c:	000d883a 	mov	r6,zero
    3990:	000f883a 	mov	r7,zero
    3994:	1027883a 	mov	r19,r2
    3998:	182b883a 	mov	r21,r3
    399c:	b825883a 	mov	r18,r23
    39a0:	000bb540 	call	bb54 <__eqdf2>
    39a4:	10022626 	beq	r2,zero,4240 <_dtoa_r+0x1130>
    39a8:	880d883a 	mov	r6,r17
    39ac:	a00f883a 	mov	r7,r20
    39b0:	9809883a 	mov	r4,r19
    39b4:	a80b883a 	mov	r5,r21
    39b8:	000b2880 	call	b288 <__divdf3>
    39bc:	180b883a 	mov	r5,r3
    39c0:	1009883a 	mov	r4,r2
    39c4:	000cd8c0 	call	cd8c <__fixdfsi>
    39c8:	1009883a 	mov	r4,r2
    39cc:	1021883a 	mov	r16,r2
    39d0:	000ce140 	call	ce14 <__floatsidf>
    39d4:	1009883a 	mov	r4,r2
    39d8:	180b883a 	mov	r5,r3
    39dc:	880d883a 	mov	r6,r17
    39e0:	a00f883a 	mov	r7,r20
    39e4:	000bd980 	call	bd98 <__muldf3>
    39e8:	9809883a 	mov	r4,r19
    39ec:	a80b883a 	mov	r5,r21
    39f0:	100d883a 	mov	r6,r2
    39f4:	180f883a 	mov	r7,r3
    39f8:	000c4bc0 	call	c4bc <__subdf3>
    39fc:	82000c04 	addi	r8,r16,48
    3a00:	92000005 	stb	r8,0(r18)
    3a04:	1009883a 	mov	r4,r2
    3a08:	180b883a 	mov	r5,r3
    3a0c:	000d883a 	mov	r6,zero
    3a10:	01d00934 	movhi	r7,16420
    3a14:	1011883a 	mov	r8,r2
    3a18:	bdc00044 	addi	r23,r23,1
    3a1c:	95bfd81e 	bne	r18,r22,3980 <_dtoa_r+0x870>
    3a20:	802d883a 	mov	r22,r16
    3a24:	dc000317 	ldw	r16,12(sp)
    3a28:	4009883a 	mov	r4,r8
    3a2c:	180b883a 	mov	r5,r3
    3a30:	400d883a 	mov	r6,r8
    3a34:	180f883a 	mov	r7,r3
    3a38:	000a9ec0 	call	a9ec <__adddf3>
    3a3c:	8809883a 	mov	r4,r17
    3a40:	a00b883a 	mov	r5,r20
    3a44:	100d883a 	mov	r6,r2
    3a48:	180f883a 	mov	r7,r3
    3a4c:	1027883a 	mov	r19,r2
    3a50:	1825883a 	mov	r18,r3
    3a54:	000bcb80 	call	bcb8 <__ledf2>
    3a58:	10000816 	blt	r2,zero,3a7c <_dtoa_r+0x96c>
    3a5c:	8809883a 	mov	r4,r17
    3a60:	a00b883a 	mov	r5,r20
    3a64:	980d883a 	mov	r6,r19
    3a68:	900f883a 	mov	r7,r18
    3a6c:	000bb540 	call	bb54 <__eqdf2>
    3a70:	103f551e 	bne	r2,zero,37c8 <_dtoa_r+0x6b8>
    3a74:	b580004c 	andi	r22,r22,1
    3a78:	b03f5326 	beq	r22,zero,37c8 <_dtoa_r+0x6b8>
    3a7c:	bd7fffc3 	ldbu	r21,-1(r23)
    3a80:	b8bfffc4 	addi	r2,r23,-1
    3a84:	1007883a 	mov	r3,r2
    3a88:	01400e44 	movi	r5,57
    3a8c:	d9800717 	ldw	r6,28(sp)
    3a90:	00000506 	br	3aa8 <_dtoa_r+0x998>
    3a94:	18ffffc4 	addi	r3,r3,-1
    3a98:	30825e26 	beq	r6,r2,4414 <_dtoa_r+0x1304>
    3a9c:	1d400003 	ldbu	r21,0(r3)
    3aa0:	102f883a 	mov	r23,r2
    3aa4:	10bfffc4 	addi	r2,r2,-1
    3aa8:	a9003fcc 	andi	r4,r21,255
    3aac:	2100201c 	xori	r4,r4,128
    3ab0:	213fe004 	addi	r4,r4,-128
    3ab4:	217ff726 	beq	r4,r5,3a94 <_dtoa_r+0x984>
    3ab8:	aa000044 	addi	r8,r21,1
    3abc:	12000005 	stb	r8,0(r2)
    3ac0:	003f4106 	br	37c8 <_dtoa_r+0x6b8>
    3ac4:	d8c00b17 	ldw	r3,44(sp)
    3ac8:	18006726 	beq	r3,zero,3c68 <_dtoa_r+0xb58>
    3acc:	d9000317 	ldw	r4,12(sp)
    3ad0:	00c00044 	movi	r3,1
    3ad4:	19016a0e 	bge	r3,r4,4080 <_dtoa_r+0xf70>
    3ad8:	d8800617 	ldw	r2,24(sp)
    3adc:	d8c00917 	ldw	r3,36(sp)
    3ae0:	157fffc4 	addi	r21,r2,-1
    3ae4:	1d420716 	blt	r3,r21,4304 <_dtoa_r+0x11f4>
    3ae8:	1d6bc83a 	sub	r21,r3,r21
    3aec:	d8800617 	ldw	r2,24(sp)
    3af0:	1002c716 	blt	r2,zero,4610 <_dtoa_r+0x1500>
    3af4:	dd000817 	ldw	r20,32(sp)
    3af8:	d8800617 	ldw	r2,24(sp)
    3afc:	d9800817 	ldw	r6,32(sp)
    3b00:	8009883a 	mov	r4,r16
    3b04:	01400044 	movi	r5,1
    3b08:	308d883a 	add	r6,r6,r2
    3b0c:	d9800815 	stw	r6,32(sp)
    3b10:	b0ad883a 	add	r22,r22,r2
    3b14:	00065380 	call	6538 <__i2b>
    3b18:	1023883a 	mov	r17,r2
    3b1c:	a0000826 	beq	r20,zero,3b40 <_dtoa_r+0xa30>
    3b20:	0580070e 	bge	zero,r22,3b40 <_dtoa_r+0xa30>
    3b24:	b005883a 	mov	r2,r22
    3b28:	a5812016 	blt	r20,r22,3fac <_dtoa_r+0xe9c>
    3b2c:	d8c00817 	ldw	r3,32(sp)
    3b30:	a0a9c83a 	sub	r20,r20,r2
    3b34:	b0adc83a 	sub	r22,r22,r2
    3b38:	1887c83a 	sub	r3,r3,r2
    3b3c:	d8c00815 	stw	r3,32(sp)
    3b40:	d9000917 	ldw	r4,36(sp)
    3b44:	0100140e 	bge	zero,r4,3b98 <_dtoa_r+0xa88>
    3b48:	d9800b17 	ldw	r6,44(sp)
    3b4c:	3001e526 	beq	r6,zero,42e4 <_dtoa_r+0x11d4>
    3b50:	05400e0e 	bge	zero,r21,3b8c <_dtoa_r+0xa7c>
    3b54:	880b883a 	mov	r5,r17
    3b58:	8009883a 	mov	r4,r16
    3b5c:	a80d883a 	mov	r6,r21
    3b60:	00067700 	call	6770 <__pow5mult>
    3b64:	e00d883a 	mov	r6,fp
    3b68:	8009883a 	mov	r4,r16
    3b6c:	100b883a 	mov	r5,r2
    3b70:	1023883a 	mov	r17,r2
    3b74:	00065740 	call	6574 <__multiply>
    3b78:	102f883a 	mov	r23,r2
    3b7c:	e00b883a 	mov	r5,fp
    3b80:	8009883a 	mov	r4,r16
    3b84:	00061e00 	call	61e0 <_Bfree>
    3b88:	b839883a 	mov	fp,r23
    3b8c:	d8800917 	ldw	r2,36(sp)
    3b90:	154dc83a 	sub	r6,r2,r21
    3b94:	3001281e 	bne	r6,zero,4038 <_dtoa_r+0xf28>
    3b98:	05c00044 	movi	r23,1
    3b9c:	8009883a 	mov	r4,r16
    3ba0:	b80b883a 	mov	r5,r23
    3ba4:	00065380 	call	6538 <__i2b>
    3ba8:	d8c00a17 	ldw	r3,40(sp)
    3bac:	102b883a 	mov	r21,r2
    3bb0:	00c0310e 	bge	zero,r3,3c78 <_dtoa_r+0xb68>
    3bb4:	8009883a 	mov	r4,r16
    3bb8:	100b883a 	mov	r5,r2
    3bbc:	180d883a 	mov	r6,r3
    3bc0:	00067700 	call	6770 <__pow5mult>
    3bc4:	d9000317 	ldw	r4,12(sp)
    3bc8:	102b883a 	mov	r21,r2
    3bcc:	b9011f0e 	bge	r23,r4,404c <_dtoa_r+0xf3c>
    3bd0:	0027883a 	mov	r19,zero
    3bd4:	a8800417 	ldw	r2,16(r21)
    3bd8:	10800104 	addi	r2,r2,4
    3bdc:	1085883a 	add	r2,r2,r2
    3be0:	1085883a 	add	r2,r2,r2
    3be4:	a885883a 	add	r2,r21,r2
    3be8:	11000017 	ldw	r4,0(r2)
    3bec:	00064200 	call	6420 <__hi0bits>
    3bf0:	00c00804 	movi	r3,32
    3bf4:	1885c83a 	sub	r2,r3,r2
    3bf8:	00002506 	br	3c90 <_dtoa_r+0xb80>
    3bfc:	01800044 	movi	r6,1
    3c00:	d9800c15 	stw	r6,48(sp)
    3c04:	003dec06 	br	33b8 <_dtoa_r+0x2a8>
    3c08:	d8c00817 	ldw	r3,32(sp)
    3c0c:	d9000517 	ldw	r4,20(sp)
    3c10:	d8000a15 	stw	zero,40(sp)
    3c14:	1907c83a 	sub	r3,r3,r4
    3c18:	010dc83a 	sub	r6,zero,r4
    3c1c:	d8c00815 	stw	r3,32(sp)
    3c20:	d9800915 	stw	r6,36(sp)
    3c24:	003ded06 	br	33dc <_dtoa_r+0x2cc>
    3c28:	05adc83a 	sub	r22,zero,r22
    3c2c:	dd800815 	stw	r22,32(sp)
    3c30:	002d883a 	mov	r22,zero
    3c34:	003de406 	br	33c8 <_dtoa_r+0x2b8>
    3c38:	d9000517 	ldw	r4,20(sp)
    3c3c:	000ce140 	call	ce14 <__floatsidf>
    3c40:	1009883a 	mov	r4,r2
    3c44:	180b883a 	mov	r5,r3
    3c48:	b00d883a 	mov	r6,r22
    3c4c:	a80f883a 	mov	r7,r21
    3c50:	000bb540 	call	bb54 <__eqdf2>
    3c54:	103dc726 	beq	r2,zero,3374 <_dtoa_r+0x264>
    3c58:	d8800517 	ldw	r2,20(sp)
    3c5c:	10bfffc4 	addi	r2,r2,-1
    3c60:	d8800515 	stw	r2,20(sp)
    3c64:	003dc306 	br	3374 <_dtoa_r+0x264>
    3c68:	dd400917 	ldw	r21,36(sp)
    3c6c:	dd000817 	ldw	r20,32(sp)
    3c70:	0023883a 	mov	r17,zero
    3c74:	003fa906 	br	3b1c <_dtoa_r+0xa0c>
    3c78:	d9800317 	ldw	r6,12(sp)
    3c7c:	b981670e 	bge	r23,r6,421c <_dtoa_r+0x110c>
    3c80:	0027883a 	mov	r19,zero
    3c84:	d8c00a17 	ldw	r3,40(sp)
    3c88:	183fd21e 	bne	r3,zero,3bd4 <_dtoa_r+0xac4>
    3c8c:	00800044 	movi	r2,1
    3c90:	1585883a 	add	r2,r2,r22
    3c94:	108007cc 	andi	r2,r2,31
    3c98:	10005f26 	beq	r2,zero,3e18 <_dtoa_r+0xd08>
    3c9c:	00c00804 	movi	r3,32
    3ca0:	1887c83a 	sub	r3,r3,r2
    3ca4:	01000104 	movi	r4,4
    3ca8:	20c2dd0e 	bge	r4,r3,4820 <_dtoa_r+0x1710>
    3cac:	d9000817 	ldw	r4,32(sp)
    3cb0:	00c00704 	movi	r3,28
    3cb4:	1885c83a 	sub	r2,r3,r2
    3cb8:	2089883a 	add	r4,r4,r2
    3cbc:	d9000815 	stw	r4,32(sp)
    3cc0:	a0a9883a 	add	r20,r20,r2
    3cc4:	b0ad883a 	add	r22,r22,r2
    3cc8:	d8800817 	ldw	r2,32(sp)
    3ccc:	0080050e 	bge	zero,r2,3ce4 <_dtoa_r+0xbd4>
    3cd0:	e00b883a 	mov	r5,fp
    3cd4:	8009883a 	mov	r4,r16
    3cd8:	100d883a 	mov	r6,r2
    3cdc:	00068b00 	call	68b0 <__lshift>
    3ce0:	1039883a 	mov	fp,r2
    3ce4:	0580050e 	bge	zero,r22,3cfc <_dtoa_r+0xbec>
    3ce8:	a80b883a 	mov	r5,r21
    3cec:	8009883a 	mov	r4,r16
    3cf0:	b00d883a 	mov	r6,r22
    3cf4:	00068b00 	call	68b0 <__lshift>
    3cf8:	102b883a 	mov	r21,r2
    3cfc:	d8c00c17 	ldw	r3,48(sp)
    3d00:	1801161e 	bne	r3,zero,415c <_dtoa_r+0x104c>
    3d04:	d8c00617 	ldw	r3,24(sp)
    3d08:	00c12d0e 	bge	zero,r3,41c0 <_dtoa_r+0x10b0>
    3d0c:	d8c00b17 	ldw	r3,44(sp)
    3d10:	1800571e 	bne	r3,zero,3e70 <_dtoa_r+0xd60>
    3d14:	dc800717 	ldw	r18,28(sp)
    3d18:	dcc00617 	ldw	r19,24(sp)
    3d1c:	9029883a 	mov	r20,r18
    3d20:	00000206 	br	3d2c <_dtoa_r+0xc1c>
    3d24:	00062080 	call	6208 <__multadd>
    3d28:	1039883a 	mov	fp,r2
    3d2c:	e009883a 	mov	r4,fp
    3d30:	a80b883a 	mov	r5,r21
    3d34:	0002f100 	call	2f10 <quorem>
    3d38:	10800c04 	addi	r2,r2,48
    3d3c:	90800005 	stb	r2,0(r18)
    3d40:	94800044 	addi	r18,r18,1
    3d44:	9507c83a 	sub	r3,r18,r20
    3d48:	8009883a 	mov	r4,r16
    3d4c:	e00b883a 	mov	r5,fp
    3d50:	01800284 	movi	r6,10
    3d54:	000f883a 	mov	r7,zero
    3d58:	1cfff216 	blt	r3,r19,3d24 <_dtoa_r+0xc14>
    3d5c:	1011883a 	mov	r8,r2
    3d60:	d8800617 	ldw	r2,24(sp)
    3d64:	00822e0e 	bge	zero,r2,4620 <_dtoa_r+0x1510>
    3d68:	d9000717 	ldw	r4,28(sp)
    3d6c:	0025883a 	mov	r18,zero
    3d70:	20af883a 	add	r23,r4,r2
    3d74:	e00b883a 	mov	r5,fp
    3d78:	01800044 	movi	r6,1
    3d7c:	8009883a 	mov	r4,r16
    3d80:	da001715 	stw	r8,92(sp)
    3d84:	00068b00 	call	68b0 <__lshift>
    3d88:	1009883a 	mov	r4,r2
    3d8c:	a80b883a 	mov	r5,r21
    3d90:	1039883a 	mov	fp,r2
    3d94:	00069f80 	call	69f8 <__mcmp>
    3d98:	da001717 	ldw	r8,92(sp)
    3d9c:	00816e0e 	bge	zero,r2,4358 <_dtoa_r+0x1248>
    3da0:	b93fffc3 	ldbu	r4,-1(r23)
    3da4:	b8bfffc4 	addi	r2,r23,-1
    3da8:	1007883a 	mov	r3,r2
    3dac:	01800e44 	movi	r6,57
    3db0:	d9c00717 	ldw	r7,28(sp)
    3db4:	00000506 	br	3dcc <_dtoa_r+0xcbc>
    3db8:	18ffffc4 	addi	r3,r3,-1
    3dbc:	38811926 	beq	r7,r2,4224 <_dtoa_r+0x1114>
    3dc0:	19000003 	ldbu	r4,0(r3)
    3dc4:	102f883a 	mov	r23,r2
    3dc8:	10bfffc4 	addi	r2,r2,-1
    3dcc:	21403fcc 	andi	r5,r4,255
    3dd0:	2940201c 	xori	r5,r5,128
    3dd4:	297fe004 	addi	r5,r5,-128
    3dd8:	29bff726 	beq	r5,r6,3db8 <_dtoa_r+0xca8>
    3ddc:	21000044 	addi	r4,r4,1
    3de0:	11000005 	stb	r4,0(r2)
    3de4:	8009883a 	mov	r4,r16
    3de8:	a80b883a 	mov	r5,r21
    3dec:	00061e00 	call	61e0 <_Bfree>
    3df0:	883e7526 	beq	r17,zero,37c8 <_dtoa_r+0x6b8>
    3df4:	90000426 	beq	r18,zero,3e08 <_dtoa_r+0xcf8>
    3df8:	94400326 	beq	r18,r17,3e08 <_dtoa_r+0xcf8>
    3dfc:	8009883a 	mov	r4,r16
    3e00:	900b883a 	mov	r5,r18
    3e04:	00061e00 	call	61e0 <_Bfree>
    3e08:	8009883a 	mov	r4,r16
    3e0c:	880b883a 	mov	r5,r17
    3e10:	00061e00 	call	61e0 <_Bfree>
    3e14:	003e6c06 	br	37c8 <_dtoa_r+0x6b8>
    3e18:	00800704 	movi	r2,28
    3e1c:	d9800817 	ldw	r6,32(sp)
    3e20:	a0a9883a 	add	r20,r20,r2
    3e24:	b0ad883a 	add	r22,r22,r2
    3e28:	308d883a 	add	r6,r6,r2
    3e2c:	d9800815 	stw	r6,32(sp)
    3e30:	003fa506 	br	3cc8 <_dtoa_r+0xbb8>
    3e34:	013efb84 	movi	r4,-1042
    3e38:	246bc83a 	sub	r21,r4,r17
    3e3c:	9548983a 	sll	r4,r18,r21
    3e40:	003d1806 	br	32a4 <_dtoa_r+0x194>
    3e44:	d8000c15 	stw	zero,48(sp)
    3e48:	003d5b06 	br	33b8 <_dtoa_r+0x2a8>
    3e4c:	880b883a 	mov	r5,r17
    3e50:	8009883a 	mov	r4,r16
    3e54:	01800284 	movi	r6,10
    3e58:	000f883a 	mov	r7,zero
    3e5c:	00062080 	call	6208 <__multadd>
    3e60:	1023883a 	mov	r17,r2
    3e64:	d8800d17 	ldw	r2,52(sp)
    3e68:	0082550e 	bge	zero,r2,47c0 <_dtoa_r+0x16b0>
    3e6c:	d8800615 	stw	r2,24(sp)
    3e70:	0500050e 	bge	zero,r20,3e88 <_dtoa_r+0xd78>
    3e74:	880b883a 	mov	r5,r17
    3e78:	8009883a 	mov	r4,r16
    3e7c:	a00d883a 	mov	r6,r20
    3e80:	00068b00 	call	68b0 <__lshift>
    3e84:	1023883a 	mov	r17,r2
    3e88:	98016a1e 	bne	r19,zero,4434 <_dtoa_r+0x1324>
    3e8c:	8829883a 	mov	r20,r17
    3e90:	d9000617 	ldw	r4,24(sp)
    3e94:	dcc00717 	ldw	r19,28(sp)
    3e98:	9480004c 	andi	r18,r18,1
    3e9c:	20bfffc4 	addi	r2,r4,-1
    3ea0:	9885883a 	add	r2,r19,r2
    3ea4:	d8800415 	stw	r2,16(sp)
    3ea8:	dc800615 	stw	r18,24(sp)
    3eac:	e009883a 	mov	r4,fp
    3eb0:	a80b883a 	mov	r5,r21
    3eb4:	0002f100 	call	2f10 <quorem>
    3eb8:	e009883a 	mov	r4,fp
    3ebc:	880b883a 	mov	r5,r17
    3ec0:	102f883a 	mov	r23,r2
    3ec4:	00069f80 	call	69f8 <__mcmp>
    3ec8:	8009883a 	mov	r4,r16
    3ecc:	a80b883a 	mov	r5,r21
    3ed0:	a00d883a 	mov	r6,r20
    3ed4:	102d883a 	mov	r22,r2
    3ed8:	0006a580 	call	6a58 <__mdiff>
    3edc:	1007883a 	mov	r3,r2
    3ee0:	10800317 	ldw	r2,12(r2)
    3ee4:	bc800c04 	addi	r18,r23,48
    3ee8:	1000971e 	bne	r2,zero,4148 <_dtoa_r+0x1038>
    3eec:	180b883a 	mov	r5,r3
    3ef0:	e009883a 	mov	r4,fp
    3ef4:	d8c01515 	stw	r3,84(sp)
    3ef8:	00069f80 	call	69f8 <__mcmp>
    3efc:	d8c01517 	ldw	r3,84(sp)
    3f00:	8009883a 	mov	r4,r16
    3f04:	d8801515 	stw	r2,84(sp)
    3f08:	180b883a 	mov	r5,r3
    3f0c:	00061e00 	call	61e0 <_Bfree>
    3f10:	d8801517 	ldw	r2,84(sp)
    3f14:	1000041e 	bne	r2,zero,3f28 <_dtoa_r+0xe18>
    3f18:	d9800317 	ldw	r6,12(sp)
    3f1c:	3000021e 	bne	r6,zero,3f28 <_dtoa_r+0xe18>
    3f20:	d8c00617 	ldw	r3,24(sp)
    3f24:	18007626 	beq	r3,zero,4100 <_dtoa_r+0xff0>
    3f28:	b0005b16 	blt	r22,zero,4098 <_dtoa_r+0xf88>
    3f2c:	b000041e 	bne	r22,zero,3f40 <_dtoa_r+0xe30>
    3f30:	d9000317 	ldw	r4,12(sp)
    3f34:	2000021e 	bne	r4,zero,3f40 <_dtoa_r+0xe30>
    3f38:	d8c00617 	ldw	r3,24(sp)
    3f3c:	18005626 	beq	r3,zero,4098 <_dtoa_r+0xf88>
    3f40:	00814d16 	blt	zero,r2,4478 <_dtoa_r+0x1368>
    3f44:	d8c00417 	ldw	r3,16(sp)
    3f48:	9d800044 	addi	r22,r19,1
    3f4c:	9c800005 	stb	r18,0(r19)
    3f50:	b02f883a 	mov	r23,r22
    3f54:	98c14c26 	beq	r19,r3,4488 <_dtoa_r+0x1378>
    3f58:	e00b883a 	mov	r5,fp
    3f5c:	8009883a 	mov	r4,r16
    3f60:	01800284 	movi	r6,10
    3f64:	000f883a 	mov	r7,zero
    3f68:	00062080 	call	6208 <__multadd>
    3f6c:	1039883a 	mov	fp,r2
    3f70:	8d006d26 	beq	r17,r20,4128 <_dtoa_r+0x1018>
    3f74:	880b883a 	mov	r5,r17
    3f78:	01800284 	movi	r6,10
    3f7c:	000f883a 	mov	r7,zero
    3f80:	8009883a 	mov	r4,r16
    3f84:	00062080 	call	6208 <__multadd>
    3f88:	a00b883a 	mov	r5,r20
    3f8c:	8009883a 	mov	r4,r16
    3f90:	01800284 	movi	r6,10
    3f94:	000f883a 	mov	r7,zero
    3f98:	1023883a 	mov	r17,r2
    3f9c:	00062080 	call	6208 <__multadd>
    3fa0:	1029883a 	mov	r20,r2
    3fa4:	b027883a 	mov	r19,r22
    3fa8:	003fc006 	br	3eac <_dtoa_r+0xd9c>
    3fac:	a005883a 	mov	r2,r20
    3fb0:	003ede06 	br	3b2c <_dtoa_r+0xa1c>
    3fb4:	01000044 	movi	r4,1
    3fb8:	d9000b15 	stw	r4,44(sp)
    3fbc:	d9802217 	ldw	r6,136(sp)
    3fc0:	0180dc0e 	bge	zero,r6,4334 <_dtoa_r+0x1224>
    3fc4:	3023883a 	mov	r17,r6
    3fc8:	d9800d15 	stw	r6,52(sp)
    3fcc:	d9800615 	stw	r6,24(sp)
    3fd0:	003d1e06 	br	344c <_dtoa_r+0x33c>
    3fd4:	d8800617 	ldw	r2,24(sp)
    3fd8:	00be3716 	blt	zero,r2,38b8 <_dtoa_r+0x7a8>
    3fdc:	1000be1e 	bne	r2,zero,42d8 <_dtoa_r+0x11c8>
    3fe0:	8809883a 	mov	r4,r17
    3fe4:	a00b883a 	mov	r5,r20
    3fe8:	000d883a 	mov	r6,zero
    3fec:	01d00534 	movhi	r7,16404
    3ff0:	000bd980 	call	bd98 <__muldf3>
    3ff4:	1009883a 	mov	r4,r2
    3ff8:	180b883a 	mov	r5,r3
    3ffc:	900d883a 	mov	r6,r18
    4000:	980f883a 	mov	r7,r19
    4004:	000bbd80 	call	bbd8 <__gedf2>
    4008:	002b883a 	mov	r21,zero
    400c:	0023883a 	mov	r17,zero
    4010:	10007a16 	blt	r2,zero,41fc <_dtoa_r+0x10ec>
    4014:	d9002217 	ldw	r4,136(sp)
    4018:	ddc00717 	ldw	r23,28(sp)
    401c:	0108303a 	nor	r4,zero,r4
    4020:	d9000515 	stw	r4,20(sp)
    4024:	8009883a 	mov	r4,r16
    4028:	a80b883a 	mov	r5,r21
    402c:	00061e00 	call	61e0 <_Bfree>
    4030:	883f751e 	bne	r17,zero,3e08 <_dtoa_r+0xcf8>
    4034:	003de406 	br	37c8 <_dtoa_r+0x6b8>
    4038:	e00b883a 	mov	r5,fp
    403c:	8009883a 	mov	r4,r16
    4040:	00067700 	call	6770 <__pow5mult>
    4044:	1039883a 	mov	fp,r2
    4048:	003ed306 	br	3b98 <_dtoa_r+0xa88>
    404c:	903ee01e 	bne	r18,zero,3bd0 <_dtoa_r+0xac0>
    4050:	00800434 	movhi	r2,16
    4054:	10bfffc4 	addi	r2,r2,-1
    4058:	9884703a 	and	r2,r19,r2
    405c:	103f081e 	bne	r2,zero,3c80 <_dtoa_r+0xb70>
    4060:	9cdffc2c 	andhi	r19,r19,32752
    4064:	983f0626 	beq	r19,zero,3c80 <_dtoa_r+0xb70>
    4068:	d8800817 	ldw	r2,32(sp)
    406c:	b5800044 	addi	r22,r22,1
    4070:	04c00044 	movi	r19,1
    4074:	10800044 	addi	r2,r2,1
    4078:	d8800815 	stw	r2,32(sp)
    407c:	003f0106 	br	3c84 <_dtoa_r+0xb74>
    4080:	d9800f17 	ldw	r6,60(sp)
    4084:	30016826 	beq	r6,zero,4628 <_dtoa_r+0x1518>
    4088:	10810cc4 	addi	r2,r2,1075
    408c:	dd400917 	ldw	r21,36(sp)
    4090:	dd000817 	ldw	r20,32(sp)
    4094:	003e9906 	br	3afc <_dtoa_r+0x9ec>
    4098:	9011883a 	mov	r8,r18
    409c:	4007883a 	mov	r3,r8
    40a0:	e02d883a 	mov	r22,fp
    40a4:	0080100e 	bge	zero,r2,40e8 <_dtoa_r+0xfd8>
    40a8:	01800044 	movi	r6,1
    40ac:	8009883a 	mov	r4,r16
    40b0:	e00b883a 	mov	r5,fp
    40b4:	da001515 	stw	r8,84(sp)
    40b8:	da001715 	stw	r8,92(sp)
    40bc:	00068b00 	call	68b0 <__lshift>
    40c0:	1009883a 	mov	r4,r2
    40c4:	a80b883a 	mov	r5,r21
    40c8:	102d883a 	mov	r22,r2
    40cc:	00069f80 	call	69f8 <__mcmp>
    40d0:	d8c01517 	ldw	r3,84(sp)
    40d4:	da001717 	ldw	r8,92(sp)
    40d8:	0081a50e 	bge	zero,r2,4770 <_dtoa_r+0x1660>
    40dc:	00800e44 	movi	r2,57
    40e0:	40817b26 	beq	r8,r2,46d0 <_dtoa_r+0x15c0>
    40e4:	40c00044 	addi	r3,r8,1
    40e8:	8825883a 	mov	r18,r17
    40ec:	9dc00044 	addi	r23,r19,1
    40f0:	98c00005 	stb	r3,0(r19)
    40f4:	a023883a 	mov	r17,r20
    40f8:	b039883a 	mov	fp,r22
    40fc:	003f3906 	br	3de4 <_dtoa_r+0xcd4>
    4100:	00800e44 	movi	r2,57
    4104:	9011883a 	mov	r8,r18
    4108:	90817226 	beq	r18,r2,46d4 <_dtoa_r+0x15c4>
    410c:	0580010e 	bge	zero,r22,4114 <_dtoa_r+0x1004>
    4110:	ba000c44 	addi	r8,r23,49
    4114:	8825883a 	mov	r18,r17
    4118:	9dc00044 	addi	r23,r19,1
    411c:	9a000005 	stb	r8,0(r19)
    4120:	a023883a 	mov	r17,r20
    4124:	003f2f06 	br	3de4 <_dtoa_r+0xcd4>
    4128:	880b883a 	mov	r5,r17
    412c:	8009883a 	mov	r4,r16
    4130:	01800284 	movi	r6,10
    4134:	000f883a 	mov	r7,zero
    4138:	00062080 	call	6208 <__multadd>
    413c:	1023883a 	mov	r17,r2
    4140:	1029883a 	mov	r20,r2
    4144:	003f9706 	br	3fa4 <_dtoa_r+0xe94>
    4148:	8009883a 	mov	r4,r16
    414c:	180b883a 	mov	r5,r3
    4150:	00061e00 	call	61e0 <_Bfree>
    4154:	00800044 	movi	r2,1
    4158:	003f7306 	br	3f28 <_dtoa_r+0xe18>
    415c:	e009883a 	mov	r4,fp
    4160:	a80b883a 	mov	r5,r21
    4164:	00069f80 	call	69f8 <__mcmp>
    4168:	103ee60e 	bge	r2,zero,3d04 <_dtoa_r+0xbf4>
    416c:	8009883a 	mov	r4,r16
    4170:	e00b883a 	mov	r5,fp
    4174:	01800284 	movi	r6,10
    4178:	000f883a 	mov	r7,zero
    417c:	00062080 	call	6208 <__multadd>
    4180:	d9000517 	ldw	r4,20(sp)
    4184:	d9800b17 	ldw	r6,44(sp)
    4188:	1039883a 	mov	fp,r2
    418c:	213fffc4 	addi	r4,r4,-1
    4190:	d9000515 	stw	r4,20(sp)
    4194:	303f2d1e 	bne	r6,zero,3e4c <_dtoa_r+0xd3c>
    4198:	d9000d17 	ldw	r4,52(sp)
    419c:	0101780e 	bge	zero,r4,4780 <_dtoa_r+0x1670>
    41a0:	d9000615 	stw	r4,24(sp)
    41a4:	003edb06 	br	3d14 <_dtoa_r+0xc04>
    41a8:	00800084 	movi	r2,2
    41ac:	30818e1e 	bne	r6,r2,47e8 <_dtoa_r+0x16d8>
    41b0:	d8000b15 	stw	zero,44(sp)
    41b4:	003f8106 	br	3fbc <_dtoa_r+0xeac>
    41b8:	d8800717 	ldw	r2,28(sp)
    41bc:	003c0306 	br	31cc <_dtoa_r+0xbc>
    41c0:	d9000317 	ldw	r4,12(sp)
    41c4:	00800084 	movi	r2,2
    41c8:	113ed00e 	bge	r2,r4,3d0c <_dtoa_r+0xbfc>
    41cc:	d8c00617 	ldw	r3,24(sp)
    41d0:	183f901e 	bne	r3,zero,4014 <_dtoa_r+0xf04>
    41d4:	a80b883a 	mov	r5,r21
    41d8:	8009883a 	mov	r4,r16
    41dc:	01800144 	movi	r6,5
    41e0:	000f883a 	mov	r7,zero
    41e4:	00062080 	call	6208 <__multadd>
    41e8:	e009883a 	mov	r4,fp
    41ec:	100b883a 	mov	r5,r2
    41f0:	102b883a 	mov	r21,r2
    41f4:	00069f80 	call	69f8 <__mcmp>
    41f8:	00bf860e 	bge	zero,r2,4014 <_dtoa_r+0xf04>
    41fc:	d9800717 	ldw	r6,28(sp)
    4200:	00800c44 	movi	r2,49
    4204:	30800005 	stb	r2,0(r6)
    4208:	d8800517 	ldw	r2,20(sp)
    420c:	35c00044 	addi	r23,r6,1
    4210:	10800044 	addi	r2,r2,1
    4214:	d8800515 	stw	r2,20(sp)
    4218:	003f8206 	br	4024 <_dtoa_r+0xf14>
    421c:	903e981e 	bne	r18,zero,3c80 <_dtoa_r+0xb70>
    4220:	003f8b06 	br	4050 <_dtoa_r+0xf40>
    4224:	d9800517 	ldw	r6,20(sp)
    4228:	d8c00717 	ldw	r3,28(sp)
    422c:	00800c44 	movi	r2,49
    4230:	31800044 	addi	r6,r6,1
    4234:	d9800515 	stw	r6,20(sp)
    4238:	18800005 	stb	r2,0(r3)
    423c:	003ee906 	br	3de4 <_dtoa_r+0xcd4>
    4240:	dc000317 	ldw	r16,12(sp)
    4244:	003d6006 	br	37c8 <_dtoa_r+0x6b8>
    4248:	8809883a 	mov	r4,r17
    424c:	000ce140 	call	ce14 <__floatsidf>
    4250:	a009883a 	mov	r4,r20
    4254:	a80b883a 	mov	r5,r21
    4258:	100d883a 	mov	r6,r2
    425c:	180f883a 	mov	r7,r3
    4260:	000bd980 	call	bd98 <__muldf3>
    4264:	1009883a 	mov	r4,r2
    4268:	180b883a 	mov	r5,r3
    426c:	000d883a 	mov	r6,zero
    4270:	01d00734 	movhi	r7,16412
    4274:	000a9ec0 	call	a9ec <__adddf3>
    4278:	1023883a 	mov	r17,r2
    427c:	00bf3034 	movhi	r2,64704
    4280:	1885883a 	add	r2,r3,r2
    4284:	d8800e15 	stw	r2,56(sp)
    4288:	a009883a 	mov	r4,r20
    428c:	a80b883a 	mov	r5,r21
    4290:	000d883a 	mov	r6,zero
    4294:	01d00534 	movhi	r7,16404
    4298:	000c4bc0 	call	c4bc <__subdf3>
    429c:	d9c00e17 	ldw	r7,56(sp)
    42a0:	1009883a 	mov	r4,r2
    42a4:	180b883a 	mov	r5,r3
    42a8:	880d883a 	mov	r6,r17
    42ac:	102b883a 	mov	r21,r2
    42b0:	1829883a 	mov	r20,r3
    42b4:	000bbd80 	call	bbd8 <__gedf2>
    42b8:	00807716 	blt	zero,r2,4498 <_dtoa_r+0x1388>
    42bc:	d8800e17 	ldw	r2,56(sp)
    42c0:	a809883a 	mov	r4,r21
    42c4:	a00b883a 	mov	r5,r20
    42c8:	11e0003c 	xorhi	r7,r2,32768
    42cc:	880d883a 	mov	r6,r17
    42d0:	000bcb80 	call	bcb8 <__ledf2>
    42d4:	103d6b0e 	bge	r2,zero,3884 <_dtoa_r+0x774>
    42d8:	002b883a 	mov	r21,zero
    42dc:	0023883a 	mov	r17,zero
    42e0:	003f4c06 	br	4014 <_dtoa_r+0xf04>
    42e4:	d9800917 	ldw	r6,36(sp)
    42e8:	e00b883a 	mov	r5,fp
    42ec:	8009883a 	mov	r4,r16
    42f0:	00067700 	call	6770 <__pow5mult>
    42f4:	1039883a 	mov	fp,r2
    42f8:	003e2706 	br	3b98 <_dtoa_r+0xa88>
    42fc:	d8000b15 	stw	zero,44(sp)
    4300:	003c4906 	br	3428 <_dtoa_r+0x318>
    4304:	d9000917 	ldw	r4,36(sp)
    4308:	d9800a17 	ldw	r6,40(sp)
    430c:	dd400915 	stw	r21,36(sp)
    4310:	a905c83a 	sub	r2,r21,r4
    4314:	308d883a 	add	r6,r6,r2
    4318:	d9800a15 	stw	r6,40(sp)
    431c:	002b883a 	mov	r21,zero
    4320:	003df206 	br	3aec <_dtoa_r+0x9dc>
    4324:	dc800e15 	stw	r18,56(sp)
    4328:	982b883a 	mov	r21,r19
    432c:	04400084 	movi	r17,2
    4330:	003c7406 	br	3504 <_dtoa_r+0x3f4>
    4334:	04400044 	movi	r17,1
    4338:	dc400d15 	stw	r17,52(sp)
    433c:	dc400615 	stw	r17,24(sp)
    4340:	dc402215 	stw	r17,136(sp)
    4344:	80001115 	stw	zero,68(r16)
    4348:	000b883a 	mov	r5,zero
    434c:	003c4a06 	br	3478 <_dtoa_r+0x368>
    4350:	3023883a 	mov	r17,r6
    4354:	003ffb06 	br	4344 <_dtoa_r+0x1234>
    4358:	1000021e 	bne	r2,zero,4364 <_dtoa_r+0x1254>
    435c:	4200004c 	andi	r8,r8,1
    4360:	403e8f1e 	bne	r8,zero,3da0 <_dtoa_r+0xc90>
    4364:	01000c04 	movi	r4,48
    4368:	00000106 	br	4370 <_dtoa_r+0x1260>
    436c:	102f883a 	mov	r23,r2
    4370:	b8bfffc4 	addi	r2,r23,-1
    4374:	10c00007 	ldb	r3,0(r2)
    4378:	193ffc26 	beq	r3,r4,436c <_dtoa_r+0x125c>
    437c:	003e9906 	br	3de4 <_dtoa_r+0xcd4>
    4380:	d9000517 	ldw	r4,20(sp)
    4384:	012fc83a 	sub	r23,zero,r4
    4388:	b800ad26 	beq	r23,zero,4640 <_dtoa_r+0x1530>
    438c:	b88003cc 	andi	r2,r23,15
    4390:	100490fa 	slli	r2,r2,3
    4394:	00c00074 	movhi	r3,1
    4398:	18fe9104 	addi	r3,r3,-1468
    439c:	1885883a 	add	r2,r3,r2
    43a0:	11800017 	ldw	r6,0(r2)
    43a4:	11c00117 	ldw	r7,4(r2)
    43a8:	b82fd13a 	srai	r23,r23,4
    43ac:	9009883a 	mov	r4,r18
    43b0:	980b883a 	mov	r5,r19
    43b4:	000bd980 	call	bd98 <__muldf3>
    43b8:	1029883a 	mov	r20,r2
    43bc:	182b883a 	mov	r21,r3
    43c0:	b800f426 	beq	r23,zero,4794 <_dtoa_r+0x1684>
    43c4:	02000074 	movhi	r8,1
    43c8:	423e8704 	addi	r8,r8,-1508
    43cc:	8029883a 	mov	r20,r16
    43d0:	04400084 	movi	r17,2
    43d4:	4021883a 	mov	r16,r8
    43d8:	b980004c 	andi	r6,r23,1
    43dc:	1009883a 	mov	r4,r2
    43e0:	b82fd07a 	srai	r23,r23,1
    43e4:	180b883a 	mov	r5,r3
    43e8:	30000426 	beq	r6,zero,43fc <_dtoa_r+0x12ec>
    43ec:	81800017 	ldw	r6,0(r16)
    43f0:	81c00117 	ldw	r7,4(r16)
    43f4:	8c400044 	addi	r17,r17,1
    43f8:	000bd980 	call	bd98 <__muldf3>
    43fc:	84000204 	addi	r16,r16,8
    4400:	b83ff51e 	bne	r23,zero,43d8 <_dtoa_r+0x12c8>
    4404:	a021883a 	mov	r16,r20
    4408:	182b883a 	mov	r21,r3
    440c:	1029883a 	mov	r20,r2
    4410:	003c5506 	br	3568 <_dtoa_r+0x458>
    4414:	d9800517 	ldw	r6,20(sp)
    4418:	d9000717 	ldw	r4,28(sp)
    441c:	00c00c04 	movi	r3,48
    4420:	31800044 	addi	r6,r6,1
    4424:	d9800515 	stw	r6,20(sp)
    4428:	20c00005 	stb	r3,0(r4)
    442c:	02000c44 	movi	r8,49
    4430:	003da206 	br	3abc <_dtoa_r+0x9ac>
    4434:	89400117 	ldw	r5,4(r17)
    4438:	8009883a 	mov	r4,r16
    443c:	00061380 	call	6138 <_Balloc>
    4440:	89800417 	ldw	r6,16(r17)
    4444:	11000304 	addi	r4,r2,12
    4448:	89400304 	addi	r5,r17,12
    444c:	31800084 	addi	r6,r6,2
    4450:	318d883a 	add	r6,r6,r6
    4454:	318d883a 	add	r6,r6,r6
    4458:	1027883a 	mov	r19,r2
    445c:	0005edc0 	call	5edc <memcpy>
    4460:	8009883a 	mov	r4,r16
    4464:	980b883a 	mov	r5,r19
    4468:	01800044 	movi	r6,1
    446c:	00068b00 	call	68b0 <__lshift>
    4470:	1029883a 	mov	r20,r2
    4474:	003e8606 	br	3e90 <_dtoa_r+0xd80>
    4478:	00800e44 	movi	r2,57
    447c:	90809526 	beq	r18,r2,46d4 <_dtoa_r+0x15c4>
    4480:	92000044 	addi	r8,r18,1
    4484:	003f2306 	br	4114 <_dtoa_r+0x1004>
    4488:	9011883a 	mov	r8,r18
    448c:	8825883a 	mov	r18,r17
    4490:	a023883a 	mov	r17,r20
    4494:	003e3706 	br	3d74 <_dtoa_r+0xc64>
    4498:	002b883a 	mov	r21,zero
    449c:	0023883a 	mov	r17,zero
    44a0:	003f5606 	br	41fc <_dtoa_r+0x10ec>
    44a4:	51bfffc4 	addi	r6,r10,-1
    44a8:	300490fa 	slli	r2,r6,3
    44ac:	00c00074 	movhi	r3,1
    44b0:	18fe9104 	addi	r3,r3,-1468
    44b4:	1885883a 	add	r2,r3,r2
    44b8:	d9c00e17 	ldw	r7,56(sp)
    44bc:	11000017 	ldw	r4,0(r2)
    44c0:	11400117 	ldw	r5,4(r2)
    44c4:	d8800717 	ldw	r2,28(sp)
    44c8:	d9801015 	stw	r6,64(sp)
    44cc:	880d883a 	mov	r6,r17
    44d0:	da801615 	stw	r10,88(sp)
    44d4:	15c00044 	addi	r23,r2,1
    44d8:	000bd980 	call	bd98 <__muldf3>
    44dc:	a80b883a 	mov	r5,r21
    44e0:	a009883a 	mov	r4,r20
    44e4:	d8c01115 	stw	r3,68(sp)
    44e8:	d8800e15 	stw	r2,56(sp)
    44ec:	000cd8c0 	call	cd8c <__fixdfsi>
    44f0:	1009883a 	mov	r4,r2
    44f4:	1023883a 	mov	r17,r2
    44f8:	000ce140 	call	ce14 <__floatsidf>
    44fc:	a009883a 	mov	r4,r20
    4500:	a80b883a 	mov	r5,r21
    4504:	100d883a 	mov	r6,r2
    4508:	180f883a 	mov	r7,r3
    450c:	000c4bc0 	call	c4bc <__subdf3>
    4510:	1813883a 	mov	r9,r3
    4514:	d8c00717 	ldw	r3,28(sp)
    4518:	8c400c04 	addi	r17,r17,48
    451c:	1011883a 	mov	r8,r2
    4520:	1c400005 	stb	r17,0(r3)
    4524:	da801617 	ldw	r10,88(sp)
    4528:	00800044 	movi	r2,1
    452c:	50802326 	beq	r10,r2,45bc <_dtoa_r+0x14ac>
    4530:	d8800717 	ldw	r2,28(sp)
    4534:	b82b883a 	mov	r21,r23
    4538:	dc001315 	stw	r16,76(sp)
    453c:	12a9883a 	add	r20,r2,r10
    4540:	4807883a 	mov	r3,r9
    4544:	4005883a 	mov	r2,r8
    4548:	dc801415 	stw	r18,80(sp)
    454c:	000d883a 	mov	r6,zero
    4550:	01d00934 	movhi	r7,16420
    4554:	1009883a 	mov	r4,r2
    4558:	180b883a 	mov	r5,r3
    455c:	000bd980 	call	bd98 <__muldf3>
    4560:	180b883a 	mov	r5,r3
    4564:	1009883a 	mov	r4,r2
    4568:	1821883a 	mov	r16,r3
    456c:	1025883a 	mov	r18,r2
    4570:	000cd8c0 	call	cd8c <__fixdfsi>
    4574:	1009883a 	mov	r4,r2
    4578:	1023883a 	mov	r17,r2
    457c:	000ce140 	call	ce14 <__floatsidf>
    4580:	9009883a 	mov	r4,r18
    4584:	800b883a 	mov	r5,r16
    4588:	100d883a 	mov	r6,r2
    458c:	180f883a 	mov	r7,r3
    4590:	8c400c04 	addi	r17,r17,48
    4594:	000c4bc0 	call	c4bc <__subdf3>
    4598:	ad400044 	addi	r21,r21,1
    459c:	ac7fffc5 	stb	r17,-1(r21)
    45a0:	ad3fea1e 	bne	r21,r20,454c <_dtoa_r+0x143c>
    45a4:	1813883a 	mov	r9,r3
    45a8:	d8c01017 	ldw	r3,64(sp)
    45ac:	dc001317 	ldw	r16,76(sp)
    45b0:	dc801417 	ldw	r18,80(sp)
    45b4:	1011883a 	mov	r8,r2
    45b8:	b8ef883a 	add	r23,r23,r3
    45bc:	d9000e17 	ldw	r4,56(sp)
    45c0:	d9401117 	ldw	r5,68(sp)
    45c4:	000d883a 	mov	r6,zero
    45c8:	01cff834 	movhi	r7,16352
    45cc:	da001715 	stw	r8,92(sp)
    45d0:	da401515 	stw	r9,84(sp)
    45d4:	000a9ec0 	call	a9ec <__adddf3>
    45d8:	da001717 	ldw	r8,92(sp)
    45dc:	da401517 	ldw	r9,84(sp)
    45e0:	1009883a 	mov	r4,r2
    45e4:	400d883a 	mov	r6,r8
    45e8:	480f883a 	mov	r7,r9
    45ec:	180b883a 	mov	r5,r3
    45f0:	000bcb80 	call	bcb8 <__ledf2>
    45f4:	da001717 	ldw	r8,92(sp)
    45f8:	da401517 	ldw	r9,84(sp)
    45fc:	10003b0e 	bge	r2,zero,46ec <_dtoa_r+0x15dc>
    4600:	d9001217 	ldw	r4,72(sp)
    4604:	bd7fffc3 	ldbu	r21,-1(r23)
    4608:	d9000515 	stw	r4,20(sp)
    460c:	003d1c06 	br	3a80 <_dtoa_r+0x970>
    4610:	d8c00817 	ldw	r3,32(sp)
    4614:	18a9c83a 	sub	r20,r3,r2
    4618:	0005883a 	mov	r2,zero
    461c:	003d3706 	br	3afc <_dtoa_r+0x9ec>
    4620:	00800044 	movi	r2,1
    4624:	003dd006 	br	3d68 <_dtoa_r+0xc58>
    4628:	d8c00217 	ldw	r3,8(sp)
    462c:	00800d84 	movi	r2,54
    4630:	dd400917 	ldw	r21,36(sp)
    4634:	10c5c83a 	sub	r2,r2,r3
    4638:	dd000817 	ldw	r20,32(sp)
    463c:	003d2f06 	br	3afc <_dtoa_r+0x9ec>
    4640:	9029883a 	mov	r20,r18
    4644:	982b883a 	mov	r21,r19
    4648:	04400084 	movi	r17,2
    464c:	003bc606 	br	3568 <_dtoa_r+0x458>
    4650:	d8800617 	ldw	r2,24(sp)
    4654:	103efc26 	beq	r2,zero,4248 <_dtoa_r+0x1138>
    4658:	d8c00d17 	ldw	r3,52(sp)
    465c:	00fc890e 	bge	zero,r3,3884 <_dtoa_r+0x774>
    4660:	a80b883a 	mov	r5,r21
    4664:	a009883a 	mov	r4,r20
    4668:	000d883a 	mov	r6,zero
    466c:	01d00934 	movhi	r7,16420
    4670:	000bd980 	call	bd98 <__muldf3>
    4674:	89000044 	addi	r4,r17,1
    4678:	1029883a 	mov	r20,r2
    467c:	182b883a 	mov	r21,r3
    4680:	000ce140 	call	ce14 <__floatsidf>
    4684:	a009883a 	mov	r4,r20
    4688:	a80b883a 	mov	r5,r21
    468c:	100d883a 	mov	r6,r2
    4690:	180f883a 	mov	r7,r3
    4694:	000bd980 	call	bd98 <__muldf3>
    4698:	1009883a 	mov	r4,r2
    469c:	180b883a 	mov	r5,r3
    46a0:	000d883a 	mov	r6,zero
    46a4:	01d00734 	movhi	r7,16412
    46a8:	000a9ec0 	call	a9ec <__adddf3>
    46ac:	d9000517 	ldw	r4,20(sp)
    46b0:	1023883a 	mov	r17,r2
    46b4:	00bf3034 	movhi	r2,64704
    46b8:	213fffc4 	addi	r4,r4,-1
    46bc:	1885883a 	add	r2,r3,r2
    46c0:	d9001215 	stw	r4,72(sp)
    46c4:	d8800e15 	stw	r2,56(sp)
    46c8:	da800d17 	ldw	r10,52(sp)
    46cc:	003bc306 	br	35dc <_dtoa_r+0x4cc>
    46d0:	b039883a 	mov	fp,r22
    46d4:	01000e44 	movi	r4,57
    46d8:	8825883a 	mov	r18,r17
    46dc:	9dc00044 	addi	r23,r19,1
    46e0:	99000005 	stb	r4,0(r19)
    46e4:	a023883a 	mov	r17,r20
    46e8:	003dae06 	br	3da4 <_dtoa_r+0xc94>
    46ec:	d9800e17 	ldw	r6,56(sp)
    46f0:	d9c01117 	ldw	r7,68(sp)
    46f4:	0009883a 	mov	r4,zero
    46f8:	014ff834 	movhi	r5,16352
    46fc:	da001715 	stw	r8,92(sp)
    4700:	da401515 	stw	r9,84(sp)
    4704:	000c4bc0 	call	c4bc <__subdf3>
    4708:	da001717 	ldw	r8,92(sp)
    470c:	da401517 	ldw	r9,84(sp)
    4710:	1009883a 	mov	r4,r2
    4714:	180b883a 	mov	r5,r3
    4718:	400d883a 	mov	r6,r8
    471c:	480f883a 	mov	r7,r9
    4720:	000bbd80 	call	bbd8 <__gedf2>
    4724:	00bc570e 	bge	zero,r2,3884 <_dtoa_r+0x774>
    4728:	01000c04 	movi	r4,48
    472c:	00000106 	br	4734 <_dtoa_r+0x1624>
    4730:	102f883a 	mov	r23,r2
    4734:	b8bfffc4 	addi	r2,r23,-1
    4738:	10c00007 	ldb	r3,0(r2)
    473c:	193ffc26 	beq	r3,r4,4730 <_dtoa_r+0x1620>
    4740:	d9801217 	ldw	r6,72(sp)
    4744:	d9800515 	stw	r6,20(sp)
    4748:	003c1f06 	br	37c8 <_dtoa_r+0x6b8>
    474c:	d8801217 	ldw	r2,72(sp)
    4750:	dc001117 	ldw	r16,68(sp)
    4754:	d8800515 	stw	r2,20(sp)
    4758:	003cc906 	br	3a80 <_dtoa_r+0x970>
    475c:	dd801317 	ldw	r22,76(sp)
    4760:	dc001117 	ldw	r16,68(sp)
    4764:	dcc01417 	ldw	r19,80(sp)
    4768:	dc801017 	ldw	r18,64(sp)
    476c:	003c4506 	br	3884 <_dtoa_r+0x774>
    4770:	103e5d1e 	bne	r2,zero,40e8 <_dtoa_r+0xfd8>
    4774:	4080004c 	andi	r2,r8,1
    4778:	103e5b26 	beq	r2,zero,40e8 <_dtoa_r+0xfd8>
    477c:	003e5706 	br	40dc <_dtoa_r+0xfcc>
    4780:	d8c00317 	ldw	r3,12(sp)
    4784:	00800084 	movi	r2,2
    4788:	10c00a16 	blt	r2,r3,47b4 <_dtoa_r+0x16a4>
    478c:	d9000d17 	ldw	r4,52(sp)
    4790:	003e8306 	br	41a0 <_dtoa_r+0x1090>
    4794:	04400084 	movi	r17,2
    4798:	003b7306 	br	3568 <_dtoa_r+0x458>
    479c:	d9801217 	ldw	r6,72(sp)
    47a0:	d9800515 	stw	r6,20(sp)
    47a4:	003cb606 	br	3a80 <_dtoa_r+0x970>
    47a8:	d9001217 	ldw	r4,72(sp)
    47ac:	d9000515 	stw	r4,20(sp)
    47b0:	003c0506 	br	37c8 <_dtoa_r+0x6b8>
    47b4:	d9800d17 	ldw	r6,52(sp)
    47b8:	d9800615 	stw	r6,24(sp)
    47bc:	003e8306 	br	41cc <_dtoa_r+0x10bc>
    47c0:	d9800317 	ldw	r6,12(sp)
    47c4:	00800084 	movi	r2,2
    47c8:	11800216 	blt	r2,r6,47d4 <_dtoa_r+0x16c4>
    47cc:	d8800d17 	ldw	r2,52(sp)
    47d0:	003da606 	br	3e6c <_dtoa_r+0xd5c>
    47d4:	d8800d17 	ldw	r2,52(sp)
    47d8:	d8800615 	stw	r2,24(sp)
    47dc:	003e7b06 	br	41cc <_dtoa_r+0x10bc>
    47e0:	05000044 	movi	r20,1
    47e4:	003b0506 	br	33fc <_dtoa_r+0x2ec>
    47e8:	8009883a 	mov	r4,r16
    47ec:	80001115 	stw	zero,68(r16)
    47f0:	000b883a 	mov	r5,zero
    47f4:	00061380 	call	6138 <_Balloc>
    47f8:	d8800715 	stw	r2,28(sp)
    47fc:	d8c00717 	ldw	r3,28(sp)
    4800:	00bfffc4 	movi	r2,-1
    4804:	01000044 	movi	r4,1
    4808:	d8800615 	stw	r2,24(sp)
    480c:	80c01015 	stw	r3,64(r16)
    4810:	d9000b15 	stw	r4,44(sp)
    4814:	d8002215 	stw	zero,136(sp)
    4818:	d8800d15 	stw	r2,52(sp)
    481c:	003c1906 	br	3884 <_dtoa_r+0x774>
    4820:	193d2926 	beq	r3,r4,3cc8 <_dtoa_r+0xbb8>
    4824:	00c00f04 	movi	r3,60
    4828:	1885c83a 	sub	r2,r3,r2
    482c:	003d7b06 	br	3e1c <_dtoa_r+0xd0c>
    4830:	000b883a 	mov	r5,zero
    4834:	003b1006 	br	3478 <_dtoa_r+0x368>

00004838 <_fflush_r>:
    4838:	defffb04 	addi	sp,sp,-20
    483c:	dcc00315 	stw	r19,12(sp)
    4840:	dc000015 	stw	r16,0(sp)
    4844:	dfc00415 	stw	ra,16(sp)
    4848:	dc800215 	stw	r18,8(sp)
    484c:	dc400115 	stw	r17,4(sp)
    4850:	2027883a 	mov	r19,r4
    4854:	2821883a 	mov	r16,r5
    4858:	20000226 	beq	r4,zero,4864 <_fflush_r+0x2c>
    485c:	20800e17 	ldw	r2,56(r4)
    4860:	10005326 	beq	r2,zero,49b0 <_fflush_r+0x178>
    4864:	8080030b 	ldhu	r2,12(r16)
    4868:	10ffffcc 	andi	r3,r2,65535
    486c:	18e0001c 	xori	r3,r3,32768
    4870:	18e00004 	addi	r3,r3,-32768
    4874:	18002c26 	beq	r3,zero,4928 <_fflush_r+0xf0>
    4878:	10c0020c 	andi	r3,r2,8
    487c:	1800321e 	bne	r3,zero,4948 <_fflush_r+0x110>
    4880:	80c00117 	ldw	r3,4(r16)
    4884:	10820014 	ori	r2,r2,2048
    4888:	8080030d 	sth	r2,12(r16)
    488c:	00c0570e 	bge	zero,r3,49ec <_fflush_r+0x1b4>
    4890:	82000a17 	ldw	r8,40(r16)
    4894:	40002426 	beq	r8,zero,4928 <_fflush_r+0xf0>
    4898:	9c400017 	ldw	r17,0(r19)
    489c:	10c4000c 	andi	r3,r2,4096
    48a0:	98000015 	stw	zero,0(r19)
    48a4:	18004626 	beq	r3,zero,49c0 <_fflush_r+0x188>
    48a8:	81801417 	ldw	r6,80(r16)
    48ac:	10c0010c 	andi	r3,r2,4
    48b0:	18000626 	beq	r3,zero,48cc <_fflush_r+0x94>
    48b4:	80c00117 	ldw	r3,4(r16)
    48b8:	80800c17 	ldw	r2,48(r16)
    48bc:	30cdc83a 	sub	r6,r6,r3
    48c0:	10000226 	beq	r2,zero,48cc <_fflush_r+0x94>
    48c4:	80800f17 	ldw	r2,60(r16)
    48c8:	308dc83a 	sub	r6,r6,r2
    48cc:	81400717 	ldw	r5,28(r16)
    48d0:	9809883a 	mov	r4,r19
    48d4:	000f883a 	mov	r7,zero
    48d8:	403ee83a 	callr	r8
    48dc:	00ffffc4 	movi	r3,-1
    48e0:	10c04526 	beq	r2,r3,49f8 <_fflush_r+0x1c0>
    48e4:	80c0030b 	ldhu	r3,12(r16)
    48e8:	81000417 	ldw	r4,16(r16)
    48ec:	80000115 	stw	zero,4(r16)
    48f0:	197dffcc 	andi	r5,r3,63487
    48f4:	8140030d 	sth	r5,12(r16)
    48f8:	81000015 	stw	r4,0(r16)
    48fc:	18c4000c 	andi	r3,r3,4096
    4900:	18000126 	beq	r3,zero,4908 <_fflush_r+0xd0>
    4904:	80801415 	stw	r2,80(r16)
    4908:	81400c17 	ldw	r5,48(r16)
    490c:	9c400015 	stw	r17,0(r19)
    4910:	28000526 	beq	r5,zero,4928 <_fflush_r+0xf0>
    4914:	80801004 	addi	r2,r16,64
    4918:	28800226 	beq	r5,r2,4924 <_fflush_r+0xec>
    491c:	9809883a 	mov	r4,r19
    4920:	0004f540 	call	4f54 <_free_r>
    4924:	80000c15 	stw	zero,48(r16)
    4928:	0005883a 	mov	r2,zero
    492c:	dfc00417 	ldw	ra,16(sp)
    4930:	dcc00317 	ldw	r19,12(sp)
    4934:	dc800217 	ldw	r18,8(sp)
    4938:	dc400117 	ldw	r17,4(sp)
    493c:	dc000017 	ldw	r16,0(sp)
    4940:	dec00504 	addi	sp,sp,20
    4944:	f800283a 	ret
    4948:	84800417 	ldw	r18,16(r16)
    494c:	903ff626 	beq	r18,zero,4928 <_fflush_r+0xf0>
    4950:	84400017 	ldw	r17,0(r16)
    4954:	108000cc 	andi	r2,r2,3
    4958:	84800015 	stw	r18,0(r16)
    495c:	8ca3c83a 	sub	r17,r17,r18
    4960:	10001526 	beq	r2,zero,49b8 <_fflush_r+0x180>
    4964:	0005883a 	mov	r2,zero
    4968:	80800215 	stw	r2,8(r16)
    496c:	04400316 	blt	zero,r17,497c <_fflush_r+0x144>
    4970:	003fed06 	br	4928 <_fflush_r+0xf0>
    4974:	90a5883a 	add	r18,r18,r2
    4978:	047feb0e 	bge	zero,r17,4928 <_fflush_r+0xf0>
    497c:	80800917 	ldw	r2,36(r16)
    4980:	81400717 	ldw	r5,28(r16)
    4984:	880f883a 	mov	r7,r17
    4988:	900d883a 	mov	r6,r18
    498c:	9809883a 	mov	r4,r19
    4990:	103ee83a 	callr	r2
    4994:	88a3c83a 	sub	r17,r17,r2
    4998:	00bff616 	blt	zero,r2,4974 <_fflush_r+0x13c>
    499c:	80c0030b 	ldhu	r3,12(r16)
    49a0:	00bfffc4 	movi	r2,-1
    49a4:	18c01014 	ori	r3,r3,64
    49a8:	80c0030d 	sth	r3,12(r16)
    49ac:	003fdf06 	br	492c <_fflush_r+0xf4>
    49b0:	0004de00 	call	4de0 <__sinit>
    49b4:	003fab06 	br	4864 <_fflush_r+0x2c>
    49b8:	80800517 	ldw	r2,20(r16)
    49bc:	003fea06 	br	4968 <_fflush_r+0x130>
    49c0:	81400717 	ldw	r5,28(r16)
    49c4:	000d883a 	mov	r6,zero
    49c8:	9809883a 	mov	r4,r19
    49cc:	01c00044 	movi	r7,1
    49d0:	403ee83a 	callr	r8
    49d4:	100d883a 	mov	r6,r2
    49d8:	00bfffc4 	movi	r2,-1
    49dc:	30801326 	beq	r6,r2,4a2c <_fflush_r+0x1f4>
    49e0:	8080030b 	ldhu	r2,12(r16)
    49e4:	82000a17 	ldw	r8,40(r16)
    49e8:	003fb006 	br	48ac <_fflush_r+0x74>
    49ec:	80c00f17 	ldw	r3,60(r16)
    49f0:	00ffa716 	blt	zero,r3,4890 <_fflush_r+0x58>
    49f4:	003fcc06 	br	4928 <_fflush_r+0xf0>
    49f8:	98c00017 	ldw	r3,0(r19)
    49fc:	183fb926 	beq	r3,zero,48e4 <_fflush_r+0xac>
    4a00:	01000744 	movi	r4,29
    4a04:	19000226 	beq	r3,r4,4a10 <_fflush_r+0x1d8>
    4a08:	01000584 	movi	r4,22
    4a0c:	1900101e 	bne	r3,r4,4a50 <_fflush_r+0x218>
    4a10:	8080030b 	ldhu	r2,12(r16)
    4a14:	80c00417 	ldw	r3,16(r16)
    4a18:	80000115 	stw	zero,4(r16)
    4a1c:	10bdffcc 	andi	r2,r2,63487
    4a20:	8080030d 	sth	r2,12(r16)
    4a24:	80c00015 	stw	r3,0(r16)
    4a28:	003fb706 	br	4908 <_fflush_r+0xd0>
    4a2c:	98800017 	ldw	r2,0(r19)
    4a30:	103feb26 	beq	r2,zero,49e0 <_fflush_r+0x1a8>
    4a34:	00c00744 	movi	r3,29
    4a38:	10c00226 	beq	r2,r3,4a44 <_fflush_r+0x20c>
    4a3c:	00c00584 	movi	r3,22
    4a40:	10ffd61e 	bne	r2,r3,499c <_fflush_r+0x164>
    4a44:	9c400015 	stw	r17,0(r19)
    4a48:	0005883a 	mov	r2,zero
    4a4c:	003fb706 	br	492c <_fflush_r+0xf4>
    4a50:	80c0030b 	ldhu	r3,12(r16)
    4a54:	18c01014 	ori	r3,r3,64
    4a58:	80c0030d 	sth	r3,12(r16)
    4a5c:	003fb306 	br	492c <_fflush_r+0xf4>

00004a60 <fflush>:
    4a60:	20000526 	beq	r4,zero,4a78 <fflush+0x18>
    4a64:	00800074 	movhi	r2,1
    4a68:	1085c204 	addi	r2,r2,5896
    4a6c:	200b883a 	mov	r5,r4
    4a70:	11000017 	ldw	r4,0(r2)
    4a74:	00048381 	jmpi	4838 <_fflush_r>
    4a78:	00800074 	movhi	r2,1
    4a7c:	1085c104 	addi	r2,r2,5892
    4a80:	11000017 	ldw	r4,0(r2)
    4a84:	01400034 	movhi	r5,0
    4a88:	29520e04 	addi	r5,r5,18488
    4a8c:	00052fc1 	jmpi	52fc <_fwalk_reent>

00004a90 <__fp_lock>:
    4a90:	0005883a 	mov	r2,zero
    4a94:	f800283a 	ret

00004a98 <__fp_unlock>:
    4a98:	0005883a 	mov	r2,zero
    4a9c:	f800283a 	ret

00004aa0 <_cleanup_r>:
    4aa0:	01400074 	movhi	r5,1
    4aa4:	2962c304 	addi	r5,r5,-29940
    4aa8:	00052441 	jmpi	5244 <_fwalk>

00004aac <__sinit.part.1>:
    4aac:	defff604 	addi	sp,sp,-40
    4ab0:	00c00034 	movhi	r3,0
    4ab4:	dfc00915 	stw	ra,36(sp)
    4ab8:	df000815 	stw	fp,32(sp)
    4abc:	ddc00715 	stw	r23,28(sp)
    4ac0:	dd800615 	stw	r22,24(sp)
    4ac4:	dd400515 	stw	r21,20(sp)
    4ac8:	dd000415 	stw	r20,16(sp)
    4acc:	dcc00315 	stw	r19,12(sp)
    4ad0:	dc800215 	stw	r18,8(sp)
    4ad4:	dc400115 	stw	r17,4(sp)
    4ad8:	dc000015 	stw	r16,0(sp)
    4adc:	18d2a804 	addi	r3,r3,19104
    4ae0:	24000117 	ldw	r16,4(r4)
    4ae4:	20c00f15 	stw	r3,60(r4)
    4ae8:	07000044 	movi	fp,1
    4aec:	00c000c4 	movi	r3,3
    4af0:	2080bb04 	addi	r2,r4,748
    4af4:	20c0b915 	stw	r3,740(r4)
    4af8:	27000e15 	stw	fp,56(r4)
    4afc:	2080ba15 	stw	r2,744(r4)
    4b00:	2000b815 	stw	zero,736(r4)
    4b04:	05c00204 	movi	r23,8
    4b08:	00800104 	movi	r2,4
    4b0c:	2025883a 	mov	r18,r4
    4b10:	b80d883a 	mov	r6,r23
    4b14:	81001704 	addi	r4,r16,92
    4b18:	000b883a 	mov	r5,zero
    4b1c:	80000015 	stw	zero,0(r16)
    4b20:	80000115 	stw	zero,4(r16)
    4b24:	80000215 	stw	zero,8(r16)
    4b28:	8080030d 	sth	r2,12(r16)
    4b2c:	80001915 	stw	zero,100(r16)
    4b30:	8000038d 	sth	zero,14(r16)
    4b34:	80000415 	stw	zero,16(r16)
    4b38:	80000515 	stw	zero,20(r16)
    4b3c:	80000615 	stw	zero,24(r16)
    4b40:	00060140 	call	6014 <memset>
    4b44:	05800034 	movhi	r22,0
    4b48:	94400217 	ldw	r17,8(r18)
    4b4c:	05400034 	movhi	r21,0
    4b50:	05000034 	movhi	r20,0
    4b54:	04c00034 	movhi	r19,0
    4b58:	b59c6304 	addi	r22,r22,29068
    4b5c:	ad5c7a04 	addi	r21,r21,29160
    4b60:	a51c9904 	addi	r20,r20,29284
    4b64:	9cdcb004 	addi	r19,r19,29376
    4b68:	85800815 	stw	r22,32(r16)
    4b6c:	85400915 	stw	r21,36(r16)
    4b70:	85000a15 	stw	r20,40(r16)
    4b74:	84c00b15 	stw	r19,44(r16)
    4b78:	84000715 	stw	r16,28(r16)
    4b7c:	00800284 	movi	r2,10
    4b80:	89001704 	addi	r4,r17,92
    4b84:	b80d883a 	mov	r6,r23
    4b88:	000b883a 	mov	r5,zero
    4b8c:	88000015 	stw	zero,0(r17)
    4b90:	88000115 	stw	zero,4(r17)
    4b94:	88000215 	stw	zero,8(r17)
    4b98:	8880030d 	sth	r2,12(r17)
    4b9c:	88001915 	stw	zero,100(r17)
    4ba0:	8f00038d 	sth	fp,14(r17)
    4ba4:	88000415 	stw	zero,16(r17)
    4ba8:	88000515 	stw	zero,20(r17)
    4bac:	88000615 	stw	zero,24(r17)
    4bb0:	00060140 	call	6014 <memset>
    4bb4:	94000317 	ldw	r16,12(r18)
    4bb8:	00800484 	movi	r2,18
    4bbc:	8c400715 	stw	r17,28(r17)
    4bc0:	8d800815 	stw	r22,32(r17)
    4bc4:	8d400915 	stw	r21,36(r17)
    4bc8:	8d000a15 	stw	r20,40(r17)
    4bcc:	8cc00b15 	stw	r19,44(r17)
    4bd0:	8080030d 	sth	r2,12(r16)
    4bd4:	00800084 	movi	r2,2
    4bd8:	80000015 	stw	zero,0(r16)
    4bdc:	80000115 	stw	zero,4(r16)
    4be0:	80000215 	stw	zero,8(r16)
    4be4:	80001915 	stw	zero,100(r16)
    4be8:	8080038d 	sth	r2,14(r16)
    4bec:	80000415 	stw	zero,16(r16)
    4bf0:	80000515 	stw	zero,20(r16)
    4bf4:	80000615 	stw	zero,24(r16)
    4bf8:	81001704 	addi	r4,r16,92
    4bfc:	000b883a 	mov	r5,zero
    4c00:	b80d883a 	mov	r6,r23
    4c04:	00060140 	call	6014 <memset>
    4c08:	84000715 	stw	r16,28(r16)
    4c0c:	85800815 	stw	r22,32(r16)
    4c10:	85400915 	stw	r21,36(r16)
    4c14:	85000a15 	stw	r20,40(r16)
    4c18:	84c00b15 	stw	r19,44(r16)
    4c1c:	dfc00917 	ldw	ra,36(sp)
    4c20:	df000817 	ldw	fp,32(sp)
    4c24:	ddc00717 	ldw	r23,28(sp)
    4c28:	dd800617 	ldw	r22,24(sp)
    4c2c:	dd400517 	ldw	r21,20(sp)
    4c30:	dd000417 	ldw	r20,16(sp)
    4c34:	dcc00317 	ldw	r19,12(sp)
    4c38:	dc800217 	ldw	r18,8(sp)
    4c3c:	dc400117 	ldw	r17,4(sp)
    4c40:	dc000017 	ldw	r16,0(sp)
    4c44:	dec00a04 	addi	sp,sp,40
    4c48:	f800283a 	ret

00004c4c <__sfmoreglue>:
    4c4c:	defffc04 	addi	sp,sp,-16
    4c50:	dc400115 	stw	r17,4(sp)
    4c54:	2c401a24 	muli	r17,r5,104
    4c58:	dc800215 	stw	r18,8(sp)
    4c5c:	2825883a 	mov	r18,r5
    4c60:	89400304 	addi	r5,r17,12
    4c64:	dc000015 	stw	r16,0(sp)
    4c68:	dfc00315 	stw	ra,12(sp)
    4c6c:	000564c0 	call	564c <_malloc_r>
    4c70:	1021883a 	mov	r16,r2
    4c74:	10000726 	beq	r2,zero,4c94 <__sfmoreglue+0x48>
    4c78:	11000304 	addi	r4,r2,12
    4c7c:	10000015 	stw	zero,0(r2)
    4c80:	14800115 	stw	r18,4(r2)
    4c84:	11000215 	stw	r4,8(r2)
    4c88:	000b883a 	mov	r5,zero
    4c8c:	880d883a 	mov	r6,r17
    4c90:	00060140 	call	6014 <memset>
    4c94:	8005883a 	mov	r2,r16
    4c98:	dfc00317 	ldw	ra,12(sp)
    4c9c:	dc800217 	ldw	r18,8(sp)
    4ca0:	dc400117 	ldw	r17,4(sp)
    4ca4:	dc000017 	ldw	r16,0(sp)
    4ca8:	dec00404 	addi	sp,sp,16
    4cac:	f800283a 	ret

00004cb0 <__sfp>:
    4cb0:	00800074 	movhi	r2,1
    4cb4:	defffb04 	addi	sp,sp,-20
    4cb8:	1085c104 	addi	r2,r2,5892
    4cbc:	dc800215 	stw	r18,8(sp)
    4cc0:	14800017 	ldw	r18,0(r2)
    4cc4:	dcc00315 	stw	r19,12(sp)
    4cc8:	dfc00415 	stw	ra,16(sp)
    4ccc:	90800e17 	ldw	r2,56(r18)
    4cd0:	dc400115 	stw	r17,4(sp)
    4cd4:	dc000015 	stw	r16,0(sp)
    4cd8:	2027883a 	mov	r19,r4
    4cdc:	1000021e 	bne	r2,zero,4ce8 <__sfp+0x38>
    4ce0:	9009883a 	mov	r4,r18
    4ce4:	0004aac0 	call	4aac <__sinit.part.1>
    4ce8:	9480b804 	addi	r18,r18,736
    4cec:	047fffc4 	movi	r17,-1
    4cf0:	91400117 	ldw	r5,4(r18)
    4cf4:	94000217 	ldw	r16,8(r18)
    4cf8:	297fffc4 	addi	r5,r5,-1
    4cfc:	28000a16 	blt	r5,zero,4d28 <__sfp+0x78>
    4d00:	8080030f 	ldh	r2,12(r16)
    4d04:	10000c26 	beq	r2,zero,4d38 <__sfp+0x88>
    4d08:	80c01d04 	addi	r3,r16,116
    4d0c:	00000206 	br	4d18 <__sfp+0x68>
    4d10:	18bfe60f 	ldh	r2,-104(r3)
    4d14:	10000826 	beq	r2,zero,4d38 <__sfp+0x88>
    4d18:	297fffc4 	addi	r5,r5,-1
    4d1c:	1c3ffd04 	addi	r16,r3,-12
    4d20:	18c01a04 	addi	r3,r3,104
    4d24:	2c7ffa1e 	bne	r5,r17,4d10 <__sfp+0x60>
    4d28:	90800017 	ldw	r2,0(r18)
    4d2c:	10001d26 	beq	r2,zero,4da4 <__sfp+0xf4>
    4d30:	1025883a 	mov	r18,r2
    4d34:	003fee06 	br	4cf0 <__sfp+0x40>
    4d38:	00bfffc4 	movi	r2,-1
    4d3c:	8080038d 	sth	r2,14(r16)
    4d40:	00800044 	movi	r2,1
    4d44:	8080030d 	sth	r2,12(r16)
    4d48:	80001915 	stw	zero,100(r16)
    4d4c:	80000015 	stw	zero,0(r16)
    4d50:	80000215 	stw	zero,8(r16)
    4d54:	80000115 	stw	zero,4(r16)
    4d58:	80000415 	stw	zero,16(r16)
    4d5c:	80000515 	stw	zero,20(r16)
    4d60:	80000615 	stw	zero,24(r16)
    4d64:	81001704 	addi	r4,r16,92
    4d68:	000b883a 	mov	r5,zero
    4d6c:	01800204 	movi	r6,8
    4d70:	00060140 	call	6014 <memset>
    4d74:	8005883a 	mov	r2,r16
    4d78:	80000c15 	stw	zero,48(r16)
    4d7c:	80000d15 	stw	zero,52(r16)
    4d80:	80001115 	stw	zero,68(r16)
    4d84:	80001215 	stw	zero,72(r16)
    4d88:	dfc00417 	ldw	ra,16(sp)
    4d8c:	dcc00317 	ldw	r19,12(sp)
    4d90:	dc800217 	ldw	r18,8(sp)
    4d94:	dc400117 	ldw	r17,4(sp)
    4d98:	dc000017 	ldw	r16,0(sp)
    4d9c:	dec00504 	addi	sp,sp,20
    4da0:	f800283a 	ret
    4da4:	9809883a 	mov	r4,r19
    4da8:	01400104 	movi	r5,4
    4dac:	0004c4c0 	call	4c4c <__sfmoreglue>
    4db0:	90800015 	stw	r2,0(r18)
    4db4:	103fde1e 	bne	r2,zero,4d30 <__sfp+0x80>
    4db8:	00800304 	movi	r2,12
    4dbc:	98800015 	stw	r2,0(r19)
    4dc0:	0005883a 	mov	r2,zero
    4dc4:	003ff006 	br	4d88 <__sfp+0xd8>

00004dc8 <_cleanup>:
    4dc8:	00800074 	movhi	r2,1
    4dcc:	1085c104 	addi	r2,r2,5892
    4dd0:	11000017 	ldw	r4,0(r2)
    4dd4:	01400074 	movhi	r5,1
    4dd8:	2962c304 	addi	r5,r5,-29940
    4ddc:	00052441 	jmpi	5244 <_fwalk>

00004de0 <__sinit>:
    4de0:	20800e17 	ldw	r2,56(r4)
    4de4:	10000126 	beq	r2,zero,4dec <__sinit+0xc>
    4de8:	f800283a 	ret
    4dec:	0004aac1 	jmpi	4aac <__sinit.part.1>

00004df0 <__sfp_lock_acquire>:
    4df0:	f800283a 	ret

00004df4 <__sfp_lock_release>:
    4df4:	f800283a 	ret

00004df8 <__sinit_lock_acquire>:
    4df8:	f800283a 	ret

00004dfc <__sinit_lock_release>:
    4dfc:	f800283a 	ret

00004e00 <__fp_lock_all>:
    4e00:	00800074 	movhi	r2,1
    4e04:	1085c204 	addi	r2,r2,5896
    4e08:	11000017 	ldw	r4,0(r2)
    4e0c:	01400034 	movhi	r5,0
    4e10:	2952a404 	addi	r5,r5,19088
    4e14:	00052441 	jmpi	5244 <_fwalk>

00004e18 <__fp_unlock_all>:
    4e18:	00800074 	movhi	r2,1
    4e1c:	1085c204 	addi	r2,r2,5896
    4e20:	11000017 	ldw	r4,0(r2)
    4e24:	01400034 	movhi	r5,0
    4e28:	2952a604 	addi	r5,r5,19096
    4e2c:	00052441 	jmpi	5244 <_fwalk>

00004e30 <_malloc_trim_r>:
    4e30:	defffb04 	addi	sp,sp,-20
    4e34:	dcc00315 	stw	r19,12(sp)
    4e38:	04c00074 	movhi	r19,1
    4e3c:	dc800215 	stw	r18,8(sp)
    4e40:	dc400115 	stw	r17,4(sp)
    4e44:	dc000015 	stw	r16,0(sp)
    4e48:	dfc00415 	stw	ra,16(sp)
    4e4c:	2821883a 	mov	r16,r5
    4e50:	9cc03d04 	addi	r19,r19,244
    4e54:	2025883a 	mov	r18,r4
    4e58:	000d5ac0 	call	d5ac <__malloc_lock>
    4e5c:	98800217 	ldw	r2,8(r19)
    4e60:	14400117 	ldw	r17,4(r2)
    4e64:	00bfff04 	movi	r2,-4
    4e68:	88a2703a 	and	r17,r17,r2
    4e6c:	8c21c83a 	sub	r16,r17,r16
    4e70:	8403fbc4 	addi	r16,r16,4079
    4e74:	8020d33a 	srli	r16,r16,12
    4e78:	0083ffc4 	movi	r2,4095
    4e7c:	843fffc4 	addi	r16,r16,-1
    4e80:	8020933a 	slli	r16,r16,12
    4e84:	1400060e 	bge	r2,r16,4ea0 <_malloc_trim_r+0x70>
    4e88:	9009883a 	mov	r4,r18
    4e8c:	000b883a 	mov	r5,zero
    4e90:	00071380 	call	7138 <_sbrk_r>
    4e94:	98c00217 	ldw	r3,8(r19)
    4e98:	1c47883a 	add	r3,r3,r17
    4e9c:	10c00a26 	beq	r2,r3,4ec8 <_malloc_trim_r+0x98>
    4ea0:	9009883a 	mov	r4,r18
    4ea4:	000d5cc0 	call	d5cc <__malloc_unlock>
    4ea8:	0005883a 	mov	r2,zero
    4eac:	dfc00417 	ldw	ra,16(sp)
    4eb0:	dcc00317 	ldw	r19,12(sp)
    4eb4:	dc800217 	ldw	r18,8(sp)
    4eb8:	dc400117 	ldw	r17,4(sp)
    4ebc:	dc000017 	ldw	r16,0(sp)
    4ec0:	dec00504 	addi	sp,sp,20
    4ec4:	f800283a 	ret
    4ec8:	9009883a 	mov	r4,r18
    4ecc:	040bc83a 	sub	r5,zero,r16
    4ed0:	00071380 	call	7138 <_sbrk_r>
    4ed4:	00ffffc4 	movi	r3,-1
    4ed8:	10c00d26 	beq	r2,r3,4f10 <_malloc_trim_r+0xe0>
    4edc:	00c00074 	movhi	r3,1
    4ee0:	18cc9a04 	addi	r3,r3,12904
    4ee4:	18800017 	ldw	r2,0(r3)
    4ee8:	99000217 	ldw	r4,8(r19)
    4eec:	8c23c83a 	sub	r17,r17,r16
    4ef0:	8c400054 	ori	r17,r17,1
    4ef4:	1421c83a 	sub	r16,r2,r16
    4ef8:	24400115 	stw	r17,4(r4)
    4efc:	9009883a 	mov	r4,r18
    4f00:	1c000015 	stw	r16,0(r3)
    4f04:	000d5cc0 	call	d5cc <__malloc_unlock>
    4f08:	00800044 	movi	r2,1
    4f0c:	003fe706 	br	4eac <_malloc_trim_r+0x7c>
    4f10:	9009883a 	mov	r4,r18
    4f14:	000b883a 	mov	r5,zero
    4f18:	00071380 	call	7138 <_sbrk_r>
    4f1c:	99000217 	ldw	r4,8(r19)
    4f20:	014003c4 	movi	r5,15
    4f24:	1107c83a 	sub	r3,r2,r4
    4f28:	28ffdd0e 	bge	r5,r3,4ea0 <_malloc_trim_r+0x70>
    4f2c:	01400074 	movhi	r5,1
    4f30:	2945c404 	addi	r5,r5,5904
    4f34:	29400017 	ldw	r5,0(r5)
    4f38:	18c00054 	ori	r3,r3,1
    4f3c:	20c00115 	stw	r3,4(r4)
    4f40:	00c00074 	movhi	r3,1
    4f44:	1145c83a 	sub	r2,r2,r5
    4f48:	18cc9a04 	addi	r3,r3,12904
    4f4c:	18800015 	stw	r2,0(r3)
    4f50:	003fd306 	br	4ea0 <_malloc_trim_r+0x70>

00004f54 <_free_r>:
    4f54:	28004c26 	beq	r5,zero,5088 <_free_r+0x134>
    4f58:	defffd04 	addi	sp,sp,-12
    4f5c:	dc400115 	stw	r17,4(sp)
    4f60:	dc000015 	stw	r16,0(sp)
    4f64:	2023883a 	mov	r17,r4
    4f68:	2821883a 	mov	r16,r5
    4f6c:	dfc00215 	stw	ra,8(sp)
    4f70:	000d5ac0 	call	d5ac <__malloc_lock>
    4f74:	813fff17 	ldw	r4,-4(r16)
    4f78:	00bfff84 	movi	r2,-2
    4f7c:	02400074 	movhi	r9,1
    4f80:	81bffe04 	addi	r6,r16,-8
    4f84:	2084703a 	and	r2,r4,r2
    4f88:	4a403d04 	addi	r9,r9,244
    4f8c:	308b883a 	add	r5,r6,r2
    4f90:	2a000117 	ldw	r8,4(r5)
    4f94:	49c00217 	ldw	r7,8(r9)
    4f98:	00ffff04 	movi	r3,-4
    4f9c:	40c6703a 	and	r3,r8,r3
    4fa0:	39405326 	beq	r7,r5,50f0 <_free_r+0x19c>
    4fa4:	28c00115 	stw	r3,4(r5)
    4fa8:	2100004c 	andi	r4,r4,1
    4fac:	2000091e 	bne	r4,zero,4fd4 <_free_r+0x80>
    4fb0:	81fffe17 	ldw	r7,-8(r16)
    4fb4:	4a000204 	addi	r8,r9,8
    4fb8:	31cdc83a 	sub	r6,r6,r7
    4fbc:	31000217 	ldw	r4,8(r6)
    4fc0:	11c5883a 	add	r2,r2,r7
    4fc4:	22006126 	beq	r4,r8,514c <_free_r+0x1f8>
    4fc8:	31c00317 	ldw	r7,12(r6)
    4fcc:	21c00315 	stw	r7,12(r4)
    4fd0:	39000215 	stw	r4,8(r7)
    4fd4:	28c9883a 	add	r4,r5,r3
    4fd8:	21c00117 	ldw	r7,4(r4)
    4fdc:	39c0004c 	andi	r7,r7,1
    4fe0:	38000d1e 	bne	r7,zero,5018 <_free_r+0xc4>
    4fe4:	29000217 	ldw	r4,8(r5)
    4fe8:	10c5883a 	add	r2,r2,r3
    4fec:	00c00074 	movhi	r3,1
    4ff0:	18c03f04 	addi	r3,r3,252
    4ff4:	20c07526 	beq	r4,r3,51cc <_free_r+0x278>
    4ff8:	29c00317 	ldw	r7,12(r5)
    4ffc:	11400054 	ori	r5,r2,1
    5000:	3087883a 	add	r3,r6,r2
    5004:	21c00315 	stw	r7,12(r4)
    5008:	39000215 	stw	r4,8(r7)
    500c:	31400115 	stw	r5,4(r6)
    5010:	18800015 	stw	r2,0(r3)
    5014:	00000406 	br	5028 <_free_r+0xd4>
    5018:	10c00054 	ori	r3,r2,1
    501c:	30c00115 	stw	r3,4(r6)
    5020:	3087883a 	add	r3,r6,r2
    5024:	18800015 	stw	r2,0(r3)
    5028:	00c07fc4 	movi	r3,511
    502c:	18801736 	bltu	r3,r2,508c <_free_r+0x138>
    5030:	1004d0fa 	srli	r2,r2,3
    5034:	01400044 	movi	r5,1
    5038:	49000117 	ldw	r4,4(r9)
    503c:	1087883a 	add	r3,r2,r2
    5040:	18c7883a 	add	r3,r3,r3
    5044:	1005d0ba 	srai	r2,r2,2
    5048:	18c7883a 	add	r3,r3,r3
    504c:	1a47883a 	add	r3,r3,r9
    5050:	19c00217 	ldw	r7,8(r3)
    5054:	2884983a 	sll	r2,r5,r2
    5058:	30c00315 	stw	r3,12(r6)
    505c:	31c00215 	stw	r7,8(r6)
    5060:	1104b03a 	or	r2,r2,r4
    5064:	19800215 	stw	r6,8(r3)
    5068:	48800115 	stw	r2,4(r9)
    506c:	39800315 	stw	r6,12(r7)
    5070:	8809883a 	mov	r4,r17
    5074:	dfc00217 	ldw	ra,8(sp)
    5078:	dc400117 	ldw	r17,4(sp)
    507c:	dc000017 	ldw	r16,0(sp)
    5080:	dec00304 	addi	sp,sp,12
    5084:	000d5cc1 	jmpi	d5cc <__malloc_unlock>
    5088:	f800283a 	ret
    508c:	1006d27a 	srli	r3,r2,9
    5090:	01000104 	movi	r4,4
    5094:	20c04036 	bltu	r4,r3,5198 <_free_r+0x244>
    5098:	1006d1ba 	srli	r3,r2,6
    509c:	19400e04 	addi	r5,r3,56
    50a0:	2947883a 	add	r3,r5,r5
    50a4:	18c7883a 	add	r3,r3,r3
    50a8:	18c7883a 	add	r3,r3,r3
    50ac:	1a49883a 	add	r4,r3,r9
    50b0:	20c00217 	ldw	r3,8(r4)
    50b4:	01c00074 	movhi	r7,1
    50b8:	39c03d04 	addi	r7,r7,244
    50bc:	19003b26 	beq	r3,r4,51ac <_free_r+0x258>
    50c0:	01ffff04 	movi	r7,-4
    50c4:	19400117 	ldw	r5,4(r3)
    50c8:	29ca703a 	and	r5,r5,r7
    50cc:	1140022e 	bgeu	r2,r5,50d8 <_free_r+0x184>
    50d0:	18c00217 	ldw	r3,8(r3)
    50d4:	20fffb1e 	bne	r4,r3,50c4 <_free_r+0x170>
    50d8:	18800317 	ldw	r2,12(r3)
    50dc:	30800315 	stw	r2,12(r6)
    50e0:	30c00215 	stw	r3,8(r6)
    50e4:	11800215 	stw	r6,8(r2)
    50e8:	19800315 	stw	r6,12(r3)
    50ec:	003fe006 	br	5070 <_free_r+0x11c>
    50f0:	2100004c 	andi	r4,r4,1
    50f4:	1885883a 	add	r2,r3,r2
    50f8:	2000071e 	bne	r4,zero,5118 <_free_r+0x1c4>
    50fc:	817ffe17 	ldw	r5,-8(r16)
    5100:	314dc83a 	sub	r6,r6,r5
    5104:	30c00317 	ldw	r3,12(r6)
    5108:	31000217 	ldw	r4,8(r6)
    510c:	1145883a 	add	r2,r2,r5
    5110:	20c00315 	stw	r3,12(r4)
    5114:	19000215 	stw	r4,8(r3)
    5118:	10c00054 	ori	r3,r2,1
    511c:	30c00115 	stw	r3,4(r6)
    5120:	00c00074 	movhi	r3,1
    5124:	18c5c504 	addi	r3,r3,5908
    5128:	18c00017 	ldw	r3,0(r3)
    512c:	49800215 	stw	r6,8(r9)
    5130:	10ffcf36 	bltu	r2,r3,5070 <_free_r+0x11c>
    5134:	00800074 	movhi	r2,1
    5138:	108c9204 	addi	r2,r2,12872
    513c:	11400017 	ldw	r5,0(r2)
    5140:	8809883a 	mov	r4,r17
    5144:	0004e300 	call	4e30 <_malloc_trim_r>
    5148:	003fc906 	br	5070 <_free_r+0x11c>
    514c:	28c9883a 	add	r4,r5,r3
    5150:	21000117 	ldw	r4,4(r4)
    5154:	2100004c 	andi	r4,r4,1
    5158:	20000a1e 	bne	r4,zero,5184 <_free_r+0x230>
    515c:	29000317 	ldw	r4,12(r5)
    5160:	29400217 	ldw	r5,8(r5)
    5164:	10c5883a 	add	r2,r2,r3
    5168:	10c00054 	ori	r3,r2,1
    516c:	29000315 	stw	r4,12(r5)
    5170:	21400215 	stw	r5,8(r4)
    5174:	30c00115 	stw	r3,4(r6)
    5178:	308d883a 	add	r6,r6,r2
    517c:	30800015 	stw	r2,0(r6)
    5180:	003fbb06 	br	5070 <_free_r+0x11c>
    5184:	10c00054 	ori	r3,r2,1
    5188:	30c00115 	stw	r3,4(r6)
    518c:	308d883a 	add	r6,r6,r2
    5190:	30800015 	stw	r2,0(r6)
    5194:	003fb606 	br	5070 <_free_r+0x11c>
    5198:	01000504 	movi	r4,20
    519c:	20c01436 	bltu	r4,r3,51f0 <_free_r+0x29c>
    51a0:	194016c4 	addi	r5,r3,91
    51a4:	2947883a 	add	r3,r5,r5
    51a8:	003fbe06 	br	50a4 <_free_r+0x150>
    51ac:	280bd0ba 	srai	r5,r5,2
    51b0:	00800044 	movi	r2,1
    51b4:	39000117 	ldw	r4,4(r7)
    51b8:	114a983a 	sll	r5,r2,r5
    51bc:	1805883a 	mov	r2,r3
    51c0:	2908b03a 	or	r4,r5,r4
    51c4:	39000115 	stw	r4,4(r7)
    51c8:	003fc406 	br	50dc <_free_r+0x188>
    51cc:	49800515 	stw	r6,20(r9)
    51d0:	49800415 	stw	r6,16(r9)
    51d4:	10c00054 	ori	r3,r2,1
    51d8:	31000315 	stw	r4,12(r6)
    51dc:	31000215 	stw	r4,8(r6)
    51e0:	30c00115 	stw	r3,4(r6)
    51e4:	308d883a 	add	r6,r6,r2
    51e8:	30800015 	stw	r2,0(r6)
    51ec:	003fa006 	br	5070 <_free_r+0x11c>
    51f0:	01001504 	movi	r4,84
    51f4:	20c00436 	bltu	r4,r3,5208 <_free_r+0x2b4>
    51f8:	1006d33a 	srli	r3,r2,12
    51fc:	19401b84 	addi	r5,r3,110
    5200:	2947883a 	add	r3,r5,r5
    5204:	003fa706 	br	50a4 <_free_r+0x150>
    5208:	01005504 	movi	r4,340
    520c:	20c00436 	bltu	r4,r3,5220 <_free_r+0x2cc>
    5210:	1006d3fa 	srli	r3,r2,15
    5214:	19401dc4 	addi	r5,r3,119
    5218:	2947883a 	add	r3,r5,r5
    521c:	003fa106 	br	50a4 <_free_r+0x150>
    5220:	01015504 	movi	r4,1364
    5224:	20c00436 	bltu	r4,r3,5238 <_free_r+0x2e4>
    5228:	1006d4ba 	srli	r3,r2,18
    522c:	19401f04 	addi	r5,r3,124
    5230:	2947883a 	add	r3,r5,r5
    5234:	003f9b06 	br	50a4 <_free_r+0x150>
    5238:	00c03f04 	movi	r3,252
    523c:	01401f84 	movi	r5,126
    5240:	003f9806 	br	50a4 <_free_r+0x150>

00005244 <_fwalk>:
    5244:	defff804 	addi	sp,sp,-32
    5248:	dd400515 	stw	r21,20(sp)
    524c:	2540b804 	addi	r21,r4,736
    5250:	dd800615 	stw	r22,24(sp)
    5254:	dd000415 	stw	r20,16(sp)
    5258:	dfc00715 	stw	ra,28(sp)
    525c:	dcc00315 	stw	r19,12(sp)
    5260:	dc800215 	stw	r18,8(sp)
    5264:	dc400115 	stw	r17,4(sp)
    5268:	dc000015 	stw	r16,0(sp)
    526c:	2829883a 	mov	r20,r5
    5270:	002d883a 	mov	r22,zero
    5274:	0004df00 	call	4df0 <__sfp_lock_acquire>
    5278:	a8001426 	beq	r21,zero,52cc <_fwalk+0x88>
    527c:	04ffffc4 	movi	r19,-1
    5280:	ac400117 	ldw	r17,4(r21)
    5284:	ac800217 	ldw	r18,8(r21)
    5288:	8c7fffc4 	addi	r17,r17,-1
    528c:	88000d16 	blt	r17,zero,52c4 <_fwalk+0x80>
    5290:	94000304 	addi	r16,r18,12
    5294:	94800384 	addi	r18,r18,14
    5298:	80c0000f 	ldh	r3,0(r16)
    529c:	8c7fffc4 	addi	r17,r17,-1
    52a0:	813ffd04 	addi	r4,r16,-12
    52a4:	18000426 	beq	r3,zero,52b8 <_fwalk+0x74>
    52a8:	90c0000f 	ldh	r3,0(r18)
    52ac:	1cc00226 	beq	r3,r19,52b8 <_fwalk+0x74>
    52b0:	a03ee83a 	callr	r20
    52b4:	b0acb03a 	or	r22,r22,r2
    52b8:	84001a04 	addi	r16,r16,104
    52bc:	94801a04 	addi	r18,r18,104
    52c0:	8cfff51e 	bne	r17,r19,5298 <_fwalk+0x54>
    52c4:	ad400017 	ldw	r21,0(r21)
    52c8:	a83fed1e 	bne	r21,zero,5280 <_fwalk+0x3c>
    52cc:	0004df40 	call	4df4 <__sfp_lock_release>
    52d0:	b005883a 	mov	r2,r22
    52d4:	dfc00717 	ldw	ra,28(sp)
    52d8:	dd800617 	ldw	r22,24(sp)
    52dc:	dd400517 	ldw	r21,20(sp)
    52e0:	dd000417 	ldw	r20,16(sp)
    52e4:	dcc00317 	ldw	r19,12(sp)
    52e8:	dc800217 	ldw	r18,8(sp)
    52ec:	dc400117 	ldw	r17,4(sp)
    52f0:	dc000017 	ldw	r16,0(sp)
    52f4:	dec00804 	addi	sp,sp,32
    52f8:	f800283a 	ret

000052fc <_fwalk_reent>:
    52fc:	defff804 	addi	sp,sp,-32
    5300:	dd400515 	stw	r21,20(sp)
    5304:	2540b804 	addi	r21,r4,736
    5308:	dd800615 	stw	r22,24(sp)
    530c:	dd000415 	stw	r20,16(sp)
    5310:	dcc00315 	stw	r19,12(sp)
    5314:	dfc00715 	stw	ra,28(sp)
    5318:	dc800215 	stw	r18,8(sp)
    531c:	dc400115 	stw	r17,4(sp)
    5320:	dc000015 	stw	r16,0(sp)
    5324:	2027883a 	mov	r19,r4
    5328:	2829883a 	mov	r20,r5
    532c:	002d883a 	mov	r22,zero
    5330:	0004df00 	call	4df0 <__sfp_lock_acquire>
    5334:	a8001326 	beq	r21,zero,5384 <_fwalk_reent+0x88>
    5338:	04bfffc4 	movi	r18,-1
    533c:	ac400117 	ldw	r17,4(r21)
    5340:	ac000217 	ldw	r16,8(r21)
    5344:	8c7fffc4 	addi	r17,r17,-1
    5348:	88000c16 	blt	r17,zero,537c <_fwalk_reent+0x80>
    534c:	84000304 	addi	r16,r16,12
    5350:	80c0000f 	ldh	r3,0(r16)
    5354:	8c7fffc4 	addi	r17,r17,-1
    5358:	817ffd04 	addi	r5,r16,-12
    535c:	18000526 	beq	r3,zero,5374 <_fwalk_reent+0x78>
    5360:	80c0008f 	ldh	r3,2(r16)
    5364:	9809883a 	mov	r4,r19
    5368:	1c800226 	beq	r3,r18,5374 <_fwalk_reent+0x78>
    536c:	a03ee83a 	callr	r20
    5370:	b0acb03a 	or	r22,r22,r2
    5374:	84001a04 	addi	r16,r16,104
    5378:	8cbff51e 	bne	r17,r18,5350 <_fwalk_reent+0x54>
    537c:	ad400017 	ldw	r21,0(r21)
    5380:	a83fee1e 	bne	r21,zero,533c <_fwalk_reent+0x40>
    5384:	0004df40 	call	4df4 <__sfp_lock_release>
    5388:	b005883a 	mov	r2,r22
    538c:	dfc00717 	ldw	ra,28(sp)
    5390:	dd800617 	ldw	r22,24(sp)
    5394:	dd400517 	ldw	r21,20(sp)
    5398:	dd000417 	ldw	r20,16(sp)
    539c:	dcc00317 	ldw	r19,12(sp)
    53a0:	dc800217 	ldw	r18,8(sp)
    53a4:	dc400117 	ldw	r17,4(sp)
    53a8:	dc000017 	ldw	r16,0(sp)
    53ac:	dec00804 	addi	sp,sp,32
    53b0:	f800283a 	ret

000053b4 <_setlocale_r>:
    53b4:	30001b26 	beq	r6,zero,5424 <_setlocale_r+0x70>
    53b8:	01400074 	movhi	r5,1
    53bc:	defffe04 	addi	sp,sp,-8
    53c0:	297e7704 	addi	r5,r5,-1572
    53c4:	3009883a 	mov	r4,r6
    53c8:	dc000015 	stw	r16,0(sp)
    53cc:	dfc00115 	stw	ra,4(sp)
    53d0:	3021883a 	mov	r16,r6
    53d4:	00072c80 	call	72c8 <strcmp>
    53d8:	1000061e 	bne	r2,zero,53f4 <_setlocale_r+0x40>
    53dc:	00800074 	movhi	r2,1
    53e0:	10be7604 	addi	r2,r2,-1576
    53e4:	dfc00117 	ldw	ra,4(sp)
    53e8:	dc000017 	ldw	r16,0(sp)
    53ec:	dec00204 	addi	sp,sp,8
    53f0:	f800283a 	ret
    53f4:	01400074 	movhi	r5,1
    53f8:	297e7604 	addi	r5,r5,-1576
    53fc:	8009883a 	mov	r4,r16
    5400:	00072c80 	call	72c8 <strcmp>
    5404:	103ff526 	beq	r2,zero,53dc <_setlocale_r+0x28>
    5408:	01400074 	movhi	r5,1
    540c:	297e6104 	addi	r5,r5,-1660
    5410:	8009883a 	mov	r4,r16
    5414:	00072c80 	call	72c8 <strcmp>
    5418:	103ff026 	beq	r2,zero,53dc <_setlocale_r+0x28>
    541c:	0005883a 	mov	r2,zero
    5420:	003ff006 	br	53e4 <_setlocale_r+0x30>
    5424:	00800074 	movhi	r2,1
    5428:	10be7604 	addi	r2,r2,-1576
    542c:	f800283a 	ret

00005430 <__locale_charset>:
    5430:	00800074 	movhi	r2,1
    5434:	10802704 	addi	r2,r2,156
    5438:	f800283a 	ret

0000543c <__locale_mb_cur_max>:
    543c:	00800074 	movhi	r2,1
    5440:	1085c304 	addi	r2,r2,5900
    5444:	10800017 	ldw	r2,0(r2)
    5448:	f800283a 	ret

0000544c <__locale_msgcharset>:
    544c:	00800074 	movhi	r2,1
    5450:	10801f04 	addi	r2,r2,124
    5454:	f800283a 	ret

00005458 <__locale_cjk_lang>:
    5458:	0005883a 	mov	r2,zero
    545c:	f800283a 	ret

00005460 <_localeconv_r>:
    5460:	00800074 	movhi	r2,1
    5464:	10802f04 	addi	r2,r2,188
    5468:	f800283a 	ret

0000546c <setlocale>:
    546c:	00c00074 	movhi	r3,1
    5470:	18c5c204 	addi	r3,r3,5896
    5474:	2005883a 	mov	r2,r4
    5478:	19000017 	ldw	r4,0(r3)
    547c:	280d883a 	mov	r6,r5
    5480:	100b883a 	mov	r5,r2
    5484:	00053b41 	jmpi	53b4 <_setlocale_r>

00005488 <localeconv>:
    5488:	00800074 	movhi	r2,1
    548c:	10802f04 	addi	r2,r2,188
    5490:	f800283a 	ret

00005494 <__smakebuf_r>:
    5494:	2880030b 	ldhu	r2,12(r5)
    5498:	10c0008c 	andi	r3,r2,2
    549c:	1800401e 	bne	r3,zero,55a0 <__smakebuf_r+0x10c>
    54a0:	deffec04 	addi	sp,sp,-80
    54a4:	dc000f15 	stw	r16,60(sp)
    54a8:	2821883a 	mov	r16,r5
    54ac:	2940038f 	ldh	r5,14(r5)
    54b0:	dc401015 	stw	r17,64(sp)
    54b4:	dfc01315 	stw	ra,76(sp)
    54b8:	dcc01215 	stw	r19,72(sp)
    54bc:	dc801115 	stw	r18,68(sp)
    54c0:	2023883a 	mov	r17,r4
    54c4:	28001b16 	blt	r5,zero,5534 <__smakebuf_r+0xa0>
    54c8:	d80d883a 	mov	r6,sp
    54cc:	0008cfc0 	call	8cfc <_fstat_r>
    54d0:	10001716 	blt	r2,zero,5530 <__smakebuf_r+0x9c>
    54d4:	d8800117 	ldw	r2,4(sp)
    54d8:	00e00014 	movui	r3,32768
    54dc:	10bc000c 	andi	r2,r2,61440
    54e0:	10c03726 	beq	r2,r3,55c0 <__smakebuf_r+0x12c>
    54e4:	80c0030b 	ldhu	r3,12(r16)
    54e8:	18c20014 	ori	r3,r3,2048
    54ec:	80c0030d 	sth	r3,12(r16)
    54f0:	00c80004 	movi	r3,8192
    54f4:	10c03c1e 	bne	r2,r3,55e8 <__smakebuf_r+0x154>
    54f8:	8140038f 	ldh	r5,14(r16)
    54fc:	8809883a 	mov	r4,r17
    5500:	00091f80 	call	91f8 <_isatty_r>
    5504:	10004e26 	beq	r2,zero,5640 <__smakebuf_r+0x1ac>
    5508:	8080030b 	ldhu	r2,12(r16)
    550c:	04c00044 	movi	r19,1
    5510:	80c010c4 	addi	r3,r16,67
    5514:	14c4b03a 	or	r2,r2,r19
    5518:	8080030d 	sth	r2,12(r16)
    551c:	80c00015 	stw	r3,0(r16)
    5520:	80c00415 	stw	r3,16(r16)
    5524:	84c00515 	stw	r19,20(r16)
    5528:	04810004 	movi	r18,1024
    552c:	00000706 	br	554c <__smakebuf_r+0xb8>
    5530:	8080030b 	ldhu	r2,12(r16)
    5534:	10c0200c 	andi	r3,r2,128
    5538:	18001f1e 	bne	r3,zero,55b8 <__smakebuf_r+0x124>
    553c:	04810004 	movi	r18,1024
    5540:	10820014 	ori	r2,r2,2048
    5544:	8080030d 	sth	r2,12(r16)
    5548:	0027883a 	mov	r19,zero
    554c:	8809883a 	mov	r4,r17
    5550:	900b883a 	mov	r5,r18
    5554:	000564c0 	call	564c <_malloc_r>
    5558:	10002e26 	beq	r2,zero,5614 <__smakebuf_r+0x180>
    555c:	80c0030b 	ldhu	r3,12(r16)
    5560:	01000034 	movhi	r4,0
    5564:	2112a804 	addi	r4,r4,19104
    5568:	89000f15 	stw	r4,60(r17)
    556c:	18c02014 	ori	r3,r3,128
    5570:	80c0030d 	sth	r3,12(r16)
    5574:	80800015 	stw	r2,0(r16)
    5578:	80800415 	stw	r2,16(r16)
    557c:	84800515 	stw	r18,20(r16)
    5580:	98001c1e 	bne	r19,zero,55f4 <__smakebuf_r+0x160>
    5584:	dfc01317 	ldw	ra,76(sp)
    5588:	dcc01217 	ldw	r19,72(sp)
    558c:	dc801117 	ldw	r18,68(sp)
    5590:	dc401017 	ldw	r17,64(sp)
    5594:	dc000f17 	ldw	r16,60(sp)
    5598:	dec01404 	addi	sp,sp,80
    559c:	f800283a 	ret
    55a0:	288010c4 	addi	r2,r5,67
    55a4:	28800015 	stw	r2,0(r5)
    55a8:	28800415 	stw	r2,16(r5)
    55ac:	00800044 	movi	r2,1
    55b0:	28800515 	stw	r2,20(r5)
    55b4:	f800283a 	ret
    55b8:	04801004 	movi	r18,64
    55bc:	003fe006 	br	5540 <__smakebuf_r+0xac>
    55c0:	81000a17 	ldw	r4,40(r16)
    55c4:	00c00034 	movhi	r3,0
    55c8:	18dc9904 	addi	r3,r3,29284
    55cc:	20ffc51e 	bne	r4,r3,54e4 <__smakebuf_r+0x50>
    55d0:	80c0030b 	ldhu	r3,12(r16)
    55d4:	01010004 	movi	r4,1024
    55d8:	81001315 	stw	r4,76(r16)
    55dc:	1906b03a 	or	r3,r3,r4
    55e0:	80c0030d 	sth	r3,12(r16)
    55e4:	003fc206 	br	54f0 <__smakebuf_r+0x5c>
    55e8:	0027883a 	mov	r19,zero
    55ec:	04810004 	movi	r18,1024
    55f0:	003fd606 	br	554c <__smakebuf_r+0xb8>
    55f4:	8140038f 	ldh	r5,14(r16)
    55f8:	8809883a 	mov	r4,r17
    55fc:	00091f80 	call	91f8 <_isatty_r>
    5600:	103fe026 	beq	r2,zero,5584 <__smakebuf_r+0xf0>
    5604:	8080030b 	ldhu	r2,12(r16)
    5608:	10800054 	ori	r2,r2,1
    560c:	8080030d 	sth	r2,12(r16)
    5610:	003fdc06 	br	5584 <__smakebuf_r+0xf0>
    5614:	8080030b 	ldhu	r2,12(r16)
    5618:	10c0800c 	andi	r3,r2,512
    561c:	183fd91e 	bne	r3,zero,5584 <__smakebuf_r+0xf0>
    5620:	10800094 	ori	r2,r2,2
    5624:	80c010c4 	addi	r3,r16,67
    5628:	8080030d 	sth	r2,12(r16)
    562c:	00800044 	movi	r2,1
    5630:	80c00015 	stw	r3,0(r16)
    5634:	80c00415 	stw	r3,16(r16)
    5638:	80800515 	stw	r2,20(r16)
    563c:	003fd106 	br	5584 <__smakebuf_r+0xf0>
    5640:	04c00044 	movi	r19,1
    5644:	04810004 	movi	r18,1024
    5648:	003fc006 	br	554c <__smakebuf_r+0xb8>

0000564c <_malloc_r>:
    564c:	defff504 	addi	sp,sp,-44
    5650:	dc800315 	stw	r18,12(sp)
    5654:	dfc00a15 	stw	ra,40(sp)
    5658:	df000915 	stw	fp,36(sp)
    565c:	ddc00815 	stw	r23,32(sp)
    5660:	dd800715 	stw	r22,28(sp)
    5664:	dd400615 	stw	r21,24(sp)
    5668:	dd000515 	stw	r20,20(sp)
    566c:	dcc00415 	stw	r19,16(sp)
    5670:	dc400215 	stw	r17,8(sp)
    5674:	dc000115 	stw	r16,4(sp)
    5678:	288002c4 	addi	r2,r5,11
    567c:	00c00584 	movi	r3,22
    5680:	2025883a 	mov	r18,r4
    5684:	18802a2e 	bgeu	r3,r2,5730 <_malloc_r+0xe4>
    5688:	047ffe04 	movi	r17,-8
    568c:	1462703a 	and	r17,r2,r17
    5690:	88009e16 	blt	r17,zero,590c <_malloc_r+0x2c0>
    5694:	89409d36 	bltu	r17,r5,590c <_malloc_r+0x2c0>
    5698:	000d5ac0 	call	d5ac <__malloc_lock>
    569c:	00807dc4 	movi	r2,503
    56a0:	14402736 	bltu	r2,r17,5740 <_malloc_r+0xf4>
    56a4:	8806d0fa 	srli	r3,r17,3
    56a8:	04c00074 	movhi	r19,1
    56ac:	9cc03d04 	addi	r19,r19,244
    56b0:	18c5883a 	add	r2,r3,r3
    56b4:	1085883a 	add	r2,r2,r2
    56b8:	1085883a 	add	r2,r2,r2
    56bc:	9885883a 	add	r2,r19,r2
    56c0:	14000317 	ldw	r16,12(r2)
    56c4:	80814a26 	beq	r16,r2,5bf0 <_malloc_r+0x5a4>
    56c8:	80c00117 	ldw	r3,4(r16)
    56cc:	81000317 	ldw	r4,12(r16)
    56d0:	00bfff04 	movi	r2,-4
    56d4:	1884703a 	and	r2,r3,r2
    56d8:	81400217 	ldw	r5,8(r16)
    56dc:	8085883a 	add	r2,r16,r2
    56e0:	10c00117 	ldw	r3,4(r2)
    56e4:	29000315 	stw	r4,12(r5)
    56e8:	21400215 	stw	r5,8(r4)
    56ec:	18c00054 	ori	r3,r3,1
    56f0:	10c00115 	stw	r3,4(r2)
    56f4:	9009883a 	mov	r4,r18
    56f8:	000d5cc0 	call	d5cc <__malloc_unlock>
    56fc:	80800204 	addi	r2,r16,8
    5700:	dfc00a17 	ldw	ra,40(sp)
    5704:	df000917 	ldw	fp,36(sp)
    5708:	ddc00817 	ldw	r23,32(sp)
    570c:	dd800717 	ldw	r22,28(sp)
    5710:	dd400617 	ldw	r21,24(sp)
    5714:	dd000517 	ldw	r20,20(sp)
    5718:	dcc00417 	ldw	r19,16(sp)
    571c:	dc800317 	ldw	r18,12(sp)
    5720:	dc400217 	ldw	r17,8(sp)
    5724:	dc000117 	ldw	r16,4(sp)
    5728:	dec00b04 	addi	sp,sp,44
    572c:	f800283a 	ret
    5730:	04400404 	movi	r17,16
    5734:	89407536 	bltu	r17,r5,590c <_malloc_r+0x2c0>
    5738:	000d5ac0 	call	d5ac <__malloc_lock>
    573c:	003fd906 	br	56a4 <_malloc_r+0x58>
    5740:	8806d27a 	srli	r3,r17,9
    5744:	18007526 	beq	r3,zero,591c <_malloc_r+0x2d0>
    5748:	00800104 	movi	r2,4
    574c:	10c0ef36 	bltu	r2,r3,5b0c <_malloc_r+0x4c0>
    5750:	8806d1ba 	srli	r3,r17,6
    5754:	19c00e04 	addi	r7,r3,56
    5758:	39cb883a 	add	r5,r7,r7
    575c:	04c00074 	movhi	r19,1
    5760:	294b883a 	add	r5,r5,r5
    5764:	9cc03d04 	addi	r19,r19,244
    5768:	294b883a 	add	r5,r5,r5
    576c:	994b883a 	add	r5,r19,r5
    5770:	2c000317 	ldw	r16,12(r5)
    5774:	2c000e26 	beq	r5,r16,57b0 <_malloc_r+0x164>
    5778:	80800117 	ldw	r2,4(r16)
    577c:	01bfff04 	movi	r6,-4
    5780:	010003c4 	movi	r4,15
    5784:	1184703a 	and	r2,r2,r6
    5788:	1447c83a 	sub	r3,r2,r17
    578c:	20c00716 	blt	r4,r3,57ac <_malloc_r+0x160>
    5790:	1800650e 	bge	r3,zero,5928 <_malloc_r+0x2dc>
    5794:	84000317 	ldw	r16,12(r16)
    5798:	2c000526 	beq	r5,r16,57b0 <_malloc_r+0x164>
    579c:	80800117 	ldw	r2,4(r16)
    57a0:	1184703a 	and	r2,r2,r6
    57a4:	1447c83a 	sub	r3,r2,r17
    57a8:	20fff90e 	bge	r4,r3,5790 <_malloc_r+0x144>
    57ac:	39ffffc4 	addi	r7,r7,-1
    57b0:	38c00044 	addi	r3,r7,1
    57b4:	01800074 	movhi	r6,1
    57b8:	9c000417 	ldw	r16,16(r19)
    57bc:	31803d04 	addi	r6,r6,244
    57c0:	32400204 	addi	r9,r6,8
    57c4:	82410326 	beq	r16,r9,5bd4 <_malloc_r+0x588>
    57c8:	81000117 	ldw	r4,4(r16)
    57cc:	00bfff04 	movi	r2,-4
    57d0:	208e703a 	and	r7,r4,r2
    57d4:	3c45c83a 	sub	r2,r7,r17
    57d8:	010003c4 	movi	r4,15
    57dc:	2080ee16 	blt	r4,r2,5b98 <_malloc_r+0x54c>
    57e0:	32400515 	stw	r9,20(r6)
    57e4:	32400415 	stw	r9,16(r6)
    57e8:	1000510e 	bge	r2,zero,5930 <_malloc_r+0x2e4>
    57ec:	00807fc4 	movi	r2,511
    57f0:	11c0ce36 	bltu	r2,r7,5b2c <_malloc_r+0x4e0>
    57f4:	3808d0fa 	srli	r4,r7,3
    57f8:	01c00044 	movi	r7,1
    57fc:	30800117 	ldw	r2,4(r6)
    5800:	210b883a 	add	r5,r4,r4
    5804:	294b883a 	add	r5,r5,r5
    5808:	2009d0ba 	srai	r4,r4,2
    580c:	294b883a 	add	r5,r5,r5
    5810:	298b883a 	add	r5,r5,r6
    5814:	2a000217 	ldw	r8,8(r5)
    5818:	3908983a 	sll	r4,r7,r4
    581c:	81400315 	stw	r5,12(r16)
    5820:	82000215 	stw	r8,8(r16)
    5824:	2088b03a 	or	r4,r4,r2
    5828:	2c000215 	stw	r16,8(r5)
    582c:	31000115 	stw	r4,4(r6)
    5830:	44000315 	stw	r16,12(r8)
    5834:	1805d0ba 	srai	r2,r3,2
    5838:	01400044 	movi	r5,1
    583c:	288a983a 	sll	r5,r5,r2
    5840:	21404336 	bltu	r4,r5,5950 <_malloc_r+0x304>
    5844:	2144703a 	and	r2,r4,r5
    5848:	10000a1e 	bne	r2,zero,5874 <_malloc_r+0x228>
    584c:	00bfff04 	movi	r2,-4
    5850:	294b883a 	add	r5,r5,r5
    5854:	1886703a 	and	r3,r3,r2
    5858:	2144703a 	and	r2,r4,r5
    585c:	18c00104 	addi	r3,r3,4
    5860:	1000041e 	bne	r2,zero,5874 <_malloc_r+0x228>
    5864:	294b883a 	add	r5,r5,r5
    5868:	2144703a 	and	r2,r4,r5
    586c:	18c00104 	addi	r3,r3,4
    5870:	103ffc26 	beq	r2,zero,5864 <_malloc_r+0x218>
    5874:	023fff04 	movi	r8,-4
    5878:	01c003c4 	movi	r7,15
    587c:	18c5883a 	add	r2,r3,r3
    5880:	1085883a 	add	r2,r2,r2
    5884:	1085883a 	add	r2,r2,r2
    5888:	9895883a 	add	r10,r19,r2
    588c:	52c00304 	addi	r11,r10,12
    5890:	1819883a 	mov	r12,r3
    5894:	5c000017 	ldw	r16,0(r11)
    5898:	59bffd04 	addi	r6,r11,-12
    589c:	8180041e 	bne	r16,r6,58b0 <_malloc_r+0x264>
    58a0:	0000ce06 	br	5bdc <_malloc_r+0x590>
    58a4:	2000d70e 	bge	r4,zero,5c04 <_malloc_r+0x5b8>
    58a8:	84000317 	ldw	r16,12(r16)
    58ac:	8180cb26 	beq	r16,r6,5bdc <_malloc_r+0x590>
    58b0:	80800117 	ldw	r2,4(r16)
    58b4:	1204703a 	and	r2,r2,r8
    58b8:	1449c83a 	sub	r4,r2,r17
    58bc:	393ff90e 	bge	r7,r4,58a4 <_malloc_r+0x258>
    58c0:	80800317 	ldw	r2,12(r16)
    58c4:	80c00217 	ldw	r3,8(r16)
    58c8:	89400054 	ori	r5,r17,1
    58cc:	81400115 	stw	r5,4(r16)
    58d0:	18800315 	stw	r2,12(r3)
    58d4:	10c00215 	stw	r3,8(r2)
    58d8:	8463883a 	add	r17,r16,r17
    58dc:	9c400515 	stw	r17,20(r19)
    58e0:	9c400415 	stw	r17,16(r19)
    58e4:	20800054 	ori	r2,r4,1
    58e8:	88800115 	stw	r2,4(r17)
    58ec:	8a400315 	stw	r9,12(r17)
    58f0:	8a400215 	stw	r9,8(r17)
    58f4:	8923883a 	add	r17,r17,r4
    58f8:	89000015 	stw	r4,0(r17)
    58fc:	9009883a 	mov	r4,r18
    5900:	000d5cc0 	call	d5cc <__malloc_unlock>
    5904:	80800204 	addi	r2,r16,8
    5908:	003f7d06 	br	5700 <_malloc_r+0xb4>
    590c:	00800304 	movi	r2,12
    5910:	90800015 	stw	r2,0(r18)
    5914:	0005883a 	mov	r2,zero
    5918:	003f7906 	br	5700 <_malloc_r+0xb4>
    591c:	01401f84 	movi	r5,126
    5920:	01c00fc4 	movi	r7,63
    5924:	003f8d06 	br	575c <_malloc_r+0x110>
    5928:	81000317 	ldw	r4,12(r16)
    592c:	003f6a06 	br	56d8 <_malloc_r+0x8c>
    5930:	81c5883a 	add	r2,r16,r7
    5934:	10c00117 	ldw	r3,4(r2)
    5938:	9009883a 	mov	r4,r18
    593c:	18c00054 	ori	r3,r3,1
    5940:	10c00115 	stw	r3,4(r2)
    5944:	000d5cc0 	call	d5cc <__malloc_unlock>
    5948:	80800204 	addi	r2,r16,8
    594c:	003f6c06 	br	5700 <_malloc_r+0xb4>
    5950:	9c000217 	ldw	r16,8(r19)
    5954:	00bfff04 	movi	r2,-4
    5958:	85800117 	ldw	r22,4(r16)
    595c:	b0ac703a 	and	r22,r22,r2
    5960:	b4400336 	bltu	r22,r17,5970 <_malloc_r+0x324>
    5964:	b445c83a 	sub	r2,r22,r17
    5968:	00c003c4 	movi	r3,15
    596c:	18805d16 	blt	r3,r2,5ae4 <_malloc_r+0x498>
    5970:	05c00074 	movhi	r23,1
    5974:	00800074 	movhi	r2,1
    5978:	bdc5c404 	addi	r23,r23,5904
    597c:	108c9204 	addi	r2,r2,12872
    5980:	15400017 	ldw	r21,0(r2)
    5984:	b9000017 	ldw	r4,0(r23)
    5988:	00ffffc4 	movi	r3,-1
    598c:	858d883a 	add	r6,r16,r22
    5990:	8d6b883a 	add	r21,r17,r21
    5994:	20c0e426 	beq	r4,r3,5d28 <_malloc_r+0x6dc>
    5998:	ad4403c4 	addi	r21,r21,4111
    599c:	00fc0004 	movi	r3,-4096
    59a0:	a8ea703a 	and	r21,r21,r3
    59a4:	9009883a 	mov	r4,r18
    59a8:	a80b883a 	mov	r5,r21
    59ac:	d9800015 	stw	r6,0(sp)
    59b0:	00071380 	call	7138 <_sbrk_r>
    59b4:	00ffffc4 	movi	r3,-1
    59b8:	1029883a 	mov	r20,r2
    59bc:	d9800017 	ldw	r6,0(sp)
    59c0:	10c0a426 	beq	r2,r3,5c54 <_malloc_r+0x608>
    59c4:	1180a236 	bltu	r2,r6,5c50 <_malloc_r+0x604>
    59c8:	07000074 	movhi	fp,1
    59cc:	e70c9a04 	addi	fp,fp,12904
    59d0:	e0c00017 	ldw	r3,0(fp)
    59d4:	a8c7883a 	add	r3,r21,r3
    59d8:	e0c00015 	stw	r3,0(fp)
    59dc:	3500da26 	beq	r6,r20,5d48 <_malloc_r+0x6fc>
    59e0:	b9000017 	ldw	r4,0(r23)
    59e4:	00bfffc4 	movi	r2,-1
    59e8:	2080e426 	beq	r4,r2,5d7c <_malloc_r+0x730>
    59ec:	a185c83a 	sub	r2,r20,r6
    59f0:	1885883a 	add	r2,r3,r2
    59f4:	e0800015 	stw	r2,0(fp)
    59f8:	a0c001cc 	andi	r3,r20,7
    59fc:	1800b526 	beq	r3,zero,5cd4 <_malloc_r+0x688>
    5a00:	a0e9c83a 	sub	r20,r20,r3
    5a04:	00840204 	movi	r2,4104
    5a08:	a5000204 	addi	r20,r20,8
    5a0c:	10c7c83a 	sub	r3,r2,r3
    5a10:	a545883a 	add	r2,r20,r21
    5a14:	1083ffcc 	andi	r2,r2,4095
    5a18:	18abc83a 	sub	r21,r3,r2
    5a1c:	9009883a 	mov	r4,r18
    5a20:	a80b883a 	mov	r5,r21
    5a24:	00071380 	call	7138 <_sbrk_r>
    5a28:	00ffffc4 	movi	r3,-1
    5a2c:	10c0d026 	beq	r2,r3,5d70 <_malloc_r+0x724>
    5a30:	1507c83a 	sub	r3,r2,r20
    5a34:	a8c7883a 	add	r3,r21,r3
    5a38:	18c00054 	ori	r3,r3,1
    5a3c:	e0800017 	ldw	r2,0(fp)
    5a40:	9d000215 	stw	r20,8(r19)
    5a44:	a0c00115 	stw	r3,4(r20)
    5a48:	a887883a 	add	r3,r21,r2
    5a4c:	e0c00015 	stw	r3,0(fp)
    5a50:	84c00e26 	beq	r16,r19,5a8c <_malloc_r+0x440>
    5a54:	018003c4 	movi	r6,15
    5a58:	3580a02e 	bgeu	r6,r22,5cdc <_malloc_r+0x690>
    5a5c:	81400117 	ldw	r5,4(r16)
    5a60:	013ffe04 	movi	r4,-8
    5a64:	b0bffd04 	addi	r2,r22,-12
    5a68:	1104703a 	and	r2,r2,r4
    5a6c:	2900004c 	andi	r4,r5,1
    5a70:	1108b03a 	or	r4,r2,r4
    5a74:	81000115 	stw	r4,4(r16)
    5a78:	01400144 	movi	r5,5
    5a7c:	8089883a 	add	r4,r16,r2
    5a80:	21400115 	stw	r5,4(r4)
    5a84:	21400215 	stw	r5,8(r4)
    5a88:	3080c036 	bltu	r6,r2,5d8c <_malloc_r+0x740>
    5a8c:	00800074 	movhi	r2,1
    5a90:	108c9104 	addi	r2,r2,12868
    5a94:	11000017 	ldw	r4,0(r2)
    5a98:	20c0012e 	bgeu	r4,r3,5aa0 <_malloc_r+0x454>
    5a9c:	10c00015 	stw	r3,0(r2)
    5aa0:	00800074 	movhi	r2,1
    5aa4:	108c9004 	addi	r2,r2,12864
    5aa8:	11000017 	ldw	r4,0(r2)
    5aac:	9c000217 	ldw	r16,8(r19)
    5ab0:	20c0012e 	bgeu	r4,r3,5ab8 <_malloc_r+0x46c>
    5ab4:	10c00015 	stw	r3,0(r2)
    5ab8:	80c00117 	ldw	r3,4(r16)
    5abc:	00bfff04 	movi	r2,-4
    5ac0:	1886703a 	and	r3,r3,r2
    5ac4:	1c45c83a 	sub	r2,r3,r17
    5ac8:	1c400236 	bltu	r3,r17,5ad4 <_malloc_r+0x488>
    5acc:	00c003c4 	movi	r3,15
    5ad0:	18800416 	blt	r3,r2,5ae4 <_malloc_r+0x498>
    5ad4:	9009883a 	mov	r4,r18
    5ad8:	000d5cc0 	call	d5cc <__malloc_unlock>
    5adc:	0005883a 	mov	r2,zero
    5ae0:	003f0706 	br	5700 <_malloc_r+0xb4>
    5ae4:	88c00054 	ori	r3,r17,1
    5ae8:	80c00115 	stw	r3,4(r16)
    5aec:	8463883a 	add	r17,r16,r17
    5af0:	10800054 	ori	r2,r2,1
    5af4:	9c400215 	stw	r17,8(r19)
    5af8:	88800115 	stw	r2,4(r17)
    5afc:	9009883a 	mov	r4,r18
    5b00:	000d5cc0 	call	d5cc <__malloc_unlock>
    5b04:	80800204 	addi	r2,r16,8
    5b08:	003efd06 	br	5700 <_malloc_r+0xb4>
    5b0c:	00800504 	movi	r2,20
    5b10:	10c0482e 	bgeu	r2,r3,5c34 <_malloc_r+0x5e8>
    5b14:	00801504 	movi	r2,84
    5b18:	10c06836 	bltu	r2,r3,5cbc <_malloc_r+0x670>
    5b1c:	8806d33a 	srli	r3,r17,12
    5b20:	19c01b84 	addi	r7,r3,110
    5b24:	39cb883a 	add	r5,r7,r7
    5b28:	003f0c06 	br	575c <_malloc_r+0x110>
    5b2c:	3804d27a 	srli	r2,r7,9
    5b30:	01000104 	movi	r4,4
    5b34:	2080422e 	bgeu	r4,r2,5c40 <_malloc_r+0x5f4>
    5b38:	01000504 	movi	r4,20
    5b3c:	20807c36 	bltu	r4,r2,5d30 <_malloc_r+0x6e4>
    5b40:	110016c4 	addi	r4,r2,91
    5b44:	210b883a 	add	r5,r4,r4
    5b48:	294b883a 	add	r5,r5,r5
    5b4c:	294b883a 	add	r5,r5,r5
    5b50:	994b883a 	add	r5,r19,r5
    5b54:	28800217 	ldw	r2,8(r5)
    5b58:	02000074 	movhi	r8,1
    5b5c:	42003d04 	addi	r8,r8,244
    5b60:	11406326 	beq	r2,r5,5cf0 <_malloc_r+0x6a4>
    5b64:	01bfff04 	movi	r6,-4
    5b68:	11000117 	ldw	r4,4(r2)
    5b6c:	2188703a 	and	r4,r4,r6
    5b70:	3900022e 	bgeu	r7,r4,5b7c <_malloc_r+0x530>
    5b74:	10800217 	ldw	r2,8(r2)
    5b78:	28bffb1e 	bne	r5,r2,5b68 <_malloc_r+0x51c>
    5b7c:	11800317 	ldw	r6,12(r2)
    5b80:	99000117 	ldw	r4,4(r19)
    5b84:	81800315 	stw	r6,12(r16)
    5b88:	80800215 	stw	r2,8(r16)
    5b8c:	34000215 	stw	r16,8(r6)
    5b90:	14000315 	stw	r16,12(r2)
    5b94:	003f2706 	br	5834 <_malloc_r+0x1e8>
    5b98:	88c00054 	ori	r3,r17,1
    5b9c:	80c00115 	stw	r3,4(r16)
    5ba0:	8463883a 	add	r17,r16,r17
    5ba4:	34400515 	stw	r17,20(r6)
    5ba8:	34400415 	stw	r17,16(r6)
    5bac:	10c00054 	ori	r3,r2,1
    5bb0:	8a400315 	stw	r9,12(r17)
    5bb4:	8a400215 	stw	r9,8(r17)
    5bb8:	88c00115 	stw	r3,4(r17)
    5bbc:	88a3883a 	add	r17,r17,r2
    5bc0:	88800015 	stw	r2,0(r17)
    5bc4:	9009883a 	mov	r4,r18
    5bc8:	000d5cc0 	call	d5cc <__malloc_unlock>
    5bcc:	80800204 	addi	r2,r16,8
    5bd0:	003ecb06 	br	5700 <_malloc_r+0xb4>
    5bd4:	31000117 	ldw	r4,4(r6)
    5bd8:	003f1606 	br	5834 <_malloc_r+0x1e8>
    5bdc:	63000044 	addi	r12,r12,1
    5be0:	608000cc 	andi	r2,r12,3
    5be4:	5ac00204 	addi	r11,r11,8
    5be8:	103f2a1e 	bne	r2,zero,5894 <_malloc_r+0x248>
    5bec:	00002106 	br	5c74 <_malloc_r+0x628>
    5bf0:	80800204 	addi	r2,r16,8
    5bf4:	84000517 	ldw	r16,20(r16)
    5bf8:	143eb31e 	bne	r2,r16,56c8 <_malloc_r+0x7c>
    5bfc:	18c00084 	addi	r3,r3,2
    5c00:	003eec06 	br	57b4 <_malloc_r+0x168>
    5c04:	8085883a 	add	r2,r16,r2
    5c08:	10c00117 	ldw	r3,4(r2)
    5c0c:	81000317 	ldw	r4,12(r16)
    5c10:	81400217 	ldw	r5,8(r16)
    5c14:	18c00054 	ori	r3,r3,1
    5c18:	10c00115 	stw	r3,4(r2)
    5c1c:	29000315 	stw	r4,12(r5)
    5c20:	21400215 	stw	r5,8(r4)
    5c24:	9009883a 	mov	r4,r18
    5c28:	000d5cc0 	call	d5cc <__malloc_unlock>
    5c2c:	80800204 	addi	r2,r16,8
    5c30:	003eb306 	br	5700 <_malloc_r+0xb4>
    5c34:	19c016c4 	addi	r7,r3,91
    5c38:	39cb883a 	add	r5,r7,r7
    5c3c:	003ec706 	br	575c <_malloc_r+0x110>
    5c40:	3804d1ba 	srli	r2,r7,6
    5c44:	11000e04 	addi	r4,r2,56
    5c48:	210b883a 	add	r5,r4,r4
    5c4c:	003fbe06 	br	5b48 <_malloc_r+0x4fc>
    5c50:	84ff5d26 	beq	r16,r19,59c8 <_malloc_r+0x37c>
    5c54:	9c000217 	ldw	r16,8(r19)
    5c58:	00bfff04 	movi	r2,-4
    5c5c:	80c00117 	ldw	r3,4(r16)
    5c60:	1886703a 	and	r3,r3,r2
    5c64:	003f9706 	br	5ac4 <_malloc_r+0x478>
    5c68:	52800017 	ldw	r10,0(r10)
    5c6c:	18ffffc4 	addi	r3,r3,-1
    5c70:	50805c1e 	bne	r10,r2,5de4 <_malloc_r+0x798>
    5c74:	190000cc 	andi	r4,r3,3
    5c78:	50bffe04 	addi	r2,r10,-8
    5c7c:	203ffa1e 	bne	r4,zero,5c68 <_malloc_r+0x61c>
    5c80:	98800117 	ldw	r2,4(r19)
    5c84:	0146303a 	nor	r3,zero,r5
    5c88:	1884703a 	and	r2,r3,r2
    5c8c:	98800115 	stw	r2,4(r19)
    5c90:	294b883a 	add	r5,r5,r5
    5c94:	117f2e36 	bltu	r2,r5,5950 <_malloc_r+0x304>
    5c98:	283f2d26 	beq	r5,zero,5950 <_malloc_r+0x304>
    5c9c:	1146703a 	and	r3,r2,r5
    5ca0:	1800521e 	bne	r3,zero,5dec <_malloc_r+0x7a0>
    5ca4:	6007883a 	mov	r3,r12
    5ca8:	294b883a 	add	r5,r5,r5
    5cac:	1148703a 	and	r4,r2,r5
    5cb0:	18c00104 	addi	r3,r3,4
    5cb4:	203ffc26 	beq	r4,zero,5ca8 <_malloc_r+0x65c>
    5cb8:	003ef006 	br	587c <_malloc_r+0x230>
    5cbc:	00805504 	movi	r2,340
    5cc0:	10c01336 	bltu	r2,r3,5d10 <_malloc_r+0x6c4>
    5cc4:	8806d3fa 	srli	r3,r17,15
    5cc8:	19c01dc4 	addi	r7,r3,119
    5ccc:	39cb883a 	add	r5,r7,r7
    5cd0:	003ea206 	br	575c <_malloc_r+0x110>
    5cd4:	00c40004 	movi	r3,4096
    5cd8:	003f4d06 	br	5a10 <_malloc_r+0x3c4>
    5cdc:	00800044 	movi	r2,1
    5ce0:	a0800115 	stw	r2,4(r20)
    5ce4:	a021883a 	mov	r16,r20
    5ce8:	0007883a 	mov	r3,zero
    5cec:	003f7506 	br	5ac4 <_malloc_r+0x478>
    5cf0:	200bd0ba 	srai	r5,r4,2
    5cf4:	01800044 	movi	r6,1
    5cf8:	41000117 	ldw	r4,4(r8)
    5cfc:	314a983a 	sll	r5,r6,r5
    5d00:	100d883a 	mov	r6,r2
    5d04:	2908b03a 	or	r4,r5,r4
    5d08:	41000115 	stw	r4,4(r8)
    5d0c:	003f9d06 	br	5b84 <_malloc_r+0x538>
    5d10:	00815504 	movi	r2,1364
    5d14:	10c01336 	bltu	r2,r3,5d64 <_malloc_r+0x718>
    5d18:	8806d4ba 	srli	r3,r17,18
    5d1c:	19c01f04 	addi	r7,r3,124
    5d20:	39cb883a 	add	r5,r7,r7
    5d24:	003e8d06 	br	575c <_malloc_r+0x110>
    5d28:	ad400404 	addi	r21,r21,16
    5d2c:	003f1d06 	br	59a4 <_malloc_r+0x358>
    5d30:	01001504 	movi	r4,84
    5d34:	20801c36 	bltu	r4,r2,5da8 <_malloc_r+0x75c>
    5d38:	3804d33a 	srli	r2,r7,12
    5d3c:	11001b84 	addi	r4,r2,110
    5d40:	210b883a 	add	r5,r4,r4
    5d44:	003f8006 	br	5b48 <_malloc_r+0x4fc>
    5d48:	3083ffcc 	andi	r2,r6,4095
    5d4c:	103f241e 	bne	r2,zero,59e0 <_malloc_r+0x394>
    5d50:	99000217 	ldw	r4,8(r19)
    5d54:	ad85883a 	add	r2,r21,r22
    5d58:	10800054 	ori	r2,r2,1
    5d5c:	20800115 	stw	r2,4(r4)
    5d60:	003f4a06 	br	5a8c <_malloc_r+0x440>
    5d64:	01403f04 	movi	r5,252
    5d68:	01c01f84 	movi	r7,126
    5d6c:	003e7b06 	br	575c <_malloc_r+0x110>
    5d70:	00c00044 	movi	r3,1
    5d74:	002b883a 	mov	r21,zero
    5d78:	003f3006 	br	5a3c <_malloc_r+0x3f0>
    5d7c:	00800074 	movhi	r2,1
    5d80:	1085c404 	addi	r2,r2,5904
    5d84:	15000015 	stw	r20,0(r2)
    5d88:	003f1b06 	br	59f8 <_malloc_r+0x3ac>
    5d8c:	9009883a 	mov	r4,r18
    5d90:	81400204 	addi	r5,r16,8
    5d94:	0004f540 	call	4f54 <_free_r>
    5d98:	00800074 	movhi	r2,1
    5d9c:	108c9a04 	addi	r2,r2,12904
    5da0:	10c00017 	ldw	r3,0(r2)
    5da4:	003f3906 	br	5a8c <_malloc_r+0x440>
    5da8:	01005504 	movi	r4,340
    5dac:	20800436 	bltu	r4,r2,5dc0 <_malloc_r+0x774>
    5db0:	3804d3fa 	srli	r2,r7,15
    5db4:	11001dc4 	addi	r4,r2,119
    5db8:	210b883a 	add	r5,r4,r4
    5dbc:	003f6206 	br	5b48 <_malloc_r+0x4fc>
    5dc0:	01015504 	movi	r4,1364
    5dc4:	20800436 	bltu	r4,r2,5dd8 <_malloc_r+0x78c>
    5dc8:	3804d4ba 	srli	r2,r7,18
    5dcc:	11001f04 	addi	r4,r2,124
    5dd0:	210b883a 	add	r5,r4,r4
    5dd4:	003f5c06 	br	5b48 <_malloc_r+0x4fc>
    5dd8:	01403f04 	movi	r5,252
    5ddc:	01001f84 	movi	r4,126
    5de0:	003f5906 	br	5b48 <_malloc_r+0x4fc>
    5de4:	98800117 	ldw	r2,4(r19)
    5de8:	003fa906 	br	5c90 <_malloc_r+0x644>
    5dec:	6007883a 	mov	r3,r12
    5df0:	003ea206 	br	587c <_malloc_r+0x230>

00005df4 <memchr>:
    5df4:	208000cc 	andi	r2,r4,3
    5df8:	280f883a 	mov	r7,r5
    5dfc:	10003526 	beq	r2,zero,5ed4 <memchr+0xe0>
    5e00:	30bfffc4 	addi	r2,r6,-1
    5e04:	30001b26 	beq	r6,zero,5e74 <memchr+0x80>
    5e08:	21800003 	ldbu	r6,0(r4)
    5e0c:	28c03fcc 	andi	r3,r5,255
    5e10:	30c01a26 	beq	r6,r3,5e7c <memchr+0x88>
    5e14:	180d883a 	mov	r6,r3
    5e18:	00000406 	br	5e2c <memchr+0x38>
    5e1c:	10001526 	beq	r2,zero,5e74 <memchr+0x80>
    5e20:	20c00003 	ldbu	r3,0(r4)
    5e24:	10bfffc4 	addi	r2,r2,-1
    5e28:	19801426 	beq	r3,r6,5e7c <memchr+0x88>
    5e2c:	21000044 	addi	r4,r4,1
    5e30:	20c000cc 	andi	r3,r4,3
    5e34:	183ff91e 	bne	r3,zero,5e1c <memchr+0x28>
    5e38:	024000c4 	movi	r9,3
    5e3c:	48801136 	bltu	r9,r2,5e84 <memchr+0x90>
    5e40:	10000c26 	beq	r2,zero,5e74 <memchr+0x80>
    5e44:	20c00003 	ldbu	r3,0(r4)
    5e48:	29403fcc 	andi	r5,r5,255
    5e4c:	19400b26 	beq	r3,r5,5e7c <memchr+0x88>
    5e50:	20c00044 	addi	r3,r4,1
    5e54:	2085883a 	add	r2,r4,r2
    5e58:	39803fcc 	andi	r6,r7,255
    5e5c:	00000306 	br	5e6c <memchr+0x78>
    5e60:	18c00044 	addi	r3,r3,1
    5e64:	197fffc3 	ldbu	r5,-1(r3)
    5e68:	29800426 	beq	r5,r6,5e7c <memchr+0x88>
    5e6c:	1809883a 	mov	r4,r3
    5e70:	18bffb1e 	bne	r3,r2,5e60 <memchr+0x6c>
    5e74:	0005883a 	mov	r2,zero
    5e78:	f800283a 	ret
    5e7c:	2005883a 	mov	r2,r4
    5e80:	f800283a 	ret
    5e84:	28c03fcc 	andi	r3,r5,255
    5e88:	1810923a 	slli	r8,r3,8
    5e8c:	02ffbff4 	movhi	r11,65279
    5e90:	02a02074 	movhi	r10,32897
    5e94:	40c6b03a 	or	r3,r8,r3
    5e98:	1810943a 	slli	r8,r3,16
    5e9c:	5affbfc4 	addi	r11,r11,-257
    5ea0:	52a02004 	addi	r10,r10,-32640
    5ea4:	40d0b03a 	or	r8,r8,r3
    5ea8:	20c00017 	ldw	r3,0(r4)
    5eac:	40c6f03a 	xor	r3,r8,r3
    5eb0:	1acd883a 	add	r6,r3,r11
    5eb4:	00c6303a 	nor	r3,zero,r3
    5eb8:	30c6703a 	and	r3,r6,r3
    5ebc:	1a86703a 	and	r3,r3,r10
    5ec0:	183fdf1e 	bne	r3,zero,5e40 <memchr+0x4c>
    5ec4:	10bfff04 	addi	r2,r2,-4
    5ec8:	21000104 	addi	r4,r4,4
    5ecc:	48bff636 	bltu	r9,r2,5ea8 <memchr+0xb4>
    5ed0:	003fdb06 	br	5e40 <memchr+0x4c>
    5ed4:	3005883a 	mov	r2,r6
    5ed8:	003fd706 	br	5e38 <memchr+0x44>

00005edc <memcpy>:
    5edc:	deffff04 	addi	sp,sp,-4
    5ee0:	dc000015 	stw	r16,0(sp)
    5ee4:	00c003c4 	movi	r3,15
    5ee8:	2005883a 	mov	r2,r4
    5eec:	1980432e 	bgeu	r3,r6,5ffc <memcpy+0x120>
    5ef0:	2146b03a 	or	r3,r4,r5
    5ef4:	18c000cc 	andi	r3,r3,3
    5ef8:	1800421e 	bne	r3,zero,6004 <memcpy+0x128>
    5efc:	343ffc04 	addi	r16,r6,-16
    5f00:	8020d13a 	srli	r16,r16,4
    5f04:	28c00104 	addi	r3,r5,4
    5f08:	23400104 	addi	r13,r4,4
    5f0c:	801e913a 	slli	r15,r16,4
    5f10:	2b000204 	addi	r12,r5,8
    5f14:	22c00204 	addi	r11,r4,8
    5f18:	7bc00504 	addi	r15,r15,20
    5f1c:	2a800304 	addi	r10,r5,12
    5f20:	22400304 	addi	r9,r4,12
    5f24:	2bdf883a 	add	r15,r5,r15
    5f28:	2811883a 	mov	r8,r5
    5f2c:	200f883a 	mov	r7,r4
    5f30:	41000017 	ldw	r4,0(r8)
    5f34:	39c00404 	addi	r7,r7,16
    5f38:	18c00404 	addi	r3,r3,16
    5f3c:	393ffc15 	stw	r4,-16(r7)
    5f40:	1bbffc17 	ldw	r14,-16(r3)
    5f44:	6b400404 	addi	r13,r13,16
    5f48:	5ac00404 	addi	r11,r11,16
    5f4c:	6bbffc15 	stw	r14,-16(r13)
    5f50:	63800017 	ldw	r14,0(r12)
    5f54:	4a400404 	addi	r9,r9,16
    5f58:	42000404 	addi	r8,r8,16
    5f5c:	5bbffc15 	stw	r14,-16(r11)
    5f60:	53800017 	ldw	r14,0(r10)
    5f64:	63000404 	addi	r12,r12,16
    5f68:	52800404 	addi	r10,r10,16
    5f6c:	4bbffc15 	stw	r14,-16(r9)
    5f70:	1bffef1e 	bne	r3,r15,5f30 <memcpy+0x54>
    5f74:	81c00044 	addi	r7,r16,1
    5f78:	380e913a 	slli	r7,r7,4
    5f7c:	310003cc 	andi	r4,r6,15
    5f80:	02c000c4 	movi	r11,3
    5f84:	11c7883a 	add	r3,r2,r7
    5f88:	29cb883a 	add	r5,r5,r7
    5f8c:	59001f2e 	bgeu	r11,r4,600c <memcpy+0x130>
    5f90:	1813883a 	mov	r9,r3
    5f94:	2811883a 	mov	r8,r5
    5f98:	200f883a 	mov	r7,r4
    5f9c:	42800017 	ldw	r10,0(r8)
    5fa0:	4a400104 	addi	r9,r9,4
    5fa4:	39ffff04 	addi	r7,r7,-4
    5fa8:	4abfff15 	stw	r10,-4(r9)
    5fac:	42000104 	addi	r8,r8,4
    5fb0:	59fffa36 	bltu	r11,r7,5f9c <memcpy+0xc0>
    5fb4:	213fff04 	addi	r4,r4,-4
    5fb8:	2008d0ba 	srli	r4,r4,2
    5fbc:	318000cc 	andi	r6,r6,3
    5fc0:	21000044 	addi	r4,r4,1
    5fc4:	2109883a 	add	r4,r4,r4
    5fc8:	2109883a 	add	r4,r4,r4
    5fcc:	1907883a 	add	r3,r3,r4
    5fd0:	290b883a 	add	r5,r5,r4
    5fd4:	30000626 	beq	r6,zero,5ff0 <memcpy+0x114>
    5fd8:	198d883a 	add	r6,r3,r6
    5fdc:	29c00003 	ldbu	r7,0(r5)
    5fe0:	18c00044 	addi	r3,r3,1
    5fe4:	29400044 	addi	r5,r5,1
    5fe8:	19ffffc5 	stb	r7,-1(r3)
    5fec:	19bffb1e 	bne	r3,r6,5fdc <memcpy+0x100>
    5ff0:	dc000017 	ldw	r16,0(sp)
    5ff4:	dec00104 	addi	sp,sp,4
    5ff8:	f800283a 	ret
    5ffc:	2007883a 	mov	r3,r4
    6000:	003ff406 	br	5fd4 <memcpy+0xf8>
    6004:	2007883a 	mov	r3,r4
    6008:	003ff306 	br	5fd8 <memcpy+0xfc>
    600c:	200d883a 	mov	r6,r4
    6010:	003ff006 	br	5fd4 <memcpy+0xf8>

00006014 <memset>:
    6014:	20c000cc 	andi	r3,r4,3
    6018:	2005883a 	mov	r2,r4
    601c:	18004326 	beq	r3,zero,612c <memset+0x118>
    6020:	31ffffc4 	addi	r7,r6,-1
    6024:	30004026 	beq	r6,zero,6128 <memset+0x114>
    6028:	2813883a 	mov	r9,r5
    602c:	200d883a 	mov	r6,r4
    6030:	2007883a 	mov	r3,r4
    6034:	00000406 	br	6048 <memset+0x34>
    6038:	3a3fffc4 	addi	r8,r7,-1
    603c:	31800044 	addi	r6,r6,1
    6040:	38003926 	beq	r7,zero,6128 <memset+0x114>
    6044:	400f883a 	mov	r7,r8
    6048:	18c00044 	addi	r3,r3,1
    604c:	32400005 	stb	r9,0(r6)
    6050:	1a0000cc 	andi	r8,r3,3
    6054:	403ff81e 	bne	r8,zero,6038 <memset+0x24>
    6058:	010000c4 	movi	r4,3
    605c:	21c02d2e 	bgeu	r4,r7,6114 <memset+0x100>
    6060:	29803fcc 	andi	r6,r5,255
    6064:	3008923a 	slli	r4,r6,8
    6068:	218cb03a 	or	r6,r4,r6
    606c:	3008943a 	slli	r4,r6,16
    6070:	218cb03a 	or	r6,r4,r6
    6074:	010003c4 	movi	r4,15
    6078:	21c0182e 	bgeu	r4,r7,60dc <memset+0xc8>
    607c:	3b3ffc04 	addi	r12,r7,-16
    6080:	6018d13a 	srli	r12,r12,4
    6084:	1a000104 	addi	r8,r3,4
    6088:	1ac00204 	addi	r11,r3,8
    608c:	6008913a 	slli	r4,r12,4
    6090:	1a800304 	addi	r10,r3,12
    6094:	1813883a 	mov	r9,r3
    6098:	21000504 	addi	r4,r4,20
    609c:	1909883a 	add	r4,r3,r4
    60a0:	49800015 	stw	r6,0(r9)
    60a4:	41800015 	stw	r6,0(r8)
    60a8:	59800015 	stw	r6,0(r11)
    60ac:	51800015 	stw	r6,0(r10)
    60b0:	42000404 	addi	r8,r8,16
    60b4:	4a400404 	addi	r9,r9,16
    60b8:	5ac00404 	addi	r11,r11,16
    60bc:	52800404 	addi	r10,r10,16
    60c0:	413ff71e 	bne	r8,r4,60a0 <memset+0x8c>
    60c4:	63000044 	addi	r12,r12,1
    60c8:	6018913a 	slli	r12,r12,4
    60cc:	39c003cc 	andi	r7,r7,15
    60d0:	010000c4 	movi	r4,3
    60d4:	1b07883a 	add	r3,r3,r12
    60d8:	21c00e2e 	bgeu	r4,r7,6114 <memset+0x100>
    60dc:	1813883a 	mov	r9,r3
    60e0:	3811883a 	mov	r8,r7
    60e4:	010000c4 	movi	r4,3
    60e8:	49800015 	stw	r6,0(r9)
    60ec:	423fff04 	addi	r8,r8,-4
    60f0:	4a400104 	addi	r9,r9,4
    60f4:	223ffc36 	bltu	r4,r8,60e8 <memset+0xd4>
    60f8:	393fff04 	addi	r4,r7,-4
    60fc:	2008d0ba 	srli	r4,r4,2
    6100:	39c000cc 	andi	r7,r7,3
    6104:	21000044 	addi	r4,r4,1
    6108:	2109883a 	add	r4,r4,r4
    610c:	2109883a 	add	r4,r4,r4
    6110:	1907883a 	add	r3,r3,r4
    6114:	38000426 	beq	r7,zero,6128 <memset+0x114>
    6118:	19cf883a 	add	r7,r3,r7
    611c:	19400005 	stb	r5,0(r3)
    6120:	18c00044 	addi	r3,r3,1
    6124:	19fffd1e 	bne	r3,r7,611c <memset+0x108>
    6128:	f800283a 	ret
    612c:	2007883a 	mov	r3,r4
    6130:	300f883a 	mov	r7,r6
    6134:	003fc806 	br	6058 <memset+0x44>

00006138 <_Balloc>:
    6138:	20801317 	ldw	r2,76(r4)
    613c:	defffc04 	addi	sp,sp,-16
    6140:	dc400115 	stw	r17,4(sp)
    6144:	dc000015 	stw	r16,0(sp)
    6148:	dfc00315 	stw	ra,12(sp)
    614c:	dc800215 	stw	r18,8(sp)
    6150:	2023883a 	mov	r17,r4
    6154:	2821883a 	mov	r16,r5
    6158:	10000f26 	beq	r2,zero,6198 <_Balloc+0x60>
    615c:	8407883a 	add	r3,r16,r16
    6160:	18c7883a 	add	r3,r3,r3
    6164:	10c7883a 	add	r3,r2,r3
    6168:	18800017 	ldw	r2,0(r3)
    616c:	10001126 	beq	r2,zero,61b4 <_Balloc+0x7c>
    6170:	11000017 	ldw	r4,0(r2)
    6174:	19000015 	stw	r4,0(r3)
    6178:	10000415 	stw	zero,16(r2)
    617c:	10000315 	stw	zero,12(r2)
    6180:	dfc00317 	ldw	ra,12(sp)
    6184:	dc800217 	ldw	r18,8(sp)
    6188:	dc400117 	ldw	r17,4(sp)
    618c:	dc000017 	ldw	r16,0(sp)
    6190:	dec00404 	addi	sp,sp,16
    6194:	f800283a 	ret
    6198:	01400104 	movi	r5,4
    619c:	01800844 	movi	r6,33
    61a0:	00089480 	call	8948 <_calloc_r>
    61a4:	88801315 	stw	r2,76(r17)
    61a8:	103fec1e 	bne	r2,zero,615c <_Balloc+0x24>
    61ac:	0005883a 	mov	r2,zero
    61b0:	003ff306 	br	6180 <_Balloc+0x48>
    61b4:	01400044 	movi	r5,1
    61b8:	2c24983a 	sll	r18,r5,r16
    61bc:	8809883a 	mov	r4,r17
    61c0:	91800144 	addi	r6,r18,5
    61c4:	318d883a 	add	r6,r6,r6
    61c8:	318d883a 	add	r6,r6,r6
    61cc:	00089480 	call	8948 <_calloc_r>
    61d0:	103ff626 	beq	r2,zero,61ac <_Balloc+0x74>
    61d4:	14000115 	stw	r16,4(r2)
    61d8:	14800215 	stw	r18,8(r2)
    61dc:	003fe606 	br	6178 <_Balloc+0x40>

000061e0 <_Bfree>:
    61e0:	28000826 	beq	r5,zero,6204 <_Bfree+0x24>
    61e4:	28c00117 	ldw	r3,4(r5)
    61e8:	20801317 	ldw	r2,76(r4)
    61ec:	18c7883a 	add	r3,r3,r3
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	10c5883a 	add	r2,r2,r3
    61f8:	10c00017 	ldw	r3,0(r2)
    61fc:	28c00015 	stw	r3,0(r5)
    6200:	11400015 	stw	r5,0(r2)
    6204:	f800283a 	ret

00006208 <__multadd>:
    6208:	defffa04 	addi	sp,sp,-24
    620c:	dc000115 	stw	r16,4(sp)
    6210:	2c000417 	ldw	r16,16(r5)
    6214:	dc800315 	stw	r18,12(sp)
    6218:	dc400215 	stw	r17,8(sp)
    621c:	dfc00515 	stw	ra,20(sp)
    6220:	dcc00415 	stw	r19,16(sp)
    6224:	2823883a 	mov	r17,r5
    6228:	2025883a 	mov	r18,r4
    622c:	2a400504 	addi	r9,r5,20
    6230:	0015883a 	mov	r10,zero
    6234:	4a000017 	ldw	r8,0(r9)
    6238:	4a400104 	addi	r9,r9,4
    623c:	52800044 	addi	r10,r10,1
    6240:	40ffffcc 	andi	r3,r8,65535
    6244:	1987383a 	mul	r3,r3,r6
    6248:	4010d43a 	srli	r8,r8,16
    624c:	19cf883a 	add	r7,r3,r7
    6250:	4191383a 	mul	r8,r8,r6
    6254:	3816d43a 	srli	r11,r7,16
    6258:	38ffffcc 	andi	r3,r7,65535
    625c:	5a0f883a 	add	r7,r11,r8
    6260:	3810943a 	slli	r8,r7,16
    6264:	380ed43a 	srli	r7,r7,16
    6268:	40c7883a 	add	r3,r8,r3
    626c:	48ffff15 	stw	r3,-4(r9)
    6270:	543ff016 	blt	r10,r16,6234 <__multadd+0x2c>
    6274:	38000926 	beq	r7,zero,629c <__multadd+0x94>
    6278:	88800217 	ldw	r2,8(r17)
    627c:	80800f0e 	bge	r16,r2,62bc <__multadd+0xb4>
    6280:	80800144 	addi	r2,r16,5
    6284:	1085883a 	add	r2,r2,r2
    6288:	1085883a 	add	r2,r2,r2
    628c:	8885883a 	add	r2,r17,r2
    6290:	11c00015 	stw	r7,0(r2)
    6294:	84000044 	addi	r16,r16,1
    6298:	8c000415 	stw	r16,16(r17)
    629c:	8805883a 	mov	r2,r17
    62a0:	dfc00517 	ldw	ra,20(sp)
    62a4:	dcc00417 	ldw	r19,16(sp)
    62a8:	dc800317 	ldw	r18,12(sp)
    62ac:	dc400217 	ldw	r17,8(sp)
    62b0:	dc000117 	ldw	r16,4(sp)
    62b4:	dec00604 	addi	sp,sp,24
    62b8:	f800283a 	ret
    62bc:	89400117 	ldw	r5,4(r17)
    62c0:	9009883a 	mov	r4,r18
    62c4:	d9c00015 	stw	r7,0(sp)
    62c8:	29400044 	addi	r5,r5,1
    62cc:	00061380 	call	6138 <_Balloc>
    62d0:	89800417 	ldw	r6,16(r17)
    62d4:	89400304 	addi	r5,r17,12
    62d8:	11000304 	addi	r4,r2,12
    62dc:	31800084 	addi	r6,r6,2
    62e0:	318d883a 	add	r6,r6,r6
    62e4:	318d883a 	add	r6,r6,r6
    62e8:	1027883a 	mov	r19,r2
    62ec:	0005edc0 	call	5edc <memcpy>
    62f0:	89000117 	ldw	r4,4(r17)
    62f4:	90c01317 	ldw	r3,76(r18)
    62f8:	d9c00017 	ldw	r7,0(sp)
    62fc:	2109883a 	add	r4,r4,r4
    6300:	2109883a 	add	r4,r4,r4
    6304:	1907883a 	add	r3,r3,r4
    6308:	18800017 	ldw	r2,0(r3)
    630c:	88800015 	stw	r2,0(r17)
    6310:	1c400015 	stw	r17,0(r3)
    6314:	9823883a 	mov	r17,r19
    6318:	003fd906 	br	6280 <__multadd+0x78>

0000631c <__s2b>:
    631c:	defff904 	addi	sp,sp,-28
    6320:	dc400115 	stw	r17,4(sp)
    6324:	dc000015 	stw	r16,0(sp)
    6328:	2023883a 	mov	r17,r4
    632c:	2821883a 	mov	r16,r5
    6330:	39000204 	addi	r4,r7,8
    6334:	01400244 	movi	r5,9
    6338:	dcc00315 	stw	r19,12(sp)
    633c:	dc800215 	stw	r18,8(sp)
    6340:	dfc00615 	stw	ra,24(sp)
    6344:	dd400515 	stw	r21,20(sp)
    6348:	dd000415 	stw	r20,16(sp)
    634c:	3825883a 	mov	r18,r7
    6350:	3027883a 	mov	r19,r6
    6354:	000a92c0 	call	a92c <__divsi3>
    6358:	00c00044 	movi	r3,1
    635c:	000b883a 	mov	r5,zero
    6360:	1880030e 	bge	r3,r2,6370 <__s2b+0x54>
    6364:	18c7883a 	add	r3,r3,r3
    6368:	29400044 	addi	r5,r5,1
    636c:	18bffd16 	blt	r3,r2,6364 <__s2b+0x48>
    6370:	8809883a 	mov	r4,r17
    6374:	00061380 	call	6138 <_Balloc>
    6378:	d8c00717 	ldw	r3,28(sp)
    637c:	10c00515 	stw	r3,20(r2)
    6380:	00c00044 	movi	r3,1
    6384:	10c00415 	stw	r3,16(r2)
    6388:	00c00244 	movi	r3,9
    638c:	1cc0210e 	bge	r3,r19,6414 <__s2b+0xf8>
    6390:	80eb883a 	add	r21,r16,r3
    6394:	a829883a 	mov	r20,r21
    6398:	84e1883a 	add	r16,r16,r19
    639c:	a1c00007 	ldb	r7,0(r20)
    63a0:	8809883a 	mov	r4,r17
    63a4:	a5000044 	addi	r20,r20,1
    63a8:	100b883a 	mov	r5,r2
    63ac:	01800284 	movi	r6,10
    63b0:	39fff404 	addi	r7,r7,-48
    63b4:	00062080 	call	6208 <__multadd>
    63b8:	a43ff81e 	bne	r20,r16,639c <__s2b+0x80>
    63bc:	ace1883a 	add	r16,r21,r19
    63c0:	843ffe04 	addi	r16,r16,-8
    63c4:	9c800a0e 	bge	r19,r18,63f0 <__s2b+0xd4>
    63c8:	94e5c83a 	sub	r18,r18,r19
    63cc:	84a5883a 	add	r18,r16,r18
    63d0:	81c00007 	ldb	r7,0(r16)
    63d4:	8809883a 	mov	r4,r17
    63d8:	84000044 	addi	r16,r16,1
    63dc:	100b883a 	mov	r5,r2
    63e0:	01800284 	movi	r6,10
    63e4:	39fff404 	addi	r7,r7,-48
    63e8:	00062080 	call	6208 <__multadd>
    63ec:	84bff81e 	bne	r16,r18,63d0 <__s2b+0xb4>
    63f0:	dfc00617 	ldw	ra,24(sp)
    63f4:	dd400517 	ldw	r21,20(sp)
    63f8:	dd000417 	ldw	r20,16(sp)
    63fc:	dcc00317 	ldw	r19,12(sp)
    6400:	dc800217 	ldw	r18,8(sp)
    6404:	dc400117 	ldw	r17,4(sp)
    6408:	dc000017 	ldw	r16,0(sp)
    640c:	dec00704 	addi	sp,sp,28
    6410:	f800283a 	ret
    6414:	84000284 	addi	r16,r16,10
    6418:	1827883a 	mov	r19,r3
    641c:	003fe906 	br	63c4 <__s2b+0xa8>

00006420 <__hi0bits>:
    6420:	20bfffec 	andhi	r2,r4,65535
    6424:	1000141e 	bne	r2,zero,6478 <__hi0bits+0x58>
    6428:	2008943a 	slli	r4,r4,16
    642c:	00800404 	movi	r2,16
    6430:	20ffc02c 	andhi	r3,r4,65280
    6434:	1800021e 	bne	r3,zero,6440 <__hi0bits+0x20>
    6438:	2008923a 	slli	r4,r4,8
    643c:	10800204 	addi	r2,r2,8
    6440:	20fc002c 	andhi	r3,r4,61440
    6444:	1800021e 	bne	r3,zero,6450 <__hi0bits+0x30>
    6448:	2008913a 	slli	r4,r4,4
    644c:	10800104 	addi	r2,r2,4
    6450:	20f0002c 	andhi	r3,r4,49152
    6454:	1800031e 	bne	r3,zero,6464 <__hi0bits+0x44>
    6458:	2109883a 	add	r4,r4,r4
    645c:	10800084 	addi	r2,r2,2
    6460:	2109883a 	add	r4,r4,r4
    6464:	20000316 	blt	r4,zero,6474 <__hi0bits+0x54>
    6468:	2110002c 	andhi	r4,r4,16384
    646c:	2000041e 	bne	r4,zero,6480 <__hi0bits+0x60>
    6470:	00800804 	movi	r2,32
    6474:	f800283a 	ret
    6478:	0005883a 	mov	r2,zero
    647c:	003fec06 	br	6430 <__hi0bits+0x10>
    6480:	10800044 	addi	r2,r2,1
    6484:	f800283a 	ret

00006488 <__lo0bits>:
    6488:	20c00017 	ldw	r3,0(r4)
    648c:	188001cc 	andi	r2,r3,7
    6490:	10000826 	beq	r2,zero,64b4 <__lo0bits+0x2c>
    6494:	1880004c 	andi	r2,r3,1
    6498:	1000211e 	bne	r2,zero,6520 <__lo0bits+0x98>
    649c:	1880008c 	andi	r2,r3,2
    64a0:	1000211e 	bne	r2,zero,6528 <__lo0bits+0xa0>
    64a4:	1806d0ba 	srli	r3,r3,2
    64a8:	00800084 	movi	r2,2
    64ac:	20c00015 	stw	r3,0(r4)
    64b0:	f800283a 	ret
    64b4:	18bfffcc 	andi	r2,r3,65535
    64b8:	10001326 	beq	r2,zero,6508 <__lo0bits+0x80>
    64bc:	0005883a 	mov	r2,zero
    64c0:	19403fcc 	andi	r5,r3,255
    64c4:	2800021e 	bne	r5,zero,64d0 <__lo0bits+0x48>
    64c8:	1806d23a 	srli	r3,r3,8
    64cc:	10800204 	addi	r2,r2,8
    64d0:	194003cc 	andi	r5,r3,15
    64d4:	2800021e 	bne	r5,zero,64e0 <__lo0bits+0x58>
    64d8:	1806d13a 	srli	r3,r3,4
    64dc:	10800104 	addi	r2,r2,4
    64e0:	194000cc 	andi	r5,r3,3
    64e4:	2800021e 	bne	r5,zero,64f0 <__lo0bits+0x68>
    64e8:	1806d0ba 	srli	r3,r3,2
    64ec:	10800084 	addi	r2,r2,2
    64f0:	1940004c 	andi	r5,r3,1
    64f4:	2800081e 	bne	r5,zero,6518 <__lo0bits+0x90>
    64f8:	1806d07a 	srli	r3,r3,1
    64fc:	1800051e 	bne	r3,zero,6514 <__lo0bits+0x8c>
    6500:	00800804 	movi	r2,32
    6504:	f800283a 	ret
    6508:	1806d43a 	srli	r3,r3,16
    650c:	00800404 	movi	r2,16
    6510:	003feb06 	br	64c0 <__lo0bits+0x38>
    6514:	10800044 	addi	r2,r2,1
    6518:	20c00015 	stw	r3,0(r4)
    651c:	f800283a 	ret
    6520:	0005883a 	mov	r2,zero
    6524:	f800283a 	ret
    6528:	1806d07a 	srli	r3,r3,1
    652c:	00800044 	movi	r2,1
    6530:	20c00015 	stw	r3,0(r4)
    6534:	f800283a 	ret

00006538 <__i2b>:
    6538:	defffd04 	addi	sp,sp,-12
    653c:	dc000015 	stw	r16,0(sp)
    6540:	04000044 	movi	r16,1
    6544:	dc400115 	stw	r17,4(sp)
    6548:	2823883a 	mov	r17,r5
    654c:	800b883a 	mov	r5,r16
    6550:	dfc00215 	stw	ra,8(sp)
    6554:	00061380 	call	6138 <_Balloc>
    6558:	14400515 	stw	r17,20(r2)
    655c:	14000415 	stw	r16,16(r2)
    6560:	dfc00217 	ldw	ra,8(sp)
    6564:	dc400117 	ldw	r17,4(sp)
    6568:	dc000017 	ldw	r16,0(sp)
    656c:	dec00304 	addi	sp,sp,12
    6570:	f800283a 	ret

00006574 <__multiply>:
    6574:	defffa04 	addi	sp,sp,-24
    6578:	dcc00315 	stw	r19,12(sp)
    657c:	dc800215 	stw	r18,8(sp)
    6580:	2cc00417 	ldw	r19,16(r5)
    6584:	34800417 	ldw	r18,16(r6)
    6588:	dd000415 	stw	r20,16(sp)
    658c:	dc400115 	stw	r17,4(sp)
    6590:	dfc00515 	stw	ra,20(sp)
    6594:	dc000015 	stw	r16,0(sp)
    6598:	2829883a 	mov	r20,r5
    659c:	3023883a 	mov	r17,r6
    65a0:	9c807016 	blt	r19,r18,6764 <__multiply+0x1f0>
    65a4:	9005883a 	mov	r2,r18
    65a8:	9825883a 	mov	r18,r19
    65ac:	1027883a 	mov	r19,r2
    65b0:	a0800217 	ldw	r2,8(r20)
    65b4:	94e1883a 	add	r16,r18,r19
    65b8:	a1400117 	ldw	r5,4(r20)
    65bc:	1400010e 	bge	r2,r16,65c4 <__multiply+0x50>
    65c0:	29400044 	addi	r5,r5,1
    65c4:	00061380 	call	6138 <_Balloc>
    65c8:	8417883a 	add	r11,r16,r16
    65cc:	13000504 	addi	r12,r2,20
    65d0:	5ad7883a 	add	r11,r11,r11
    65d4:	62d7883a 	add	r11,r12,r11
    65d8:	6007883a 	mov	r3,r12
    65dc:	62c0032e 	bgeu	r12,r11,65ec <__multiply+0x78>
    65e0:	18000015 	stw	zero,0(r3)
    65e4:	18c00104 	addi	r3,r3,4
    65e8:	1afffd36 	bltu	r3,r11,65e0 <__multiply+0x6c>
    65ec:	9ce7883a 	add	r19,r19,r19
    65f0:	94a5883a 	add	r18,r18,r18
    65f4:	89800504 	addi	r6,r17,20
    65f8:	9ce7883a 	add	r19,r19,r19
    65fc:	a3800504 	addi	r14,r20,20
    6600:	94a5883a 	add	r18,r18,r18
    6604:	34db883a 	add	r13,r6,r19
    6608:	7495883a 	add	r10,r14,r18
    660c:	3340422e 	bgeu	r6,r13,6718 <__multiply+0x1a4>
    6610:	34400017 	ldw	r17,0(r6)
    6614:	8cbfffcc 	andi	r18,r17,65535
    6618:	90001b26 	beq	r18,zero,6688 <__multiply+0x114>
    661c:	6013883a 	mov	r9,r12
    6620:	7023883a 	mov	r17,r14
    6624:	0011883a 	mov	r8,zero
    6628:	88c00017 	ldw	r3,0(r17)
    662c:	4bc00017 	ldw	r15,0(r9)
    6630:	8c400104 	addi	r17,r17,4
    6634:	19ffffcc 	andi	r7,r3,65535
    6638:	3c8f383a 	mul	r7,r7,r18
    663c:	1808d43a 	srli	r4,r3,16
    6640:	797fffcc 	andi	r5,r15,65535
    6644:	29cb883a 	add	r5,r5,r7
    6648:	2a0b883a 	add	r5,r5,r8
    664c:	2489383a 	mul	r4,r4,r18
    6650:	7806d43a 	srli	r3,r15,16
    6654:	2810d43a 	srli	r8,r5,16
    6658:	297fffcc 	andi	r5,r5,65535
    665c:	1907883a 	add	r3,r3,r4
    6660:	1a07883a 	add	r3,r3,r8
    6664:	1808943a 	slli	r4,r3,16
    6668:	480f883a 	mov	r7,r9
    666c:	1810d43a 	srli	r8,r3,16
    6670:	214ab03a 	or	r5,r4,r5
    6674:	49400015 	stw	r5,0(r9)
    6678:	4a400104 	addi	r9,r9,4
    667c:	8abfea36 	bltu	r17,r10,6628 <__multiply+0xb4>
    6680:	3a000115 	stw	r8,4(r7)
    6684:	34400017 	ldw	r17,0(r6)
    6688:	8822d43a 	srli	r17,r17,16
    668c:	88001f26 	beq	r17,zero,670c <__multiply+0x198>
    6690:	60c00017 	ldw	r3,0(r12)
    6694:	7013883a 	mov	r9,r14
    6698:	601f883a 	mov	r15,r12
    669c:	1811883a 	mov	r8,r3
    66a0:	6027883a 	mov	r19,r12
    66a4:	000f883a 	mov	r7,zero
    66a8:	00000106 	br	66b0 <__multiply+0x13c>
    66ac:	9027883a 	mov	r19,r18
    66b0:	4940000b 	ldhu	r5,0(r9)
    66b4:	4010d43a 	srli	r8,r8,16
    66b8:	193fffcc 	andi	r4,r3,65535
    66bc:	2c4b383a 	mul	r5,r5,r17
    66c0:	7bc00104 	addi	r15,r15,4
    66c4:	4a400104 	addi	r9,r9,4
    66c8:	2a0b883a 	add	r5,r5,r8
    66cc:	29cb883a 	add	r5,r5,r7
    66d0:	2806943a 	slli	r3,r5,16
    66d4:	9c800104 	addi	r18,r19,4
    66d8:	280ad43a 	srli	r5,r5,16
    66dc:	1908b03a 	or	r4,r3,r4
    66e0:	793fff15 	stw	r4,-4(r15)
    66e4:	48ffff17 	ldw	r3,-4(r9)
    66e8:	92000017 	ldw	r8,0(r18)
    66ec:	1806d43a 	srli	r3,r3,16
    66f0:	413fffcc 	andi	r4,r8,65535
    66f4:	1c47383a 	mul	r3,r3,r17
    66f8:	1907883a 	add	r3,r3,r4
    66fc:	1947883a 	add	r3,r3,r5
    6700:	180ed43a 	srli	r7,r3,16
    6704:	4abfe936 	bltu	r9,r10,66ac <__multiply+0x138>
    6708:	98c00115 	stw	r3,4(r19)
    670c:	31800104 	addi	r6,r6,4
    6710:	63000104 	addi	r12,r12,4
    6714:	337fbe36 	bltu	r6,r13,6610 <__multiply+0x9c>
    6718:	0400090e 	bge	zero,r16,6740 <__multiply+0x1cc>
    671c:	58ffff17 	ldw	r3,-4(r11)
    6720:	5affff04 	addi	r11,r11,-4
    6724:	18000326 	beq	r3,zero,6734 <__multiply+0x1c0>
    6728:	00000506 	br	6740 <__multiply+0x1cc>
    672c:	58c00017 	ldw	r3,0(r11)
    6730:	1800031e 	bne	r3,zero,6740 <__multiply+0x1cc>
    6734:	843fffc4 	addi	r16,r16,-1
    6738:	5affff04 	addi	r11,r11,-4
    673c:	803ffb1e 	bne	r16,zero,672c <__multiply+0x1b8>
    6740:	14000415 	stw	r16,16(r2)
    6744:	dfc00517 	ldw	ra,20(sp)
    6748:	dd000417 	ldw	r20,16(sp)
    674c:	dcc00317 	ldw	r19,12(sp)
    6750:	dc800217 	ldw	r18,8(sp)
    6754:	dc400117 	ldw	r17,4(sp)
    6758:	dc000017 	ldw	r16,0(sp)
    675c:	dec00604 	addi	sp,sp,24
    6760:	f800283a 	ret
    6764:	3029883a 	mov	r20,r6
    6768:	2823883a 	mov	r17,r5
    676c:	003f9006 	br	65b0 <__multiply+0x3c>

00006770 <__pow5mult>:
    6770:	defffa04 	addi	sp,sp,-24
    6774:	dcc00315 	stw	r19,12(sp)
    6778:	dc800215 	stw	r18,8(sp)
    677c:	dc000015 	stw	r16,0(sp)
    6780:	dfc00515 	stw	ra,20(sp)
    6784:	dd000415 	stw	r20,16(sp)
    6788:	dc400115 	stw	r17,4(sp)
    678c:	308000cc 	andi	r2,r6,3
    6790:	3021883a 	mov	r16,r6
    6794:	2027883a 	mov	r19,r4
    6798:	2825883a 	mov	r18,r5
    679c:	10002e1e 	bne	r2,zero,6858 <__pow5mult+0xe8>
    67a0:	8021d0ba 	srai	r16,r16,2
    67a4:	80001a26 	beq	r16,zero,6810 <__pow5mult+0xa0>
    67a8:	9c401217 	ldw	r17,72(r19)
    67ac:	8800061e 	bne	r17,zero,67c8 <__pow5mult+0x58>
    67b0:	00003406 	br	6884 <__pow5mult+0x114>
    67b4:	8021d07a 	srai	r16,r16,1
    67b8:	80001526 	beq	r16,zero,6810 <__pow5mult+0xa0>
    67bc:	88800017 	ldw	r2,0(r17)
    67c0:	10001c26 	beq	r2,zero,6834 <__pow5mult+0xc4>
    67c4:	1023883a 	mov	r17,r2
    67c8:	80c0004c 	andi	r3,r16,1
    67cc:	183ff926 	beq	r3,zero,67b4 <__pow5mult+0x44>
    67d0:	900b883a 	mov	r5,r18
    67d4:	880d883a 	mov	r6,r17
    67d8:	9809883a 	mov	r4,r19
    67dc:	00065740 	call	6574 <__multiply>
    67e0:	90001b26 	beq	r18,zero,6850 <__pow5mult+0xe0>
    67e4:	91c00117 	ldw	r7,4(r18)
    67e8:	98c01317 	ldw	r3,76(r19)
    67ec:	8021d07a 	srai	r16,r16,1
    67f0:	39cf883a 	add	r7,r7,r7
    67f4:	39cf883a 	add	r7,r7,r7
    67f8:	19c7883a 	add	r3,r3,r7
    67fc:	19000017 	ldw	r4,0(r3)
    6800:	91000015 	stw	r4,0(r18)
    6804:	1c800015 	stw	r18,0(r3)
    6808:	1025883a 	mov	r18,r2
    680c:	803feb1e 	bne	r16,zero,67bc <__pow5mult+0x4c>
    6810:	9005883a 	mov	r2,r18
    6814:	dfc00517 	ldw	ra,20(sp)
    6818:	dd000417 	ldw	r20,16(sp)
    681c:	dcc00317 	ldw	r19,12(sp)
    6820:	dc800217 	ldw	r18,8(sp)
    6824:	dc400117 	ldw	r17,4(sp)
    6828:	dc000017 	ldw	r16,0(sp)
    682c:	dec00604 	addi	sp,sp,24
    6830:	f800283a 	ret
    6834:	9809883a 	mov	r4,r19
    6838:	880b883a 	mov	r5,r17
    683c:	880d883a 	mov	r6,r17
    6840:	00065740 	call	6574 <__multiply>
    6844:	88800015 	stw	r2,0(r17)
    6848:	10000015 	stw	zero,0(r2)
    684c:	003fdd06 	br	67c4 <__pow5mult+0x54>
    6850:	1025883a 	mov	r18,r2
    6854:	003fd706 	br	67b4 <__pow5mult+0x44>
    6858:	10bfffc4 	addi	r2,r2,-1
    685c:	1085883a 	add	r2,r2,r2
    6860:	00c00074 	movhi	r3,1
    6864:	18fe7a04 	addi	r3,r3,-1560
    6868:	1085883a 	add	r2,r2,r2
    686c:	1885883a 	add	r2,r3,r2
    6870:	11800017 	ldw	r6,0(r2)
    6874:	000f883a 	mov	r7,zero
    6878:	00062080 	call	6208 <__multadd>
    687c:	1025883a 	mov	r18,r2
    6880:	003fc706 	br	67a0 <__pow5mult+0x30>
    6884:	05000044 	movi	r20,1
    6888:	9809883a 	mov	r4,r19
    688c:	a00b883a 	mov	r5,r20
    6890:	00061380 	call	6138 <_Balloc>
    6894:	1023883a 	mov	r17,r2
    6898:	00809c44 	movi	r2,625
    689c:	88800515 	stw	r2,20(r17)
    68a0:	8d000415 	stw	r20,16(r17)
    68a4:	9c401215 	stw	r17,72(r19)
    68a8:	88000015 	stw	zero,0(r17)
    68ac:	003fc606 	br	67c8 <__pow5mult+0x58>

000068b0 <__lshift>:
    68b0:	defff904 	addi	sp,sp,-28
    68b4:	dd000415 	stw	r20,16(sp)
    68b8:	dcc00315 	stw	r19,12(sp)
    68bc:	3029d17a 	srai	r20,r6,5
    68c0:	2cc00417 	ldw	r19,16(r5)
    68c4:	28800217 	ldw	r2,8(r5)
    68c8:	dd400515 	stw	r21,20(sp)
    68cc:	a4e7883a 	add	r19,r20,r19
    68d0:	dc800215 	stw	r18,8(sp)
    68d4:	dc400115 	stw	r17,4(sp)
    68d8:	dc000015 	stw	r16,0(sp)
    68dc:	dfc00615 	stw	ra,24(sp)
    68e0:	9c000044 	addi	r16,r19,1
    68e4:	2823883a 	mov	r17,r5
    68e8:	302b883a 	mov	r21,r6
    68ec:	2025883a 	mov	r18,r4
    68f0:	29400117 	ldw	r5,4(r5)
    68f4:	1400030e 	bge	r2,r16,6904 <__lshift+0x54>
    68f8:	1085883a 	add	r2,r2,r2
    68fc:	29400044 	addi	r5,r5,1
    6900:	143ffd16 	blt	r2,r16,68f8 <__lshift+0x48>
    6904:	9009883a 	mov	r4,r18
    6908:	00061380 	call	6138 <_Balloc>
    690c:	11c00504 	addi	r7,r2,20
    6910:	0500090e 	bge	zero,r20,6938 <__lshift+0x88>
    6914:	3811883a 	mov	r8,r7
    6918:	0007883a 	mov	r3,zero
    691c:	40000015 	stw	zero,0(r8)
    6920:	18c00044 	addi	r3,r3,1
    6924:	42000104 	addi	r8,r8,4
    6928:	1d3ffc1e 	bne	r3,r20,691c <__lshift+0x6c>
    692c:	18c7883a 	add	r3,r3,r3
    6930:	18c7883a 	add	r3,r3,r3
    6934:	38cf883a 	add	r7,r7,r3
    6938:	89000417 	ldw	r4,16(r17)
    693c:	88c00504 	addi	r3,r17,20
    6940:	a98007cc 	andi	r6,r21,31
    6944:	2109883a 	add	r4,r4,r4
    6948:	2109883a 	add	r4,r4,r4
    694c:	1909883a 	add	r4,r3,r4
    6950:	30002326 	beq	r6,zero,69e0 <__lshift+0x130>
    6954:	01400804 	movi	r5,32
    6958:	298bc83a 	sub	r5,r5,r6
    695c:	0013883a 	mov	r9,zero
    6960:	1a000017 	ldw	r8,0(r3)
    6964:	3815883a 	mov	r10,r7
    6968:	39c00104 	addi	r7,r7,4
    696c:	4190983a 	sll	r8,r8,r6
    6970:	18c00104 	addi	r3,r3,4
    6974:	4a10b03a 	or	r8,r9,r8
    6978:	3a3fff15 	stw	r8,-4(r7)
    697c:	1a3fff17 	ldw	r8,-4(r3)
    6980:	4152d83a 	srl	r9,r8,r5
    6984:	193ff636 	bltu	r3,r4,6960 <__lshift+0xb0>
    6988:	52400115 	stw	r9,4(r10)
    698c:	48000126 	beq	r9,zero,6994 <__lshift+0xe4>
    6990:	9c000084 	addi	r16,r19,2
    6994:	89000117 	ldw	r4,4(r17)
    6998:	90c01317 	ldw	r3,76(r18)
    699c:	843fffc4 	addi	r16,r16,-1
    69a0:	2109883a 	add	r4,r4,r4
    69a4:	2109883a 	add	r4,r4,r4
    69a8:	1907883a 	add	r3,r3,r4
    69ac:	19000017 	ldw	r4,0(r3)
    69b0:	14000415 	stw	r16,16(r2)
    69b4:	89000015 	stw	r4,0(r17)
    69b8:	1c400015 	stw	r17,0(r3)
    69bc:	dfc00617 	ldw	ra,24(sp)
    69c0:	dd400517 	ldw	r21,20(sp)
    69c4:	dd000417 	ldw	r20,16(sp)
    69c8:	dcc00317 	ldw	r19,12(sp)
    69cc:	dc800217 	ldw	r18,8(sp)
    69d0:	dc400117 	ldw	r17,4(sp)
    69d4:	dc000017 	ldw	r16,0(sp)
    69d8:	dec00704 	addi	sp,sp,28
    69dc:	f800283a 	ret
    69e0:	19400017 	ldw	r5,0(r3)
    69e4:	39c00104 	addi	r7,r7,4
    69e8:	18c00104 	addi	r3,r3,4
    69ec:	397fff15 	stw	r5,-4(r7)
    69f0:	193ffb36 	bltu	r3,r4,69e0 <__lshift+0x130>
    69f4:	003fe706 	br	6994 <__lshift+0xe4>

000069f8 <__mcmp>:
    69f8:	20800417 	ldw	r2,16(r4)
    69fc:	28c00417 	ldw	r3,16(r5)
    6a00:	10c5c83a 	sub	r2,r2,r3
    6a04:	1000111e 	bne	r2,zero,6a4c <__mcmp+0x54>
    6a08:	18c7883a 	add	r3,r3,r3
    6a0c:	18c7883a 	add	r3,r3,r3
    6a10:	21000504 	addi	r4,r4,20
    6a14:	29400504 	addi	r5,r5,20
    6a18:	20c5883a 	add	r2,r4,r3
    6a1c:	28cb883a 	add	r5,r5,r3
    6a20:	00000106 	br	6a28 <__mcmp+0x30>
    6a24:	20800a2e 	bgeu	r4,r2,6a50 <__mcmp+0x58>
    6a28:	10bfff04 	addi	r2,r2,-4
    6a2c:	297fff04 	addi	r5,r5,-4
    6a30:	11800017 	ldw	r6,0(r2)
    6a34:	28c00017 	ldw	r3,0(r5)
    6a38:	30fffa26 	beq	r6,r3,6a24 <__mcmp+0x2c>
    6a3c:	30c00236 	bltu	r6,r3,6a48 <__mcmp+0x50>
    6a40:	00800044 	movi	r2,1
    6a44:	f800283a 	ret
    6a48:	00bfffc4 	movi	r2,-1
    6a4c:	f800283a 	ret
    6a50:	0005883a 	mov	r2,zero
    6a54:	f800283a 	ret

00006a58 <__mdiff>:
    6a58:	defffb04 	addi	sp,sp,-20
    6a5c:	dc000015 	stw	r16,0(sp)
    6a60:	2821883a 	mov	r16,r5
    6a64:	dcc00315 	stw	r19,12(sp)
    6a68:	300b883a 	mov	r5,r6
    6a6c:	2027883a 	mov	r19,r4
    6a70:	8009883a 	mov	r4,r16
    6a74:	dc800215 	stw	r18,8(sp)
    6a78:	dfc00415 	stw	ra,16(sp)
    6a7c:	dc400115 	stw	r17,4(sp)
    6a80:	3025883a 	mov	r18,r6
    6a84:	00069f80 	call	69f8 <__mcmp>
    6a88:	10005226 	beq	r2,zero,6bd4 <__mdiff+0x17c>
    6a8c:	10004c16 	blt	r2,zero,6bc0 <__mdiff+0x168>
    6a90:	0023883a 	mov	r17,zero
    6a94:	81400117 	ldw	r5,4(r16)
    6a98:	9809883a 	mov	r4,r19
    6a9c:	00061380 	call	6138 <_Balloc>
    6aa0:	83400417 	ldw	r13,16(r16)
    6aa4:	93800417 	ldw	r14,16(r18)
    6aa8:	81000504 	addi	r4,r16,20
    6aac:	6b59883a 	add	r12,r13,r13
    6ab0:	739d883a 	add	r14,r14,r14
    6ab4:	6319883a 	add	r12,r12,r12
    6ab8:	91800504 	addi	r6,r18,20
    6abc:	739d883a 	add	r14,r14,r14
    6ac0:	14400315 	stw	r17,12(r2)
    6ac4:	2319883a 	add	r12,r4,r12
    6ac8:	339d883a 	add	r14,r6,r14
    6acc:	12400504 	addi	r9,r2,20
    6ad0:	0007883a 	mov	r3,zero
    6ad4:	22000017 	ldw	r8,0(r4)
    6ad8:	32800017 	ldw	r10,0(r6)
    6adc:	4ac00104 	addi	r11,r9,4
    6ae0:	41ffffcc 	andi	r7,r8,65535
    6ae4:	38c7883a 	add	r3,r7,r3
    6ae8:	51ffffcc 	andi	r7,r10,65535
    6aec:	19cfc83a 	sub	r7,r3,r7
    6af0:	4010d43a 	srli	r8,r8,16
    6af4:	5014d43a 	srli	r10,r10,16
    6af8:	3807d43a 	srai	r3,r7,16
    6afc:	39ffffcc 	andi	r7,r7,65535
    6b00:	4291c83a 	sub	r8,r8,r10
    6b04:	40c7883a 	add	r3,r8,r3
    6b08:	1810943a 	slli	r8,r3,16
    6b0c:	31800104 	addi	r6,r6,4
    6b10:	21000104 	addi	r4,r4,4
    6b14:	41ceb03a 	or	r7,r8,r7
    6b18:	49c00015 	stw	r7,0(r9)
    6b1c:	1807d43a 	srai	r3,r3,16
    6b20:	580b883a 	mov	r5,r11
    6b24:	5813883a 	mov	r9,r11
    6b28:	33bfea36 	bltu	r6,r14,6ad4 <__mdiff+0x7c>
    6b2c:	2011883a 	mov	r8,r4
    6b30:	2300152e 	bgeu	r4,r12,6b88 <__mdiff+0x130>
    6b34:	21400017 	ldw	r5,0(r4)
    6b38:	4a400104 	addi	r9,r9,4
    6b3c:	21000104 	addi	r4,r4,4
    6b40:	29ffffcc 	andi	r7,r5,65535
    6b44:	38c7883a 	add	r3,r7,r3
    6b48:	280ad43a 	srli	r5,r5,16
    6b4c:	180dd43a 	srai	r6,r3,16
    6b50:	19ffffcc 	andi	r7,r3,65535
    6b54:	3147883a 	add	r3,r6,r5
    6b58:	180a943a 	slli	r5,r3,16
    6b5c:	1807d43a 	srai	r3,r3,16
    6b60:	29ceb03a 	or	r7,r5,r7
    6b64:	49ffff15 	stw	r7,-4(r9)
    6b68:	233ff236 	bltu	r4,r12,6b34 <__mdiff+0xdc>
    6b6c:	0206303a 	nor	r3,zero,r8
    6b70:	1b07883a 	add	r3,r3,r12
    6b74:	1806d0ba 	srli	r3,r3,2
    6b78:	18c00044 	addi	r3,r3,1
    6b7c:	18c7883a 	add	r3,r3,r3
    6b80:	18c7883a 	add	r3,r3,r3
    6b84:	58cb883a 	add	r5,r11,r3
    6b88:	28ffff04 	addi	r3,r5,-4
    6b8c:	3800041e 	bne	r7,zero,6ba0 <__mdiff+0x148>
    6b90:	18ffff04 	addi	r3,r3,-4
    6b94:	19000017 	ldw	r4,0(r3)
    6b98:	6b7fffc4 	addi	r13,r13,-1
    6b9c:	203ffc26 	beq	r4,zero,6b90 <__mdiff+0x138>
    6ba0:	13400415 	stw	r13,16(r2)
    6ba4:	dfc00417 	ldw	ra,16(sp)
    6ba8:	dcc00317 	ldw	r19,12(sp)
    6bac:	dc800217 	ldw	r18,8(sp)
    6bb0:	dc400117 	ldw	r17,4(sp)
    6bb4:	dc000017 	ldw	r16,0(sp)
    6bb8:	dec00504 	addi	sp,sp,20
    6bbc:	f800283a 	ret
    6bc0:	8005883a 	mov	r2,r16
    6bc4:	04400044 	movi	r17,1
    6bc8:	9021883a 	mov	r16,r18
    6bcc:	1025883a 	mov	r18,r2
    6bd0:	003fb006 	br	6a94 <__mdiff+0x3c>
    6bd4:	9809883a 	mov	r4,r19
    6bd8:	000b883a 	mov	r5,zero
    6bdc:	00061380 	call	6138 <_Balloc>
    6be0:	00c00044 	movi	r3,1
    6be4:	10c00415 	stw	r3,16(r2)
    6be8:	10000515 	stw	zero,20(r2)
    6bec:	003fed06 	br	6ba4 <__mdiff+0x14c>

00006bf0 <__ulp>:
    6bf0:	295ffc2c 	andhi	r5,r5,32752
    6bf4:	00bf3034 	movhi	r2,64704
    6bf8:	2887883a 	add	r3,r5,r2
    6bfc:	00c0020e 	bge	zero,r3,6c08 <__ulp+0x18>
    6c00:	0005883a 	mov	r2,zero
    6c04:	f800283a 	ret
    6c08:	00c7c83a 	sub	r3,zero,r3
    6c0c:	180bd53a 	srai	r5,r3,20
    6c10:	008004c4 	movi	r2,19
    6c14:	11400a0e 	bge	r2,r5,6c40 <__ulp+0x50>
    6c18:	00800c84 	movi	r2,50
    6c1c:	0007883a 	mov	r3,zero
    6c20:	11400516 	blt	r2,r5,6c38 <__ulp+0x48>
    6c24:	00800cc4 	movi	r2,51
    6c28:	114bc83a 	sub	r5,r2,r5
    6c2c:	00800044 	movi	r2,1
    6c30:	1144983a 	sll	r2,r2,r5
    6c34:	f800283a 	ret
    6c38:	00800044 	movi	r2,1
    6c3c:	f800283a 	ret
    6c40:	00800234 	movhi	r2,8
    6c44:	1147d83a 	sra	r3,r2,r5
    6c48:	0005883a 	mov	r2,zero
    6c4c:	f800283a 	ret

00006c50 <__b2d>:
    6c50:	defffa04 	addi	sp,sp,-24
    6c54:	dc000015 	stw	r16,0(sp)
    6c58:	24000417 	ldw	r16,16(r4)
    6c5c:	dc400115 	stw	r17,4(sp)
    6c60:	24400504 	addi	r17,r4,20
    6c64:	8421883a 	add	r16,r16,r16
    6c68:	8421883a 	add	r16,r16,r16
    6c6c:	8c21883a 	add	r16,r17,r16
    6c70:	dc800215 	stw	r18,8(sp)
    6c74:	84bfff17 	ldw	r18,-4(r16)
    6c78:	dd000415 	stw	r20,16(sp)
    6c7c:	dcc00315 	stw	r19,12(sp)
    6c80:	9009883a 	mov	r4,r18
    6c84:	2829883a 	mov	r20,r5
    6c88:	dfc00515 	stw	ra,20(sp)
    6c8c:	00064200 	call	6420 <__hi0bits>
    6c90:	00c00804 	movi	r3,32
    6c94:	1887c83a 	sub	r3,r3,r2
    6c98:	a0c00015 	stw	r3,0(r20)
    6c9c:	00c00284 	movi	r3,10
    6ca0:	84ffff04 	addi	r19,r16,-4
    6ca4:	18801216 	blt	r3,r2,6cf0 <__b2d+0xa0>
    6ca8:	014002c4 	movi	r5,11
    6cac:	2889c83a 	sub	r4,r5,r2
    6cb0:	9106d83a 	srl	r3,r18,r4
    6cb4:	18cffc34 	orhi	r3,r3,16368
    6cb8:	8cc0282e 	bgeu	r17,r19,6d5c <__b2d+0x10c>
    6cbc:	817ffe17 	ldw	r5,-8(r16)
    6cc0:	290ad83a 	srl	r5,r5,r4
    6cc4:	10800544 	addi	r2,r2,21
    6cc8:	9084983a 	sll	r2,r18,r2
    6ccc:	2884b03a 	or	r2,r5,r2
    6cd0:	dfc00517 	ldw	ra,20(sp)
    6cd4:	dd000417 	ldw	r20,16(sp)
    6cd8:	dcc00317 	ldw	r19,12(sp)
    6cdc:	dc800217 	ldw	r18,8(sp)
    6ce0:	dc400117 	ldw	r17,4(sp)
    6ce4:	dc000017 	ldw	r16,0(sp)
    6ce8:	dec00604 	addi	sp,sp,24
    6cec:	f800283a 	ret
    6cf0:	113ffd44 	addi	r4,r2,-11
    6cf4:	8cc00f2e 	bgeu	r17,r19,6d34 <__b2d+0xe4>
    6cf8:	81bffe04 	addi	r6,r16,-8
    6cfc:	817ffe17 	ldw	r5,-8(r16)
    6d00:	20001326 	beq	r4,zero,6d50 <__b2d+0x100>
    6d04:	00c00ac4 	movi	r3,43
    6d08:	1885c83a 	sub	r2,r3,r2
    6d0c:	2886d83a 	srl	r3,r5,r2
    6d10:	9124983a 	sll	r18,r18,r4
    6d14:	90e4b03a 	or	r18,r18,r3
    6d18:	90cffc34 	orhi	r3,r18,16368
    6d1c:	8980112e 	bgeu	r17,r6,6d64 <__b2d+0x114>
    6d20:	81bffd17 	ldw	r6,-12(r16)
    6d24:	308cd83a 	srl	r6,r6,r2
    6d28:	2904983a 	sll	r2,r5,r4
    6d2c:	1184b03a 	or	r2,r2,r6
    6d30:	003fe706 	br	6cd0 <__b2d+0x80>
    6d34:	20000526 	beq	r4,zero,6d4c <__b2d+0xfc>
    6d38:	9124983a 	sll	r18,r18,r4
    6d3c:	000d883a 	mov	r6,zero
    6d40:	000b883a 	mov	r5,zero
    6d44:	90cffc34 	orhi	r3,r18,16368
    6d48:	003ff706 	br	6d28 <__b2d+0xd8>
    6d4c:	000b883a 	mov	r5,zero
    6d50:	90cffc34 	orhi	r3,r18,16368
    6d54:	2805883a 	mov	r2,r5
    6d58:	003fdd06 	br	6cd0 <__b2d+0x80>
    6d5c:	000b883a 	mov	r5,zero
    6d60:	003fd806 	br	6cc4 <__b2d+0x74>
    6d64:	000d883a 	mov	r6,zero
    6d68:	003fef06 	br	6d28 <__b2d+0xd8>

00006d6c <__d2b>:
    6d6c:	defff704 	addi	sp,sp,-36
    6d70:	dc000215 	stw	r16,8(sp)
    6d74:	3021883a 	mov	r16,r6
    6d78:	dc400315 	stw	r17,12(sp)
    6d7c:	8022907a 	slli	r17,r16,1
    6d80:	dd400715 	stw	r21,28(sp)
    6d84:	282b883a 	mov	r21,r5
    6d88:	01400044 	movi	r5,1
    6d8c:	dd000615 	stw	r20,24(sp)
    6d90:	dcc00515 	stw	r19,20(sp)
    6d94:	dc800415 	stw	r18,16(sp)
    6d98:	dfc00815 	stw	ra,32(sp)
    6d9c:	3829883a 	mov	r20,r7
    6da0:	dc800917 	ldw	r18,36(sp)
    6da4:	8822d57a 	srli	r17,r17,21
    6da8:	00061380 	call	6138 <_Balloc>
    6dac:	1027883a 	mov	r19,r2
    6db0:	00800434 	movhi	r2,16
    6db4:	10bfffc4 	addi	r2,r2,-1
    6db8:	808c703a 	and	r6,r16,r2
    6dbc:	88000126 	beq	r17,zero,6dc4 <__d2b+0x58>
    6dc0:	31800434 	orhi	r6,r6,16
    6dc4:	d9800015 	stw	r6,0(sp)
    6dc8:	a8001f26 	beq	r21,zero,6e48 <__d2b+0xdc>
    6dcc:	d9000104 	addi	r4,sp,4
    6dd0:	dd400115 	stw	r21,4(sp)
    6dd4:	00064880 	call	6488 <__lo0bits>
    6dd8:	d8c00017 	ldw	r3,0(sp)
    6ddc:	1000291e 	bne	r2,zero,6e84 <__d2b+0x118>
    6de0:	d9000117 	ldw	r4,4(sp)
    6de4:	99000515 	stw	r4,20(r19)
    6de8:	1820c03a 	cmpne	r16,r3,zero
    6dec:	84000044 	addi	r16,r16,1
    6df0:	98c00615 	stw	r3,24(r19)
    6df4:	9c000415 	stw	r16,16(r19)
    6df8:	88001b1e 	bne	r17,zero,6e68 <__d2b+0xfc>
    6dfc:	800690ba 	slli	r3,r16,2
    6e00:	10bef384 	addi	r2,r2,-1074
    6e04:	a0800015 	stw	r2,0(r20)
    6e08:	98c5883a 	add	r2,r19,r3
    6e0c:	11000417 	ldw	r4,16(r2)
    6e10:	8020917a 	slli	r16,r16,5
    6e14:	00064200 	call	6420 <__hi0bits>
    6e18:	8085c83a 	sub	r2,r16,r2
    6e1c:	90800015 	stw	r2,0(r18)
    6e20:	9805883a 	mov	r2,r19
    6e24:	dfc00817 	ldw	ra,32(sp)
    6e28:	dd400717 	ldw	r21,28(sp)
    6e2c:	dd000617 	ldw	r20,24(sp)
    6e30:	dcc00517 	ldw	r19,20(sp)
    6e34:	dc800417 	ldw	r18,16(sp)
    6e38:	dc400317 	ldw	r17,12(sp)
    6e3c:	dc000217 	ldw	r16,8(sp)
    6e40:	dec00904 	addi	sp,sp,36
    6e44:	f800283a 	ret
    6e48:	d809883a 	mov	r4,sp
    6e4c:	00064880 	call	6488 <__lo0bits>
    6e50:	d8c00017 	ldw	r3,0(sp)
    6e54:	04000044 	movi	r16,1
    6e58:	9c000415 	stw	r16,16(r19)
    6e5c:	98c00515 	stw	r3,20(r19)
    6e60:	10800804 	addi	r2,r2,32
    6e64:	883fe526 	beq	r17,zero,6dfc <__d2b+0x90>
    6e68:	8c7ef344 	addi	r17,r17,-1075
    6e6c:	88a3883a 	add	r17,r17,r2
    6e70:	00c00d44 	movi	r3,53
    6e74:	a4400015 	stw	r17,0(r20)
    6e78:	1885c83a 	sub	r2,r3,r2
    6e7c:	90800015 	stw	r2,0(r18)
    6e80:	003fe706 	br	6e20 <__d2b+0xb4>
    6e84:	01000804 	movi	r4,32
    6e88:	2089c83a 	sub	r4,r4,r2
    6e8c:	1908983a 	sll	r4,r3,r4
    6e90:	d9400117 	ldw	r5,4(sp)
    6e94:	1886d83a 	srl	r3,r3,r2
    6e98:	2148b03a 	or	r4,r4,r5
    6e9c:	99000515 	stw	r4,20(r19)
    6ea0:	d8c00015 	stw	r3,0(sp)
    6ea4:	003fd006 	br	6de8 <__d2b+0x7c>

00006ea8 <__ratio>:
    6ea8:	defff904 	addi	sp,sp,-28
    6eac:	dc400315 	stw	r17,12(sp)
    6eb0:	2823883a 	mov	r17,r5
    6eb4:	d9400104 	addi	r5,sp,4
    6eb8:	dfc00615 	stw	ra,24(sp)
    6ebc:	dcc00515 	stw	r19,20(sp)
    6ec0:	dc800415 	stw	r18,16(sp)
    6ec4:	2027883a 	mov	r19,r4
    6ec8:	dc000215 	stw	r16,8(sp)
    6ecc:	0006c500 	call	6c50 <__b2d>
    6ed0:	8809883a 	mov	r4,r17
    6ed4:	d80b883a 	mov	r5,sp
    6ed8:	1025883a 	mov	r18,r2
    6edc:	1821883a 	mov	r16,r3
    6ee0:	0006c500 	call	6c50 <__b2d>
    6ee4:	8a400417 	ldw	r9,16(r17)
    6ee8:	9a000417 	ldw	r8,16(r19)
    6eec:	100d883a 	mov	r6,r2
    6ef0:	d8800017 	ldw	r2,0(sp)
    6ef4:	4251c83a 	sub	r8,r8,r9
    6ef8:	4012917a 	slli	r9,r8,5
    6efc:	da000117 	ldw	r8,4(sp)
    6f00:	4091c83a 	sub	r8,r8,r2
    6f04:	4251883a 	add	r8,r8,r9
    6f08:	02000d0e 	bge	zero,r8,6f40 <__ratio+0x98>
    6f0c:	4010953a 	slli	r8,r8,20
    6f10:	4421883a 	add	r16,r8,r16
    6f14:	9009883a 	mov	r4,r18
    6f18:	800b883a 	mov	r5,r16
    6f1c:	180f883a 	mov	r7,r3
    6f20:	000b2880 	call	b288 <__divdf3>
    6f24:	dfc00617 	ldw	ra,24(sp)
    6f28:	dcc00517 	ldw	r19,20(sp)
    6f2c:	dc800417 	ldw	r18,16(sp)
    6f30:	dc400317 	ldw	r17,12(sp)
    6f34:	dc000217 	ldw	r16,8(sp)
    6f38:	dec00704 	addi	sp,sp,28
    6f3c:	f800283a 	ret
    6f40:	4010953a 	slli	r8,r8,20
    6f44:	1a07c83a 	sub	r3,r3,r8
    6f48:	003ff206 	br	6f14 <__ratio+0x6c>

00006f4c <_mprec_log10>:
    6f4c:	defffe04 	addi	sp,sp,-8
    6f50:	dc000015 	stw	r16,0(sp)
    6f54:	dfc00115 	stw	ra,4(sp)
    6f58:	008005c4 	movi	r2,23
    6f5c:	2021883a 	mov	r16,r4
    6f60:	11000d0e 	bge	r2,r4,6f98 <_mprec_log10+0x4c>
    6f64:	0005883a 	mov	r2,zero
    6f68:	00cffc34 	movhi	r3,16368
    6f6c:	843fffc4 	addi	r16,r16,-1
    6f70:	1009883a 	mov	r4,r2
    6f74:	180b883a 	mov	r5,r3
    6f78:	000d883a 	mov	r6,zero
    6f7c:	01d00934 	movhi	r7,16420
    6f80:	000bd980 	call	bd98 <__muldf3>
    6f84:	803ff91e 	bne	r16,zero,6f6c <_mprec_log10+0x20>
    6f88:	dfc00117 	ldw	ra,4(sp)
    6f8c:	dc000017 	ldw	r16,0(sp)
    6f90:	dec00204 	addi	sp,sp,8
    6f94:	f800283a 	ret
    6f98:	202090fa 	slli	r16,r4,3
    6f9c:	00800074 	movhi	r2,1
    6fa0:	10be9104 	addi	r2,r2,-1468
    6fa4:	1421883a 	add	r16,r2,r16
    6fa8:	80800017 	ldw	r2,0(r16)
    6fac:	80c00117 	ldw	r3,4(r16)
    6fb0:	dfc00117 	ldw	ra,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00204 	addi	sp,sp,8
    6fbc:	f800283a 	ret

00006fc0 <__copybits>:
    6fc0:	297fffc4 	addi	r5,r5,-1
    6fc4:	280fd17a 	srai	r7,r5,5
    6fc8:	30c00417 	ldw	r3,16(r6)
    6fcc:	30800504 	addi	r2,r6,20
    6fd0:	39c00044 	addi	r7,r7,1
    6fd4:	18c7883a 	add	r3,r3,r3
    6fd8:	39cf883a 	add	r7,r7,r7
    6fdc:	18c7883a 	add	r3,r3,r3
    6fe0:	39cf883a 	add	r7,r7,r7
    6fe4:	10c7883a 	add	r3,r2,r3
    6fe8:	21cf883a 	add	r7,r4,r7
    6fec:	10c00d2e 	bgeu	r2,r3,7024 <__copybits+0x64>
    6ff0:	200b883a 	mov	r5,r4
    6ff4:	12000017 	ldw	r8,0(r2)
    6ff8:	29400104 	addi	r5,r5,4
    6ffc:	10800104 	addi	r2,r2,4
    7000:	2a3fff15 	stw	r8,-4(r5)
    7004:	10fffb36 	bltu	r2,r3,6ff4 <__copybits+0x34>
    7008:	1985c83a 	sub	r2,r3,r6
    700c:	10bffac4 	addi	r2,r2,-21
    7010:	1004d0ba 	srli	r2,r2,2
    7014:	10800044 	addi	r2,r2,1
    7018:	1085883a 	add	r2,r2,r2
    701c:	1085883a 	add	r2,r2,r2
    7020:	2089883a 	add	r4,r4,r2
    7024:	21c0032e 	bgeu	r4,r7,7034 <__copybits+0x74>
    7028:	20000015 	stw	zero,0(r4)
    702c:	21000104 	addi	r4,r4,4
    7030:	21fffd36 	bltu	r4,r7,7028 <__copybits+0x68>
    7034:	f800283a 	ret

00007038 <__any_on>:
    7038:	20c00417 	ldw	r3,16(r4)
    703c:	2805d17a 	srai	r2,r5,5
    7040:	21000504 	addi	r4,r4,20
    7044:	18800d0e 	bge	r3,r2,707c <__any_on+0x44>
    7048:	18c7883a 	add	r3,r3,r3
    704c:	18c7883a 	add	r3,r3,r3
    7050:	20c7883a 	add	r3,r4,r3
    7054:	20c0192e 	bgeu	r4,r3,70bc <__any_on+0x84>
    7058:	18bfff17 	ldw	r2,-4(r3)
    705c:	18ffff04 	addi	r3,r3,-4
    7060:	1000041e 	bne	r2,zero,7074 <__any_on+0x3c>
    7064:	20c0142e 	bgeu	r4,r3,70b8 <__any_on+0x80>
    7068:	18ffff04 	addi	r3,r3,-4
    706c:	19400017 	ldw	r5,0(r3)
    7070:	283ffc26 	beq	r5,zero,7064 <__any_on+0x2c>
    7074:	00800044 	movi	r2,1
    7078:	f800283a 	ret
    707c:	10c00a0e 	bge	r2,r3,70a8 <__any_on+0x70>
    7080:	1085883a 	add	r2,r2,r2
    7084:	1085883a 	add	r2,r2,r2
    7088:	294007cc 	andi	r5,r5,31
    708c:	2087883a 	add	r3,r4,r2
    7090:	283ff026 	beq	r5,zero,7054 <__any_on+0x1c>
    7094:	19800017 	ldw	r6,0(r3)
    7098:	3144d83a 	srl	r2,r6,r5
    709c:	114a983a 	sll	r5,r2,r5
    70a0:	29bff41e 	bne	r5,r6,7074 <__any_on+0x3c>
    70a4:	003feb06 	br	7054 <__any_on+0x1c>
    70a8:	1085883a 	add	r2,r2,r2
    70ac:	1085883a 	add	r2,r2,r2
    70b0:	2087883a 	add	r3,r4,r2
    70b4:	003fe706 	br	7054 <__any_on+0x1c>
    70b8:	f800283a 	ret
    70bc:	0005883a 	mov	r2,zero
    70c0:	f800283a 	ret

000070c4 <__fpclassifyd>:
    70c4:	00a00034 	movhi	r2,32768
    70c8:	10bfffc4 	addi	r2,r2,-1
    70cc:	2884703a 	and	r2,r5,r2
    70d0:	10000726 	beq	r2,zero,70f0 <__fpclassifyd+0x2c>
    70d4:	00fffc34 	movhi	r3,65520
    70d8:	019ff834 	movhi	r6,32736
    70dc:	28c7883a 	add	r3,r5,r3
    70e0:	31bfffc4 	addi	r6,r6,-1
    70e4:	30c00536 	bltu	r6,r3,70fc <__fpclassifyd+0x38>
    70e8:	00800104 	movi	r2,4
    70ec:	f800283a 	ret
    70f0:	2000021e 	bne	r4,zero,70fc <__fpclassifyd+0x38>
    70f4:	00800084 	movi	r2,2
    70f8:	f800283a 	ret
    70fc:	00dffc34 	movhi	r3,32752
    7100:	019ff834 	movhi	r6,32736
    7104:	28cb883a 	add	r5,r5,r3
    7108:	31bfffc4 	addi	r6,r6,-1
    710c:	317ff62e 	bgeu	r6,r5,70e8 <__fpclassifyd+0x24>
    7110:	01400434 	movhi	r5,16
    7114:	297fffc4 	addi	r5,r5,-1
    7118:	28800236 	bltu	r5,r2,7124 <__fpclassifyd+0x60>
    711c:	008000c4 	movi	r2,3
    7120:	f800283a 	ret
    7124:	10c00226 	beq	r2,r3,7130 <__fpclassifyd+0x6c>
    7128:	0005883a 	mov	r2,zero
    712c:	f800283a 	ret
    7130:	2005003a 	cmpeq	r2,r4,zero
    7134:	f800283a 	ret

00007138 <_sbrk_r>:
    7138:	defffd04 	addi	sp,sp,-12
    713c:	dc000015 	stw	r16,0(sp)
    7140:	04000074 	movhi	r16,1
    7144:	dc400115 	stw	r17,4(sp)
    7148:	840c9304 	addi	r16,r16,12876
    714c:	2023883a 	mov	r17,r4
    7150:	2809883a 	mov	r4,r5
    7154:	dfc00215 	stw	ra,8(sp)
    7158:	80000015 	stw	zero,0(r16)
    715c:	000d7980 	call	d798 <sbrk>
    7160:	00ffffc4 	movi	r3,-1
    7164:	10c00526 	beq	r2,r3,717c <_sbrk_r+0x44>
    7168:	dfc00217 	ldw	ra,8(sp)
    716c:	dc400117 	ldw	r17,4(sp)
    7170:	dc000017 	ldw	r16,0(sp)
    7174:	dec00304 	addi	sp,sp,12
    7178:	f800283a 	ret
    717c:	80c00017 	ldw	r3,0(r16)
    7180:	183ff926 	beq	r3,zero,7168 <_sbrk_r+0x30>
    7184:	88c00015 	stw	r3,0(r17)
    7188:	003ff706 	br	7168 <_sbrk_r+0x30>

0000718c <__sread>:
    718c:	defffe04 	addi	sp,sp,-8
    7190:	dc000015 	stw	r16,0(sp)
    7194:	2821883a 	mov	r16,r5
    7198:	2940038f 	ldh	r5,14(r5)
    719c:	dfc00115 	stw	ra,4(sp)
    71a0:	00094040 	call	9404 <_read_r>
    71a4:	10000716 	blt	r2,zero,71c4 <__sread+0x38>
    71a8:	80c01417 	ldw	r3,80(r16)
    71ac:	1887883a 	add	r3,r3,r2
    71b0:	80c01415 	stw	r3,80(r16)
    71b4:	dfc00117 	ldw	ra,4(sp)
    71b8:	dc000017 	ldw	r16,0(sp)
    71bc:	dec00204 	addi	sp,sp,8
    71c0:	f800283a 	ret
    71c4:	80c0030b 	ldhu	r3,12(r16)
    71c8:	18fbffcc 	andi	r3,r3,61439
    71cc:	80c0030d 	sth	r3,12(r16)
    71d0:	dfc00117 	ldw	ra,4(sp)
    71d4:	dc000017 	ldw	r16,0(sp)
    71d8:	dec00204 	addi	sp,sp,8
    71dc:	f800283a 	ret

000071e0 <__seofread>:
    71e0:	0005883a 	mov	r2,zero
    71e4:	f800283a 	ret

000071e8 <__swrite>:
    71e8:	2880030b 	ldhu	r2,12(r5)
    71ec:	defffb04 	addi	sp,sp,-20
    71f0:	dcc00315 	stw	r19,12(sp)
    71f4:	dc800215 	stw	r18,8(sp)
    71f8:	dc400115 	stw	r17,4(sp)
    71fc:	dc000015 	stw	r16,0(sp)
    7200:	dfc00415 	stw	ra,16(sp)
    7204:	10c0400c 	andi	r3,r2,256
    7208:	2821883a 	mov	r16,r5
    720c:	2027883a 	mov	r19,r4
    7210:	3025883a 	mov	r18,r6
    7214:	3823883a 	mov	r17,r7
    7218:	18000526 	beq	r3,zero,7230 <__swrite+0x48>
    721c:	2940038f 	ldh	r5,14(r5)
    7220:	000d883a 	mov	r6,zero
    7224:	01c00084 	movi	r7,2
    7228:	000924c0 	call	924c <_lseek_r>
    722c:	8080030b 	ldhu	r2,12(r16)
    7230:	8140038f 	ldh	r5,14(r16)
    7234:	10bbffcc 	andi	r2,r2,61439
    7238:	9809883a 	mov	r4,r19
    723c:	900d883a 	mov	r6,r18
    7240:	880f883a 	mov	r7,r17
    7244:	8080030d 	sth	r2,12(r16)
    7248:	dfc00417 	ldw	ra,16(sp)
    724c:	dcc00317 	ldw	r19,12(sp)
    7250:	dc800217 	ldw	r18,8(sp)
    7254:	dc400117 	ldw	r17,4(sp)
    7258:	dc000017 	ldw	r16,0(sp)
    725c:	dec00504 	addi	sp,sp,20
    7260:	00088981 	jmpi	8898 <_write_r>

00007264 <__sseek>:
    7264:	defffe04 	addi	sp,sp,-8
    7268:	dc000015 	stw	r16,0(sp)
    726c:	2821883a 	mov	r16,r5
    7270:	2940038f 	ldh	r5,14(r5)
    7274:	dfc00115 	stw	ra,4(sp)
    7278:	000924c0 	call	924c <_lseek_r>
    727c:	00ffffc4 	movi	r3,-1
    7280:	10c00826 	beq	r2,r3,72a4 <__sseek+0x40>
    7284:	80c0030b 	ldhu	r3,12(r16)
    7288:	80801415 	stw	r2,80(r16)
    728c:	18c40014 	ori	r3,r3,4096
    7290:	80c0030d 	sth	r3,12(r16)
    7294:	dfc00117 	ldw	ra,4(sp)
    7298:	dc000017 	ldw	r16,0(sp)
    729c:	dec00204 	addi	sp,sp,8
    72a0:	f800283a 	ret
    72a4:	80c0030b 	ldhu	r3,12(r16)
    72a8:	18fbffcc 	andi	r3,r3,61439
    72ac:	80c0030d 	sth	r3,12(r16)
    72b0:	dfc00117 	ldw	ra,4(sp)
    72b4:	dc000017 	ldw	r16,0(sp)
    72b8:	dec00204 	addi	sp,sp,8
    72bc:	f800283a 	ret

000072c0 <__sclose>:
    72c0:	2940038f 	ldh	r5,14(r5)
    72c4:	00088f41 	jmpi	88f4 <_close_r>

000072c8 <strcmp>:
    72c8:	2144b03a 	or	r2,r4,r5
    72cc:	108000cc 	andi	r2,r2,3
    72d0:	1000171e 	bne	r2,zero,7330 <strcmp+0x68>
    72d4:	20800017 	ldw	r2,0(r4)
    72d8:	28c00017 	ldw	r3,0(r5)
    72dc:	10c0141e 	bne	r2,r3,7330 <strcmp+0x68>
    72e0:	027fbff4 	movhi	r9,65279
    72e4:	4a7fbfc4 	addi	r9,r9,-257
    72e8:	0086303a 	nor	r3,zero,r2
    72ec:	02202074 	movhi	r8,32897
    72f0:	1245883a 	add	r2,r2,r9
    72f4:	42202004 	addi	r8,r8,-32640
    72f8:	10c4703a 	and	r2,r2,r3
    72fc:	1204703a 	and	r2,r2,r8
    7300:	10000226 	beq	r2,zero,730c <strcmp+0x44>
    7304:	00001706 	br	7364 <strcmp+0x9c>
    7308:	1000161e 	bne	r2,zero,7364 <strcmp+0x9c>
    730c:	21000104 	addi	r4,r4,4
    7310:	20c00017 	ldw	r3,0(r4)
    7314:	29400104 	addi	r5,r5,4
    7318:	29800017 	ldw	r6,0(r5)
    731c:	1a4f883a 	add	r7,r3,r9
    7320:	00c4303a 	nor	r2,zero,r3
    7324:	3884703a 	and	r2,r7,r2
    7328:	1204703a 	and	r2,r2,r8
    732c:	19bff626 	beq	r3,r6,7308 <strcmp+0x40>
    7330:	20800007 	ldb	r2,0(r4)
    7334:	1000051e 	bne	r2,zero,734c <strcmp+0x84>
    7338:	00000606 	br	7354 <strcmp+0x8c>
    733c:	21000044 	addi	r4,r4,1
    7340:	20800007 	ldb	r2,0(r4)
    7344:	29400044 	addi	r5,r5,1
    7348:	10000226 	beq	r2,zero,7354 <strcmp+0x8c>
    734c:	28c00007 	ldb	r3,0(r5)
    7350:	10fffa26 	beq	r2,r3,733c <strcmp+0x74>
    7354:	20800003 	ldbu	r2,0(r4)
    7358:	28c00003 	ldbu	r3,0(r5)
    735c:	10c5c83a 	sub	r2,r2,r3
    7360:	f800283a 	ret
    7364:	0005883a 	mov	r2,zero
    7368:	f800283a 	ret

0000736c <strlen>:
    736c:	208000cc 	andi	r2,r4,3
    7370:	10002026 	beq	r2,zero,73f4 <strlen+0x88>
    7374:	20800007 	ldb	r2,0(r4)
    7378:	10002026 	beq	r2,zero,73fc <strlen+0x90>
    737c:	2005883a 	mov	r2,r4
    7380:	00000206 	br	738c <strlen+0x20>
    7384:	10c00007 	ldb	r3,0(r2)
    7388:	18001826 	beq	r3,zero,73ec <strlen+0x80>
    738c:	10800044 	addi	r2,r2,1
    7390:	10c000cc 	andi	r3,r2,3
    7394:	183ffb1e 	bne	r3,zero,7384 <strlen+0x18>
    7398:	10c00017 	ldw	r3,0(r2)
    739c:	01ffbff4 	movhi	r7,65279
    73a0:	39ffbfc4 	addi	r7,r7,-257
    73a4:	00ca303a 	nor	r5,zero,r3
    73a8:	01a02074 	movhi	r6,32897
    73ac:	19c7883a 	add	r3,r3,r7
    73b0:	31a02004 	addi	r6,r6,-32640
    73b4:	1946703a 	and	r3,r3,r5
    73b8:	1986703a 	and	r3,r3,r6
    73bc:	1800091e 	bne	r3,zero,73e4 <strlen+0x78>
    73c0:	10800104 	addi	r2,r2,4
    73c4:	10c00017 	ldw	r3,0(r2)
    73c8:	19cb883a 	add	r5,r3,r7
    73cc:	00c6303a 	nor	r3,zero,r3
    73d0:	28c6703a 	and	r3,r5,r3
    73d4:	1986703a 	and	r3,r3,r6
    73d8:	183ff926 	beq	r3,zero,73c0 <strlen+0x54>
    73dc:	00000106 	br	73e4 <strlen+0x78>
    73e0:	10800044 	addi	r2,r2,1
    73e4:	10c00007 	ldb	r3,0(r2)
    73e8:	183ffd1e 	bne	r3,zero,73e0 <strlen+0x74>
    73ec:	1105c83a 	sub	r2,r2,r4
    73f0:	f800283a 	ret
    73f4:	2005883a 	mov	r2,r4
    73f8:	003fe706 	br	7398 <strlen+0x2c>
    73fc:	0005883a 	mov	r2,zero
    7400:	f800283a 	ret

00007404 <__sprint_r.part.0>:
    7404:	28801917 	ldw	r2,100(r5)
    7408:	defff604 	addi	sp,sp,-40
    740c:	dd400515 	stw	r21,20(sp)
    7410:	dcc00315 	stw	r19,12(sp)
    7414:	dfc00915 	stw	ra,36(sp)
    7418:	df000815 	stw	fp,32(sp)
    741c:	ddc00715 	stw	r23,28(sp)
    7420:	dd800615 	stw	r22,24(sp)
    7424:	dd000415 	stw	r20,16(sp)
    7428:	dc800215 	stw	r18,8(sp)
    742c:	dc400115 	stw	r17,4(sp)
    7430:	dc000015 	stw	r16,0(sp)
    7434:	1088000c 	andi	r2,r2,8192
    7438:	2827883a 	mov	r19,r5
    743c:	302b883a 	mov	r21,r6
    7440:	10002d26 	beq	r2,zero,74f8 <__sprint_r.part.0+0xf4>
    7444:	30800217 	ldw	r2,8(r6)
    7448:	35800017 	ldw	r22,0(r6)
    744c:	10002826 	beq	r2,zero,74f0 <__sprint_r.part.0+0xec>
    7450:	2029883a 	mov	r20,r4
    7454:	b5c00104 	addi	r23,r22,4
    7458:	04bfffc4 	movi	r18,-1
    745c:	bc400017 	ldw	r17,0(r23)
    7460:	b4000017 	ldw	r16,0(r22)
    7464:	0039883a 	mov	fp,zero
    7468:	8822d0ba 	srli	r17,r17,2
    746c:	04400316 	blt	zero,r17,747c <__sprint_r.part.0+0x78>
    7470:	00001706 	br	74d0 <__sprint_r.part.0+0xcc>
    7474:	84000104 	addi	r16,r16,4
    7478:	8f001526 	beq	r17,fp,74d0 <__sprint_r.part.0+0xcc>
    747c:	81400017 	ldw	r5,0(r16)
    7480:	a009883a 	mov	r4,r20
    7484:	980d883a 	mov	r6,r19
    7488:	0008b200 	call	8b20 <_fputwc_r>
    748c:	e7000044 	addi	fp,fp,1
    7490:	14bff81e 	bne	r2,r18,7474 <__sprint_r.part.0+0x70>
    7494:	9005883a 	mov	r2,r18
    7498:	a8000215 	stw	zero,8(r21)
    749c:	a8000115 	stw	zero,4(r21)
    74a0:	dfc00917 	ldw	ra,36(sp)
    74a4:	df000817 	ldw	fp,32(sp)
    74a8:	ddc00717 	ldw	r23,28(sp)
    74ac:	dd800617 	ldw	r22,24(sp)
    74b0:	dd400517 	ldw	r21,20(sp)
    74b4:	dd000417 	ldw	r20,16(sp)
    74b8:	dcc00317 	ldw	r19,12(sp)
    74bc:	dc800217 	ldw	r18,8(sp)
    74c0:	dc400117 	ldw	r17,4(sp)
    74c4:	dc000017 	ldw	r16,0(sp)
    74c8:	dec00a04 	addi	sp,sp,40
    74cc:	f800283a 	ret
    74d0:	a8c00217 	ldw	r3,8(r21)
    74d4:	8c63883a 	add	r17,r17,r17
    74d8:	8c63883a 	add	r17,r17,r17
    74dc:	1c45c83a 	sub	r2,r3,r17
    74e0:	a8800215 	stw	r2,8(r21)
    74e4:	b5800204 	addi	r22,r22,8
    74e8:	bdc00204 	addi	r23,r23,8
    74ec:	103fdb1e 	bne	r2,zero,745c <__sprint_r.part.0+0x58>
    74f0:	0005883a 	mov	r2,zero
    74f4:	003fe806 	br	7498 <__sprint_r.part.0+0x94>
    74f8:	0008d540 	call	8d54 <__sfvwrite_r>
    74fc:	003fe606 	br	7498 <__sprint_r.part.0+0x94>

00007500 <__sprint_r>:
    7500:	30c00217 	ldw	r3,8(r6)
    7504:	18000126 	beq	r3,zero,750c <__sprint_r+0xc>
    7508:	00074041 	jmpi	7404 <__sprint_r.part.0>
    750c:	30000115 	stw	zero,4(r6)
    7510:	0005883a 	mov	r2,zero
    7514:	f800283a 	ret

00007518 <___vfiprintf_internal_r>:
    7518:	defeca04 	addi	sp,sp,-1240
    751c:	dd813215 	stw	r22,1224(sp)
    7520:	dd013015 	stw	r20,1216(sp)
    7524:	dfc13515 	stw	ra,1236(sp)
    7528:	df013415 	stw	fp,1232(sp)
    752c:	ddc13315 	stw	r23,1228(sp)
    7530:	dd413115 	stw	r21,1220(sp)
    7534:	dcc12f15 	stw	r19,1212(sp)
    7538:	dc812e15 	stw	r18,1208(sp)
    753c:	dc412d15 	stw	r17,1204(sp)
    7540:	dc012c15 	stw	r16,1200(sp)
    7544:	d9012015 	stw	r4,1152(sp)
    7548:	d9c12115 	stw	r7,1156(sp)
    754c:	2829883a 	mov	r20,r5
    7550:	302d883a 	mov	r22,r6
    7554:	20000226 	beq	r4,zero,7560 <___vfiprintf_internal_r+0x48>
    7558:	20800e17 	ldw	r2,56(r4)
    755c:	1001d326 	beq	r2,zero,7cac <___vfiprintf_internal_r+0x794>
    7560:	a0c0030b 	ldhu	r3,12(r20)
    7564:	1908000c 	andi	r4,r3,8192
    7568:	1805883a 	mov	r2,r3
    756c:	2000071e 	bne	r4,zero,758c <___vfiprintf_internal_r+0x74>
    7570:	a1001917 	ldw	r4,100(r20)
    7574:	18880014 	ori	r2,r3,8192
    7578:	00f7ffc4 	movi	r3,-8193
    757c:	20c8703a 	and	r4,r4,r3
    7580:	a080030d 	sth	r2,12(r20)
    7584:	1007883a 	mov	r3,r2
    7588:	a1001915 	stw	r4,100(r20)
    758c:	1100020c 	andi	r4,r2,8
    7590:	20018926 	beq	r4,zero,7bb8 <___vfiprintf_internal_r+0x6a0>
    7594:	a1000417 	ldw	r4,16(r20)
    7598:	20018726 	beq	r4,zero,7bb8 <___vfiprintf_internal_r+0x6a0>
    759c:	1080068c 	andi	r2,r2,26
    75a0:	01000284 	movi	r4,10
    75a4:	11018d26 	beq	r2,r4,7bdc <___vfiprintf_internal_r+0x6c4>
    75a8:	da810a04 	addi	r10,sp,1064
    75ac:	dac109c4 	addi	r11,sp,1063
    75b0:	07000074 	movhi	fp,1
    75b4:	05c00074 	movhi	r23,1
    75b8:	da811e15 	stw	r10,1144(sp)
    75bc:	52d5c83a 	sub	r10,r10,r11
    75c0:	e73ec704 	addi	fp,fp,-1252
    75c4:	bdfec304 	addi	r23,r23,-1268
    75c8:	dac11f15 	stw	r11,1148(sp)
    75cc:	dec11a15 	stw	sp,1128(sp)
    75d0:	d8011c15 	stw	zero,1136(sp)
    75d4:	d8011b15 	stw	zero,1132(sp)
    75d8:	d8012615 	stw	zero,1176(sp)
    75dc:	d8012215 	stw	zero,1160(sp)
    75e0:	da812715 	stw	r10,1180(sp)
    75e4:	d811883a 	mov	r8,sp
    75e8:	b021883a 	mov	r16,r22
    75ec:	80800007 	ldb	r2,0(r16)
    75f0:	10039c26 	beq	r2,zero,8464 <___vfiprintf_internal_r+0xf4c>
    75f4:	01000944 	movi	r4,37
    75f8:	11039a26 	beq	r2,r4,8464 <___vfiprintf_internal_r+0xf4c>
    75fc:	8005883a 	mov	r2,r16
    7600:	00000106 	br	7608 <___vfiprintf_internal_r+0xf0>
    7604:	19000326 	beq	r3,r4,7614 <___vfiprintf_internal_r+0xfc>
    7608:	10800044 	addi	r2,r2,1
    760c:	10c00007 	ldb	r3,0(r2)
    7610:	183ffc1e 	bne	r3,zero,7604 <___vfiprintf_internal_r+0xec>
    7614:	1425c83a 	sub	r18,r2,r16
    7618:	1023883a 	mov	r17,r2
    761c:	90001026 	beq	r18,zero,7660 <___vfiprintf_internal_r+0x148>
    7620:	d8c11c17 	ldw	r3,1136(sp)
    7624:	d8811b17 	ldw	r2,1132(sp)
    7628:	44000015 	stw	r16,0(r8)
    762c:	90c7883a 	add	r3,r18,r3
    7630:	10800044 	addi	r2,r2,1
    7634:	44800115 	stw	r18,4(r8)
    7638:	d8c11c15 	stw	r3,1136(sp)
    763c:	d8811b15 	stw	r2,1132(sp)
    7640:	010001c4 	movi	r4,7
    7644:	2080750e 	bge	r4,r2,781c <___vfiprintf_internal_r+0x304>
    7648:	18039d1e 	bne	r3,zero,84c0 <___vfiprintf_internal_r+0xfa8>
    764c:	dac12217 	ldw	r11,1160(sp)
    7650:	d8011b15 	stw	zero,1132(sp)
    7654:	d811883a 	mov	r8,sp
    7658:	5c97883a 	add	r11,r11,r18
    765c:	dac12215 	stw	r11,1160(sp)
    7660:	88800007 	ldb	r2,0(r17)
    7664:	1002e026 	beq	r2,zero,81e8 <___vfiprintf_internal_r+0xcd0>
    7668:	88c00047 	ldb	r3,1(r17)
    766c:	8c000044 	addi	r16,r17,1
    7670:	d8011d85 	stb	zero,1142(sp)
    7674:	000d883a 	mov	r6,zero
    7678:	027fffc4 	movi	r9,-1
    767c:	0027883a 	mov	r19,zero
    7680:	002b883a 	mov	r21,zero
    7684:	01001604 	movi	r4,88
    7688:	01400244 	movi	r5,9
    768c:	03000a84 	movi	r12,42
    7690:	01c01b04 	movi	r7,108
    7694:	84000044 	addi	r16,r16,1
    7698:	18bff804 	addi	r2,r3,-32
    769c:	20825f36 	bltu	r4,r2,801c <___vfiprintf_internal_r+0xb04>
    76a0:	100490ba 	slli	r2,r2,2
    76a4:	02800034 	movhi	r10,0
    76a8:	529dae04 	addi	r10,r10,30392
    76ac:	1285883a 	add	r2,r2,r10
    76b0:	10800017 	ldw	r2,0(r2)
    76b4:	1000683a 	jmp	r2
    76b8:	00007e8c 	andi	zero,zero,506
    76bc:	0000801c 	xori	zero,zero,512
    76c0:	0000801c 	xori	zero,zero,512
    76c4:	00008010 	cmplti	zero,zero,512
    76c8:	0000801c 	xori	zero,zero,512
    76cc:	0000801c 	xori	zero,zero,512
    76d0:	0000801c 	xori	zero,zero,512
    76d4:	0000801c 	xori	zero,zero,512
    76d8:	0000801c 	xori	zero,zero,512
    76dc:	0000801c 	xori	zero,zero,512
    76e0:	00007fe8 	cmpgeui	zero,zero,511
    76e4:	00008004 	movi	zero,512
    76e8:	0000801c 	xori	zero,zero,512
    76ec:	00007cbc 	xorhi	zero,zero,498
    76f0:	00007e1c 	xori	zero,zero,504
    76f4:	0000801c 	xori	zero,zero,512
    76f8:	00007da0 	cmpeqi	zero,zero,502
    76fc:	00007dac 	andhi	zero,zero,502
    7700:	00007dac 	andhi	zero,zero,502
    7704:	00007dac 	andhi	zero,zero,502
    7708:	00007dac 	andhi	zero,zero,502
    770c:	00007dac 	andhi	zero,zero,502
    7710:	00007dac 	andhi	zero,zero,502
    7714:	00007dac 	andhi	zero,zero,502
    7718:	00007dac 	andhi	zero,zero,502
    771c:	00007dac 	andhi	zero,zero,502
    7720:	0000801c 	xori	zero,zero,512
    7724:	0000801c 	xori	zero,zero,512
    7728:	0000801c 	xori	zero,zero,512
    772c:	0000801c 	xori	zero,zero,512
    7730:	0000801c 	xori	zero,zero,512
    7734:	0000801c 	xori	zero,zero,512
    7738:	0000801c 	xori	zero,zero,512
    773c:	0000801c 	xori	zero,zero,512
    7740:	0000801c 	xori	zero,zero,512
    7744:	0000801c 	xori	zero,zero,512
    7748:	00007dd8 	cmpnei	zero,zero,503
    774c:	0000801c 	xori	zero,zero,512
    7750:	0000801c 	xori	zero,zero,512
    7754:	0000801c 	xori	zero,zero,512
    7758:	0000801c 	xori	zero,zero,512
    775c:	0000801c 	xori	zero,zero,512
    7760:	0000801c 	xori	zero,zero,512
    7764:	0000801c 	xori	zero,zero,512
    7768:	0000801c 	xori	zero,zero,512
    776c:	0000801c 	xori	zero,zero,512
    7770:	0000801c 	xori	zero,zero,512
    7774:	0000786c 	andhi	zero,zero,481
    7778:	0000801c 	xori	zero,zero,512
    777c:	0000801c 	xori	zero,zero,512
    7780:	0000801c 	xori	zero,zero,512
    7784:	0000801c 	xori	zero,zero,512
    7788:	0000801c 	xori	zero,zero,512
    778c:	00007830 	cmpltui	zero,zero,480
    7790:	0000801c 	xori	zero,zero,512
    7794:	0000801c 	xori	zero,zero,512
    7798:	00007d18 	cmpnei	zero,zero,500
    779c:	0000801c 	xori	zero,zero,512
    77a0:	0000801c 	xori	zero,zero,512
    77a4:	0000801c 	xori	zero,zero,512
    77a8:	0000801c 	xori	zero,zero,512
    77ac:	0000801c 	xori	zero,zero,512
    77b0:	0000801c 	xori	zero,zero,512
    77b4:	0000801c 	xori	zero,zero,512
    77b8:	0000801c 	xori	zero,zero,512
    77bc:	0000801c 	xori	zero,zero,512
    77c0:	0000801c 	xori	zero,zero,512
    77c4:	00007d70 	cmpltui	zero,zero,501
    77c8:	00007f08 	cmpgei	zero,zero,508
    77cc:	0000801c 	xori	zero,zero,512
    77d0:	0000801c 	xori	zero,zero,512
    77d4:	0000801c 	xori	zero,zero,512
    77d8:	00007f90 	cmplti	zero,zero,510
    77dc:	00007f08 	cmpgei	zero,zero,508
    77e0:	0000801c 	xori	zero,zero,512
    77e4:	0000801c 	xori	zero,zero,512
    77e8:	00007f9c 	xori	zero,zero,510
    77ec:	0000801c 	xori	zero,zero,512
    77f0:	00007e5c 	xori	zero,zero,505
    77f4:	00007870 	cmpltui	zero,zero,481
    77f8:	00007f44 	movi	zero,509
    77fc:	00007f84 	movi	zero,510
    7800:	0000801c 	xori	zero,zero,512
    7804:	00007ea8 	cmpgeui	zero,zero,506
    7808:	0000801c 	xori	zero,zero,512
    780c:	00007834 	movhi	zero,480
    7810:	0000801c 	xori	zero,zero,512
    7814:	0000801c 	xori	zero,zero,512
    7818:	00007fac 	andhi	zero,zero,510
    781c:	42000204 	addi	r8,r8,8
    7820:	dac12217 	ldw	r11,1160(sp)
    7824:	5c97883a 	add	r11,r11,r18
    7828:	dac12215 	stw	r11,1160(sp)
    782c:	003f8c06 	br	7660 <___vfiprintf_internal_r+0x148>
    7830:	ad400414 	ori	r21,r21,16
    7834:	a880080c 	andi	r2,r21,32
    7838:	10012f1e 	bne	r2,zero,7cf8 <___vfiprintf_internal_r+0x7e0>
    783c:	a880040c 	andi	r2,r21,16
    7840:	1001ff1e 	bne	r2,zero,8040 <___vfiprintf_internal_r+0xb28>
    7844:	a880100c 	andi	r2,r21,64
    7848:	1001fd26 	beq	r2,zero,8040 <___vfiprintf_internal_r+0xb28>
    784c:	da812117 	ldw	r10,1156(sp)
    7850:	002d883a 	mov	r22,zero
    7854:	00800044 	movi	r2,1
    7858:	5480000b 	ldhu	r18,0(r10)
    785c:	52800104 	addi	r10,r10,4
    7860:	da812115 	stw	r10,1156(sp)
    7864:	9009883a 	mov	r4,r18
    7868:	00000a06 	br	7894 <___vfiprintf_internal_r+0x37c>
    786c:	ad400414 	ori	r21,r21,16
    7870:	a880080c 	andi	r2,r21,32
    7874:	10011426 	beq	r2,zero,7cc8 <___vfiprintf_internal_r+0x7b0>
    7878:	da812117 	ldw	r10,1156(sp)
    787c:	0005883a 	mov	r2,zero
    7880:	54800017 	ldw	r18,0(r10)
    7884:	55800117 	ldw	r22,4(r10)
    7888:	52800204 	addi	r10,r10,8
    788c:	da812115 	stw	r10,1156(sp)
    7890:	9588b03a 	or	r4,r18,r22
    7894:	d8011d85 	stb	zero,1142(sp)
    7898:	4823883a 	mov	r17,r9
    789c:	0019883a 	mov	r12,zero
    78a0:	48000216 	blt	r9,zero,78ac <___vfiprintf_internal_r+0x394>
    78a4:	00ffdfc4 	movi	r3,-129
    78a8:	a8ea703a 	and	r21,r21,r3
    78ac:	2002221e 	bne	r4,zero,8138 <___vfiprintf_internal_r+0xc20>
    78b0:	4802c726 	beq	r9,zero,83d0 <___vfiprintf_internal_r+0xeb8>
    78b4:	10803fcc 	andi	r2,r2,255
    78b8:	00c00044 	movi	r3,1
    78bc:	10c24426 	beq	r2,r3,81d0 <___vfiprintf_internal_r+0xcb8>
    78c0:	00c00084 	movi	r3,2
    78c4:	10c2cc26 	beq	r2,r3,83f8 <___vfiprintf_internal_r+0xee0>
    78c8:	d8c10a04 	addi	r3,sp,1064
    78cc:	9008d0fa 	srli	r4,r18,3
    78d0:	b00a977a 	slli	r5,r22,29
    78d4:	b02cd0fa 	srli	r22,r22,3
    78d8:	948001cc 	andi	r18,r18,7
    78dc:	90800c04 	addi	r2,r18,48
    78e0:	18ffffc4 	addi	r3,r3,-1
    78e4:	2924b03a 	or	r18,r5,r4
    78e8:	18800005 	stb	r2,0(r3)
    78ec:	9588b03a 	or	r4,r18,r22
    78f0:	203ff61e 	bne	r4,zero,78cc <___vfiprintf_internal_r+0x3b4>
    78f4:	a900004c 	andi	r4,r21,1
    78f8:	d8c12415 	stw	r3,1168(sp)
    78fc:	2002fb1e 	bne	r4,zero,84ec <___vfiprintf_internal_r+0xfd4>
    7900:	da811e17 	ldw	r10,1144(sp)
    7904:	50e3c83a 	sub	r17,r10,r3
    7908:	8825883a 	mov	r18,r17
    790c:	8a40010e 	bge	r17,r9,7914 <___vfiprintf_internal_r+0x3fc>
    7910:	4825883a 	mov	r18,r9
    7914:	63003fcc 	andi	r12,r12,255
    7918:	6300201c 	xori	r12,r12,128
    791c:	633fe004 	addi	r12,r12,-128
    7920:	60000126 	beq	r12,zero,7928 <___vfiprintf_internal_r+0x410>
    7924:	94800044 	addi	r18,r18,1
    7928:	ab80008c 	andi	r14,r21,2
    792c:	70000126 	beq	r14,zero,7934 <___vfiprintf_internal_r+0x41c>
    7930:	94800084 	addi	r18,r18,2
    7934:	ad80210c 	andi	r22,r21,132
    7938:	b001df1e 	bne	r22,zero,80b8 <___vfiprintf_internal_r+0xba0>
    793c:	9c8fc83a 	sub	r7,r19,r18
    7940:	01c1dd0e 	bge	zero,r7,80b8 <___vfiprintf_internal_r+0xba0>
    7944:	03000404 	movi	r12,16
    7948:	d8811c17 	ldw	r2,1136(sp)
    794c:	61c3920e 	bge	r12,r7,8798 <___vfiprintf_internal_r+0x1280>
    7950:	02800074 	movhi	r10,1
    7954:	52bec704 	addi	r10,r10,-1252
    7958:	dc012915 	stw	r16,1188(sp)
    795c:	d9811b17 	ldw	r6,1132(sp)
    7960:	da812315 	stw	r10,1164(sp)
    7964:	00c001c4 	movi	r3,7
    7968:	da412515 	stw	r9,1172(sp)
    796c:	db812815 	stw	r14,1184(sp)
    7970:	3821883a 	mov	r16,r7
    7974:	00000506 	br	798c <___vfiprintf_internal_r+0x474>
    7978:	31400084 	addi	r5,r6,2
    797c:	42000204 	addi	r8,r8,8
    7980:	200d883a 	mov	r6,r4
    7984:	843ffc04 	addi	r16,r16,-16
    7988:	64000d0e 	bge	r12,r16,79c0 <___vfiprintf_internal_r+0x4a8>
    798c:	10800404 	addi	r2,r2,16
    7990:	31000044 	addi	r4,r6,1
    7994:	47000015 	stw	fp,0(r8)
    7998:	43000115 	stw	r12,4(r8)
    799c:	d8811c15 	stw	r2,1136(sp)
    79a0:	d9011b15 	stw	r4,1132(sp)
    79a4:	193ff40e 	bge	r3,r4,7978 <___vfiprintf_internal_r+0x460>
    79a8:	1001b51e 	bne	r2,zero,8080 <___vfiprintf_internal_r+0xb68>
    79ac:	843ffc04 	addi	r16,r16,-16
    79b0:	000d883a 	mov	r6,zero
    79b4:	01400044 	movi	r5,1
    79b8:	d811883a 	mov	r8,sp
    79bc:	643ff316 	blt	r12,r16,798c <___vfiprintf_internal_r+0x474>
    79c0:	800f883a 	mov	r7,r16
    79c4:	da412517 	ldw	r9,1172(sp)
    79c8:	db812817 	ldw	r14,1184(sp)
    79cc:	dc012917 	ldw	r16,1188(sp)
    79d0:	dac12317 	ldw	r11,1164(sp)
    79d4:	3887883a 	add	r3,r7,r2
    79d8:	41c00115 	stw	r7,4(r8)
    79dc:	42c00015 	stw	r11,0(r8)
    79e0:	d8c11c15 	stw	r3,1136(sp)
    79e4:	d9411b15 	stw	r5,1132(sp)
    79e8:	008001c4 	movi	r2,7
    79ec:	11429316 	blt	r2,r5,843c <___vfiprintf_internal_r+0xf24>
    79f0:	d9011d87 	ldb	r4,1142(sp)
    79f4:	42000204 	addi	r8,r8,8
    79f8:	28800044 	addi	r2,r5,1
    79fc:	2001b31e 	bne	r4,zero,80cc <___vfiprintf_internal_r+0xbb4>
    7a00:	70000c26 	beq	r14,zero,7a34 <___vfiprintf_internal_r+0x51c>
    7a04:	d9011d04 	addi	r4,sp,1140
    7a08:	18c00084 	addi	r3,r3,2
    7a0c:	41000015 	stw	r4,0(r8)
    7a10:	01000084 	movi	r4,2
    7a14:	41000115 	stw	r4,4(r8)
    7a18:	d8c11c15 	stw	r3,1136(sp)
    7a1c:	d8811b15 	stw	r2,1132(sp)
    7a20:	010001c4 	movi	r4,7
    7a24:	20826516 	blt	r4,r2,83bc <___vfiprintf_internal_r+0xea4>
    7a28:	100b883a 	mov	r5,r2
    7a2c:	42000204 	addi	r8,r8,8
    7a30:	10800044 	addi	r2,r2,1
    7a34:	01002004 	movi	r4,128
    7a38:	b1021a26 	beq	r22,r4,82a4 <___vfiprintf_internal_r+0xd8c>
    7a3c:	4c6dc83a 	sub	r22,r9,r17
    7a40:	0580230e 	bge	zero,r22,7ad0 <___vfiprintf_internal_r+0x5b8>
    7a44:	01c00404 	movi	r7,16
    7a48:	3d83300e 	bge	r7,r22,870c <___vfiprintf_internal_r+0x11f4>
    7a4c:	00800074 	movhi	r2,1
    7a50:	10bec304 	addi	r2,r2,-1268
    7a54:	d8812315 	stw	r2,1164(sp)
    7a58:	030001c4 	movi	r12,7
    7a5c:	00000506 	br	7a74 <___vfiprintf_internal_r+0x55c>
    7a60:	28800084 	addi	r2,r5,2
    7a64:	42000204 	addi	r8,r8,8
    7a68:	200b883a 	mov	r5,r4
    7a6c:	b5bffc04 	addi	r22,r22,-16
    7a70:	3d800d0e 	bge	r7,r22,7aa8 <___vfiprintf_internal_r+0x590>
    7a74:	18c00404 	addi	r3,r3,16
    7a78:	29000044 	addi	r4,r5,1
    7a7c:	45c00015 	stw	r23,0(r8)
    7a80:	41c00115 	stw	r7,4(r8)
    7a84:	d8c11c15 	stw	r3,1136(sp)
    7a88:	d9011b15 	stw	r4,1132(sp)
    7a8c:	613ff40e 	bge	r12,r4,7a60 <___vfiprintf_internal_r+0x548>
    7a90:	18019b1e 	bne	r3,zero,8100 <___vfiprintf_internal_r+0xbe8>
    7a94:	b5bffc04 	addi	r22,r22,-16
    7a98:	000b883a 	mov	r5,zero
    7a9c:	00800044 	movi	r2,1
    7aa0:	d811883a 	mov	r8,sp
    7aa4:	3dbff316 	blt	r7,r22,7a74 <___vfiprintf_internal_r+0x55c>
    7aa8:	da812317 	ldw	r10,1164(sp)
    7aac:	1d87883a 	add	r3,r3,r22
    7ab0:	45800115 	stw	r22,4(r8)
    7ab4:	42800015 	stw	r10,0(r8)
    7ab8:	d8c11c15 	stw	r3,1136(sp)
    7abc:	d8811b15 	stw	r2,1132(sp)
    7ac0:	010001c4 	movi	r4,7
    7ac4:	2081dd16 	blt	r4,r2,823c <___vfiprintf_internal_r+0xd24>
    7ac8:	42000204 	addi	r8,r8,8
    7acc:	10800044 	addi	r2,r2,1
    7ad0:	da812417 	ldw	r10,1168(sp)
    7ad4:	1c47883a 	add	r3,r3,r17
    7ad8:	44400115 	stw	r17,4(r8)
    7adc:	42800015 	stw	r10,0(r8)
    7ae0:	d8c11c15 	stw	r3,1136(sp)
    7ae4:	d8811b15 	stw	r2,1132(sp)
    7ae8:	010001c4 	movi	r4,7
    7aec:	2081dc0e 	bge	r4,r2,8260 <___vfiprintf_internal_r+0xd48>
    7af0:	1802611e 	bne	r3,zero,8478 <___vfiprintf_internal_r+0xf60>
    7af4:	d8011b15 	stw	zero,1132(sp)
    7af8:	aac0010c 	andi	r11,r21,4
    7afc:	58002726 	beq	r11,zero,7b9c <___vfiprintf_internal_r+0x684>
    7b00:	9ca3c83a 	sub	r17,r19,r18
    7b04:	d811883a 	mov	r8,sp
    7b08:	0443510e 	bge	zero,r17,8850 <___vfiprintf_internal_r+0x1338>
    7b0c:	01c00404 	movi	r7,16
    7b10:	3c43320e 	bge	r7,r17,87dc <___vfiprintf_internal_r+0x12c4>
    7b14:	00800074 	movhi	r2,1
    7b18:	10bec704 	addi	r2,r2,-1252
    7b1c:	d9011b17 	ldw	r4,1132(sp)
    7b20:	d8812315 	stw	r2,1164(sp)
    7b24:	382d883a 	mov	r22,r7
    7b28:	054001c4 	movi	r21,7
    7b2c:	00000506 	br	7b44 <___vfiprintf_internal_r+0x62c>
    7b30:	21400084 	addi	r5,r4,2
    7b34:	42000204 	addi	r8,r8,8
    7b38:	1009883a 	mov	r4,r2
    7b3c:	8c7ffc04 	addi	r17,r17,-16
    7b40:	b4400d0e 	bge	r22,r17,7b78 <___vfiprintf_internal_r+0x660>
    7b44:	18c00404 	addi	r3,r3,16
    7b48:	20800044 	addi	r2,r4,1
    7b4c:	47000015 	stw	fp,0(r8)
    7b50:	45800115 	stw	r22,4(r8)
    7b54:	d8c11c15 	stw	r3,1136(sp)
    7b58:	d8811b15 	stw	r2,1132(sp)
    7b5c:	a8bff40e 	bge	r21,r2,7b30 <___vfiprintf_internal_r+0x618>
    7b60:	1801ac1e 	bne	r3,zero,8214 <___vfiprintf_internal_r+0xcfc>
    7b64:	8c7ffc04 	addi	r17,r17,-16
    7b68:	0009883a 	mov	r4,zero
    7b6c:	01400044 	movi	r5,1
    7b70:	d811883a 	mov	r8,sp
    7b74:	b47ff316 	blt	r22,r17,7b44 <___vfiprintf_internal_r+0x62c>
    7b78:	da812317 	ldw	r10,1164(sp)
    7b7c:	1c47883a 	add	r3,r3,r17
    7b80:	44400115 	stw	r17,4(r8)
    7b84:	42800015 	stw	r10,0(r8)
    7b88:	d8c11c15 	stw	r3,1136(sp)
    7b8c:	d9411b15 	stw	r5,1132(sp)
    7b90:	008001c4 	movi	r2,7
    7b94:	1141b70e 	bge	r2,r5,8274 <___vfiprintf_internal_r+0xd5c>
    7b98:	1802cf1e 	bne	r3,zero,86d8 <___vfiprintf_internal_r+0x11c0>
    7b9c:	94c2ca16 	blt	r18,r19,86c8 <___vfiprintf_internal_r+0x11b0>
    7ba0:	dac12217 	ldw	r11,1160(sp)
    7ba4:	5c97883a 	add	r11,r11,r18
    7ba8:	dac12215 	stw	r11,1160(sp)
    7bac:	d8011b15 	stw	zero,1132(sp)
    7bb0:	d811883a 	mov	r8,sp
    7bb4:	003e8d06 	br	75ec <___vfiprintf_internal_r+0xd4>
    7bb8:	d9012017 	ldw	r4,1152(sp)
    7bbc:	a00b883a 	mov	r5,r20
    7bc0:	0002de00 	call	2de0 <__swsetup_r>
    7bc4:	10002c1e 	bne	r2,zero,7c78 <___vfiprintf_internal_r+0x760>
    7bc8:	a0c0030b 	ldhu	r3,12(r20)
    7bcc:	01000284 	movi	r4,10
    7bd0:	1805883a 	mov	r2,r3
    7bd4:	1080068c 	andi	r2,r2,26
    7bd8:	113e731e 	bne	r2,r4,75a8 <___vfiprintf_internal_r+0x90>
    7bdc:	a080038b 	ldhu	r2,14(r20)
    7be0:	113fffcc 	andi	r4,r2,65535
    7be4:	2120001c 	xori	r4,r4,32768
    7be8:	21200004 	addi	r4,r4,-32768
    7bec:	203e6e16 	blt	r4,zero,75a8 <___vfiprintf_internal_r+0x90>
    7bf0:	a3001917 	ldw	r12,100(r20)
    7bf4:	a2c00717 	ldw	r11,28(r20)
    7bf8:	a2800917 	ldw	r10,36(r20)
    7bfc:	d9012017 	ldw	r4,1152(sp)
    7c00:	d9c12117 	ldw	r7,1156(sp)
    7c04:	02410004 	movi	r9,1024
    7c08:	18ffff4c 	andi	r3,r3,65533
    7c0c:	da4b883a 	add	r5,sp,r9
    7c10:	b00d883a 	mov	r6,r22
    7c14:	d8c1030d 	sth	r3,1036(sp)
    7c18:	db011915 	stw	r12,1124(sp)
    7c1c:	d881038d 	sth	r2,1038(sp)
    7c20:	dac10715 	stw	r11,1052(sp)
    7c24:	da810915 	stw	r10,1060(sp)
    7c28:	dec10015 	stw	sp,1024(sp)
    7c2c:	dec10415 	stw	sp,1040(sp)
    7c30:	da410215 	stw	r9,1032(sp)
    7c34:	da410515 	stw	r9,1044(sp)
    7c38:	d8010615 	stw	zero,1048(sp)
    7c3c:	00075180 	call	7518 <___vfiprintf_internal_r>
    7c40:	1021883a 	mov	r16,r2
    7c44:	10000416 	blt	r2,zero,7c58 <___vfiprintf_internal_r+0x740>
    7c48:	d9012017 	ldw	r4,1152(sp)
    7c4c:	d9410004 	addi	r5,sp,1024
    7c50:	00048380 	call	4838 <_fflush_r>
    7c54:	1002fc1e 	bne	r2,zero,8848 <___vfiprintf_internal_r+0x1330>
    7c58:	d881030b 	ldhu	r2,1036(sp)
    7c5c:	1080100c 	andi	r2,r2,64
    7c60:	10000326 	beq	r2,zero,7c70 <___vfiprintf_internal_r+0x758>
    7c64:	a080030b 	ldhu	r2,12(r20)
    7c68:	10801014 	ori	r2,r2,64
    7c6c:	a080030d 	sth	r2,12(r20)
    7c70:	8005883a 	mov	r2,r16
    7c74:	00000106 	br	7c7c <___vfiprintf_internal_r+0x764>
    7c78:	00bfffc4 	movi	r2,-1
    7c7c:	dfc13517 	ldw	ra,1236(sp)
    7c80:	df013417 	ldw	fp,1232(sp)
    7c84:	ddc13317 	ldw	r23,1228(sp)
    7c88:	dd813217 	ldw	r22,1224(sp)
    7c8c:	dd413117 	ldw	r21,1220(sp)
    7c90:	dd013017 	ldw	r20,1216(sp)
    7c94:	dcc12f17 	ldw	r19,1212(sp)
    7c98:	dc812e17 	ldw	r18,1208(sp)
    7c9c:	dc412d17 	ldw	r17,1204(sp)
    7ca0:	dc012c17 	ldw	r16,1200(sp)
    7ca4:	dec13604 	addi	sp,sp,1240
    7ca8:	f800283a 	ret
    7cac:	0004de00 	call	4de0 <__sinit>
    7cb0:	003e2b06 	br	7560 <___vfiprintf_internal_r+0x48>
    7cb4:	04e7c83a 	sub	r19,zero,r19
    7cb8:	d8812115 	stw	r2,1156(sp)
    7cbc:	ad400114 	ori	r21,r21,4
    7cc0:	80c00007 	ldb	r3,0(r16)
    7cc4:	003e7306 	br	7694 <___vfiprintf_internal_r+0x17c>
    7cc8:	a880040c 	andi	r2,r21,16
    7ccc:	1000e41e 	bne	r2,zero,8060 <___vfiprintf_internal_r+0xb48>
    7cd0:	a880100c 	andi	r2,r21,64
    7cd4:	1000e226 	beq	r2,zero,8060 <___vfiprintf_internal_r+0xb48>
    7cd8:	da812117 	ldw	r10,1156(sp)
    7cdc:	002d883a 	mov	r22,zero
    7ce0:	0005883a 	mov	r2,zero
    7ce4:	5480000b 	ldhu	r18,0(r10)
    7ce8:	52800104 	addi	r10,r10,4
    7cec:	da812115 	stw	r10,1156(sp)
    7cf0:	9009883a 	mov	r4,r18
    7cf4:	003ee706 	br	7894 <___vfiprintf_internal_r+0x37c>
    7cf8:	da812117 	ldw	r10,1156(sp)
    7cfc:	00800044 	movi	r2,1
    7d00:	54800017 	ldw	r18,0(r10)
    7d04:	55800117 	ldw	r22,4(r10)
    7d08:	52800204 	addi	r10,r10,8
    7d0c:	da812115 	stw	r10,1156(sp)
    7d10:	9588b03a 	or	r4,r18,r22
    7d14:	003edf06 	br	7894 <___vfiprintf_internal_r+0x37c>
    7d18:	02c00074 	movhi	r11,1
    7d1c:	5afe5d04 	addi	r11,r11,-1676
    7d20:	d9811d85 	stb	r6,1142(sp)
    7d24:	dac12615 	stw	r11,1176(sp)
    7d28:	a900080c 	andi	r4,r21,32
    7d2c:	d8812117 	ldw	r2,1156(sp)
    7d30:	2000a526 	beq	r4,zero,7fc8 <___vfiprintf_internal_r+0xab0>
    7d34:	da812117 	ldw	r10,1156(sp)
    7d38:	14800017 	ldw	r18,0(r2)
    7d3c:	15800117 	ldw	r22,4(r2)
    7d40:	52800204 	addi	r10,r10,8
    7d44:	da812115 	stw	r10,1156(sp)
    7d48:	a880004c 	andi	r2,r21,1
    7d4c:	1001d926 	beq	r2,zero,84b4 <___vfiprintf_internal_r+0xf9c>
    7d50:	9588b03a 	or	r4,r18,r22
    7d54:	20024426 	beq	r4,zero,8668 <___vfiprintf_internal_r+0x1150>
    7d58:	00800c04 	movi	r2,48
    7d5c:	d8811d05 	stb	r2,1140(sp)
    7d60:	d8c11d45 	stb	r3,1141(sp)
    7d64:	ad400094 	ori	r21,r21,2
    7d68:	00800084 	movi	r2,2
    7d6c:	003ec906 	br	7894 <___vfiprintf_internal_r+0x37c>
    7d70:	da812117 	ldw	r10,1156(sp)
    7d74:	04800044 	movi	r18,1
    7d78:	dac10004 	addi	r11,sp,1024
    7d7c:	50800017 	ldw	r2,0(r10)
    7d80:	52800104 	addi	r10,r10,4
    7d84:	d8011d85 	stb	zero,1142(sp)
    7d88:	d8810005 	stb	r2,1024(sp)
    7d8c:	da812115 	stw	r10,1156(sp)
    7d90:	9023883a 	mov	r17,r18
    7d94:	dac12415 	stw	r11,1168(sp)
    7d98:	0013883a 	mov	r9,zero
    7d9c:	003ee206 	br	7928 <___vfiprintf_internal_r+0x410>
    7da0:	ad402014 	ori	r21,r21,128
    7da4:	80c00007 	ldb	r3,0(r16)
    7da8:	003e3a06 	br	7694 <___vfiprintf_internal_r+0x17c>
    7dac:	8015883a 	mov	r10,r16
    7db0:	0027883a 	mov	r19,zero
    7db4:	18bff404 	addi	r2,r3,-48
    7db8:	50c00007 	ldb	r3,0(r10)
    7dbc:	9cc002a4 	muli	r19,r19,10
    7dc0:	84000044 	addi	r16,r16,1
    7dc4:	8015883a 	mov	r10,r16
    7dc8:	98a7883a 	add	r19,r19,r2
    7dcc:	18bff404 	addi	r2,r3,-48
    7dd0:	28bff92e 	bgeu	r5,r2,7db8 <___vfiprintf_internal_r+0x8a0>
    7dd4:	003e3006 	br	7698 <___vfiprintf_internal_r+0x180>
    7dd8:	ad400414 	ori	r21,r21,16
    7ddc:	d9811d85 	stb	r6,1142(sp)
    7de0:	a880080c 	andi	r2,r21,32
    7de4:	d8c12117 	ldw	r3,1156(sp)
    7de8:	10004b26 	beq	r2,zero,7f18 <___vfiprintf_internal_r+0xa00>
    7dec:	da812117 	ldw	r10,1156(sp)
    7df0:	18800117 	ldw	r2,4(r3)
    7df4:	1c800017 	ldw	r18,0(r3)
    7df8:	52800204 	addi	r10,r10,8
    7dfc:	da812115 	stw	r10,1156(sp)
    7e00:	102d883a 	mov	r22,r2
    7e04:	1001f116 	blt	r2,zero,85cc <___vfiprintf_internal_r+0x10b4>
    7e08:	db011d83 	ldbu	r12,1142(sp)
    7e0c:	4823883a 	mov	r17,r9
    7e10:	00800044 	movi	r2,1
    7e14:	9588b03a 	or	r4,r18,r22
    7e18:	003ea106 	br	78a0 <___vfiprintf_internal_r+0x388>
    7e1c:	80c00007 	ldb	r3,0(r16)
    7e20:	82800044 	addi	r10,r16,1
    7e24:	1b027f26 	beq	r3,r12,8824 <___vfiprintf_internal_r+0x130c>
    7e28:	18bff404 	addi	r2,r3,-48
    7e2c:	5021883a 	mov	r16,r10
    7e30:	0013883a 	mov	r9,zero
    7e34:	28be1836 	bltu	r5,r2,7698 <___vfiprintf_internal_r+0x180>
    7e38:	80c00007 	ldb	r3,0(r16)
    7e3c:	4a4002a4 	muli	r9,r9,10
    7e40:	84000044 	addi	r16,r16,1
    7e44:	1253883a 	add	r9,r2,r9
    7e48:	18bff404 	addi	r2,r3,-48
    7e4c:	28bffa2e 	bgeu	r5,r2,7e38 <___vfiprintf_internal_r+0x920>
    7e50:	483e110e 	bge	r9,zero,7698 <___vfiprintf_internal_r+0x180>
    7e54:	027fffc4 	movi	r9,-1
    7e58:	003e0f06 	br	7698 <___vfiprintf_internal_r+0x180>
    7e5c:	d9811d85 	stb	r6,1142(sp)
    7e60:	a880080c 	andi	r2,r21,32
    7e64:	1001ee26 	beq	r2,zero,8620 <___vfiprintf_internal_r+0x1108>
    7e68:	da812117 	ldw	r10,1156(sp)
    7e6c:	dac12217 	ldw	r11,1160(sp)
    7e70:	50800017 	ldw	r2,0(r10)
    7e74:	5807d7fa 	srai	r3,r11,31
    7e78:	52800104 	addi	r10,r10,4
    7e7c:	da812115 	stw	r10,1156(sp)
    7e80:	12c00015 	stw	r11,0(r2)
    7e84:	10c00115 	stw	r3,4(r2)
    7e88:	003dd806 	br	75ec <___vfiprintf_internal_r+0xd4>
    7e8c:	30803fcc 	andi	r2,r6,255
    7e90:	1080201c 	xori	r2,r2,128
    7e94:	10bfe004 	addi	r2,r2,-128
    7e98:	1001df1e 	bne	r2,zero,8618 <___vfiprintf_internal_r+0x1100>
    7e9c:	01800804 	movi	r6,32
    7ea0:	80c00007 	ldb	r3,0(r16)
    7ea4:	003dfb06 	br	7694 <___vfiprintf_internal_r+0x17c>
    7ea8:	da812117 	ldw	r10,1156(sp)
    7eac:	dac12117 	ldw	r11,1156(sp)
    7eb0:	d8011d85 	stb	zero,1142(sp)
    7eb4:	52800017 	ldw	r10,0(r10)
    7eb8:	5d800104 	addi	r22,r11,4
    7ebc:	da812415 	stw	r10,1168(sp)
    7ec0:	50023b26 	beq	r10,zero,87b0 <___vfiprintf_internal_r+0x1298>
    7ec4:	d9012417 	ldw	r4,1168(sp)
    7ec8:	48021f16 	blt	r9,zero,8748 <___vfiprintf_internal_r+0x1230>
    7ecc:	480d883a 	mov	r6,r9
    7ed0:	000b883a 	mov	r5,zero
    7ed4:	da012a15 	stw	r8,1192(sp)
    7ed8:	da412b15 	stw	r9,1196(sp)
    7edc:	0005df40 	call	5df4 <memchr>
    7ee0:	da012a17 	ldw	r8,1192(sp)
    7ee4:	da412b17 	ldw	r9,1196(sp)
    7ee8:	10024726 	beq	r2,zero,8808 <___vfiprintf_internal_r+0x12f0>
    7eec:	d8c12417 	ldw	r3,1168(sp)
    7ef0:	10e3c83a 	sub	r17,r2,r3
    7ef4:	4c41f616 	blt	r9,r17,86d0 <___vfiprintf_internal_r+0x11b8>
    7ef8:	db011d83 	ldbu	r12,1142(sp)
    7efc:	dd812115 	stw	r22,1156(sp)
    7f00:	0013883a 	mov	r9,zero
    7f04:	003e8006 	br	7908 <___vfiprintf_internal_r+0x3f0>
    7f08:	d9811d85 	stb	r6,1142(sp)
    7f0c:	a880080c 	andi	r2,r21,32
    7f10:	d8c12117 	ldw	r3,1156(sp)
    7f14:	103fb51e 	bne	r2,zero,7dec <___vfiprintf_internal_r+0x8d4>
    7f18:	a880040c 	andi	r2,r21,16
    7f1c:	10015e1e 	bne	r2,zero,8498 <___vfiprintf_internal_r+0xf80>
    7f20:	a880100c 	andi	r2,r21,64
    7f24:	10015c26 	beq	r2,zero,8498 <___vfiprintf_internal_r+0xf80>
    7f28:	1c80000f 	ldh	r18,0(r3)
    7f2c:	da812117 	ldw	r10,1156(sp)
    7f30:	902dd7fa 	srai	r22,r18,31
    7f34:	52800104 	addi	r10,r10,4
    7f38:	da812115 	stw	r10,1156(sp)
    7f3c:	b005883a 	mov	r2,r22
    7f40:	003fb006 	br	7e04 <___vfiprintf_internal_r+0x8ec>
    7f44:	da812117 	ldw	r10,1156(sp)
    7f48:	00800c04 	movi	r2,48
    7f4c:	02c00074 	movhi	r11,1
    7f50:	54800017 	ldw	r18,0(r10)
    7f54:	d8811d05 	stb	r2,1140(sp)
    7f58:	52800104 	addi	r10,r10,4
    7f5c:	00801e04 	movi	r2,120
    7f60:	5afe6204 	addi	r11,r11,-1656
    7f64:	d8811d45 	stb	r2,1141(sp)
    7f68:	002d883a 	mov	r22,zero
    7f6c:	ad400094 	ori	r21,r21,2
    7f70:	da812115 	stw	r10,1156(sp)
    7f74:	dac12615 	stw	r11,1176(sp)
    7f78:	00800084 	movi	r2,2
    7f7c:	9009883a 	mov	r4,r18
    7f80:	003e4406 	br	7894 <___vfiprintf_internal_r+0x37c>
    7f84:	ad400814 	ori	r21,r21,32
    7f88:	80c00007 	ldb	r3,0(r16)
    7f8c:	003dc106 	br	7694 <___vfiprintf_internal_r+0x17c>
    7f90:	ad401014 	ori	r21,r21,64
    7f94:	80c00007 	ldb	r3,0(r16)
    7f98:	003dbe06 	br	7694 <___vfiprintf_internal_r+0x17c>
    7f9c:	80c00007 	ldb	r3,0(r16)
    7fa0:	19c1de26 	beq	r3,r7,871c <___vfiprintf_internal_r+0x1204>
    7fa4:	ad400414 	ori	r21,r21,16
    7fa8:	003dba06 	br	7694 <___vfiprintf_internal_r+0x17c>
    7fac:	00800074 	movhi	r2,1
    7fb0:	10be6204 	addi	r2,r2,-1656
    7fb4:	d8812615 	stw	r2,1176(sp)
    7fb8:	d9811d85 	stb	r6,1142(sp)
    7fbc:	a900080c 	andi	r4,r21,32
    7fc0:	d8812117 	ldw	r2,1156(sp)
    7fc4:	203f5b1e 	bne	r4,zero,7d34 <___vfiprintf_internal_r+0x81c>
    7fc8:	a900040c 	andi	r4,r21,16
    7fcc:	2001a826 	beq	r4,zero,8670 <___vfiprintf_internal_r+0x1158>
    7fd0:	dac12117 	ldw	r11,1156(sp)
    7fd4:	14800017 	ldw	r18,0(r2)
    7fd8:	002d883a 	mov	r22,zero
    7fdc:	5ac00104 	addi	r11,r11,4
    7fe0:	dac12115 	stw	r11,1156(sp)
    7fe4:	003f5806 	br	7d48 <___vfiprintf_internal_r+0x830>
    7fe8:	da812117 	ldw	r10,1156(sp)
    7fec:	54c00017 	ldw	r19,0(r10)
    7ff0:	50800104 	addi	r2,r10,4
    7ff4:	983f2f16 	blt	r19,zero,7cb4 <___vfiprintf_internal_r+0x79c>
    7ff8:	d8812115 	stw	r2,1156(sp)
    7ffc:	80c00007 	ldb	r3,0(r16)
    8000:	003da406 	br	7694 <___vfiprintf_internal_r+0x17c>
    8004:	01800ac4 	movi	r6,43
    8008:	80c00007 	ldb	r3,0(r16)
    800c:	003da106 	br	7694 <___vfiprintf_internal_r+0x17c>
    8010:	ad400054 	ori	r21,r21,1
    8014:	80c00007 	ldb	r3,0(r16)
    8018:	003d9e06 	br	7694 <___vfiprintf_internal_r+0x17c>
    801c:	d9811d85 	stb	r6,1142(sp)
    8020:	18007126 	beq	r3,zero,81e8 <___vfiprintf_internal_r+0xcd0>
    8024:	04800044 	movi	r18,1
    8028:	d8c10005 	stb	r3,1024(sp)
    802c:	d8c10004 	addi	r3,sp,1024
    8030:	d8011d85 	stb	zero,1142(sp)
    8034:	9023883a 	mov	r17,r18
    8038:	d8c12415 	stw	r3,1168(sp)
    803c:	003f5606 	br	7d98 <___vfiprintf_internal_r+0x880>
    8040:	dac12117 	ldw	r11,1156(sp)
    8044:	002d883a 	mov	r22,zero
    8048:	00800044 	movi	r2,1
    804c:	5c800017 	ldw	r18,0(r11)
    8050:	5ac00104 	addi	r11,r11,4
    8054:	dac12115 	stw	r11,1156(sp)
    8058:	9009883a 	mov	r4,r18
    805c:	003e0d06 	br	7894 <___vfiprintf_internal_r+0x37c>
    8060:	dac12117 	ldw	r11,1156(sp)
    8064:	002d883a 	mov	r22,zero
    8068:	0005883a 	mov	r2,zero
    806c:	5c800017 	ldw	r18,0(r11)
    8070:	5ac00104 	addi	r11,r11,4
    8074:	dac12115 	stw	r11,1156(sp)
    8078:	9009883a 	mov	r4,r18
    807c:	003e0506 	br	7894 <___vfiprintf_internal_r+0x37c>
    8080:	d9012017 	ldw	r4,1152(sp)
    8084:	a00b883a 	mov	r5,r20
    8088:	d9811a04 	addi	r6,sp,1128
    808c:	d8c12a15 	stw	r3,1192(sp)
    8090:	db012b15 	stw	r12,1196(sp)
    8094:	00074040 	call	7404 <__sprint_r.part.0>
    8098:	d8c12a17 	ldw	r3,1192(sp)
    809c:	db012b17 	ldw	r12,1196(sp)
    80a0:	1000571e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    80a4:	d9811b17 	ldw	r6,1132(sp)
    80a8:	d8811c17 	ldw	r2,1136(sp)
    80ac:	d811883a 	mov	r8,sp
    80b0:	31400044 	addi	r5,r6,1
    80b4:	003e3306 	br	7984 <___vfiprintf_internal_r+0x46c>
    80b8:	d9411b17 	ldw	r5,1132(sp)
    80bc:	d8c11c17 	ldw	r3,1136(sp)
    80c0:	28800044 	addi	r2,r5,1
    80c4:	d9011d87 	ldb	r4,1142(sp)
    80c8:	203e4d26 	beq	r4,zero,7a00 <___vfiprintf_internal_r+0x4e8>
    80cc:	01000044 	movi	r4,1
    80d0:	d9411d84 	addi	r5,sp,1142
    80d4:	1907883a 	add	r3,r3,r4
    80d8:	41400015 	stw	r5,0(r8)
    80dc:	41000115 	stw	r4,4(r8)
    80e0:	d8c11c15 	stw	r3,1136(sp)
    80e4:	d8811b15 	stw	r2,1132(sp)
    80e8:	014001c4 	movi	r5,7
    80ec:	2880aa16 	blt	r5,r2,8398 <___vfiprintf_internal_r+0xe80>
    80f0:	100b883a 	mov	r5,r2
    80f4:	42000204 	addi	r8,r8,8
    80f8:	10800044 	addi	r2,r2,1
    80fc:	003e4006 	br	7a00 <___vfiprintf_internal_r+0x4e8>
    8100:	d9012017 	ldw	r4,1152(sp)
    8104:	a00b883a 	mov	r5,r20
    8108:	d9811a04 	addi	r6,sp,1128
    810c:	d9c12a15 	stw	r7,1192(sp)
    8110:	db012b15 	stw	r12,1196(sp)
    8114:	00074040 	call	7404 <__sprint_r.part.0>
    8118:	d9c12a17 	ldw	r7,1192(sp)
    811c:	db012b17 	ldw	r12,1196(sp)
    8120:	1000371e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8124:	d9411b17 	ldw	r5,1132(sp)
    8128:	d8c11c17 	ldw	r3,1136(sp)
    812c:	d811883a 	mov	r8,sp
    8130:	28800044 	addi	r2,r5,1
    8134:	003e4d06 	br	7a6c <___vfiprintf_internal_r+0x554>
    8138:	10803fcc 	andi	r2,r2,255
    813c:	00c00044 	movi	r3,1
    8140:	10fddf1e 	bne	r2,r3,78c0 <___vfiprintf_internal_r+0x3a8>
    8144:	b000021e 	bne	r22,zero,8150 <___vfiprintf_internal_r+0xc38>
    8148:	00800244 	movi	r2,9
    814c:	1480202e 	bgeu	r2,r18,81d0 <___vfiprintf_internal_r+0xcb8>
    8150:	dc012515 	stw	r16,1172(sp)
    8154:	dc410a04 	addi	r17,sp,1064
    8158:	9021883a 	mov	r16,r18
    815c:	da012415 	stw	r8,1168(sp)
    8160:	b025883a 	mov	r18,r22
    8164:	da412315 	stw	r9,1164(sp)
    8168:	602d883a 	mov	r22,r12
    816c:	8009883a 	mov	r4,r16
    8170:	900b883a 	mov	r5,r18
    8174:	01800284 	movi	r6,10
    8178:	000f883a 	mov	r7,zero
    817c:	000a3300 	call	a330 <__umoddi3>
    8180:	10800c04 	addi	r2,r2,48
    8184:	8c7fffc4 	addi	r17,r17,-1
    8188:	8009883a 	mov	r4,r16
    818c:	900b883a 	mov	r5,r18
    8190:	01800284 	movi	r6,10
    8194:	000f883a 	mov	r7,zero
    8198:	88800005 	stb	r2,0(r17)
    819c:	0009d700 	call	9d70 <__udivdi3>
    81a0:	1021883a 	mov	r16,r2
    81a4:	10c4b03a 	or	r2,r2,r3
    81a8:	1825883a 	mov	r18,r3
    81ac:	103fef1e 	bne	r2,zero,816c <___vfiprintf_internal_r+0xc54>
    81b0:	da811e17 	ldw	r10,1144(sp)
    81b4:	da012417 	ldw	r8,1168(sp)
    81b8:	da412317 	ldw	r9,1164(sp)
    81bc:	dc412415 	stw	r17,1168(sp)
    81c0:	b019883a 	mov	r12,r22
    81c4:	dc012517 	ldw	r16,1172(sp)
    81c8:	5463c83a 	sub	r17,r10,r17
    81cc:	003dce06 	br	7908 <___vfiprintf_internal_r+0x3f0>
    81d0:	94800c04 	addi	r18,r18,48
    81d4:	d8c109c4 	addi	r3,sp,1063
    81d8:	dc8109c5 	stb	r18,1063(sp)
    81dc:	dc412717 	ldw	r17,1180(sp)
    81e0:	d8c12415 	stw	r3,1168(sp)
    81e4:	003dc806 	br	7908 <___vfiprintf_internal_r+0x3f0>
    81e8:	d8811c17 	ldw	r2,1136(sp)
    81ec:	10000426 	beq	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    81f0:	d9012017 	ldw	r4,1152(sp)
    81f4:	a00b883a 	mov	r5,r20
    81f8:	d9811a04 	addi	r6,sp,1128
    81fc:	00074040 	call	7404 <__sprint_r.part.0>
    8200:	a080030b 	ldhu	r2,12(r20)
    8204:	1080100c 	andi	r2,r2,64
    8208:	103e9b1e 	bne	r2,zero,7c78 <___vfiprintf_internal_r+0x760>
    820c:	d8812217 	ldw	r2,1160(sp)
    8210:	003e9a06 	br	7c7c <___vfiprintf_internal_r+0x764>
    8214:	d9012017 	ldw	r4,1152(sp)
    8218:	a00b883a 	mov	r5,r20
    821c:	d9811a04 	addi	r6,sp,1128
    8220:	00074040 	call	7404 <__sprint_r.part.0>
    8224:	103ff61e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8228:	d9011b17 	ldw	r4,1132(sp)
    822c:	d8c11c17 	ldw	r3,1136(sp)
    8230:	d811883a 	mov	r8,sp
    8234:	21400044 	addi	r5,r4,1
    8238:	003e4006 	br	7b3c <___vfiprintf_internal_r+0x624>
    823c:	1800d61e 	bne	r3,zero,8598 <___vfiprintf_internal_r+0x1080>
    8240:	dac12417 	ldw	r11,1168(sp)
    8244:	00800044 	movi	r2,1
    8248:	dc400115 	stw	r17,4(sp)
    824c:	dac00015 	stw	r11,0(sp)
    8250:	dc411c15 	stw	r17,1136(sp)
    8254:	d8811b15 	stw	r2,1132(sp)
    8258:	8807883a 	mov	r3,r17
    825c:	d811883a 	mov	r8,sp
    8260:	42000204 	addi	r8,r8,8
    8264:	aac0010c 	andi	r11,r21,4
    8268:	58000226 	beq	r11,zero,8274 <___vfiprintf_internal_r+0xd5c>
    826c:	9ca3c83a 	sub	r17,r19,r18
    8270:	047e2616 	blt	zero,r17,7b0c <___vfiprintf_internal_r+0x5f4>
    8274:	94c0010e 	bge	r18,r19,827c <___vfiprintf_internal_r+0xd64>
    8278:	9825883a 	mov	r18,r19
    827c:	da812217 	ldw	r10,1160(sp)
    8280:	5495883a 	add	r10,r10,r18
    8284:	da812215 	stw	r10,1160(sp)
    8288:	183e4826 	beq	r3,zero,7bac <___vfiprintf_internal_r+0x694>
    828c:	d9012017 	ldw	r4,1152(sp)
    8290:	a00b883a 	mov	r5,r20
    8294:	d9811a04 	addi	r6,sp,1128
    8298:	00074040 	call	7404 <__sprint_r.part.0>
    829c:	103e4326 	beq	r2,zero,7bac <___vfiprintf_internal_r+0x694>
    82a0:	003fd706 	br	8200 <___vfiprintf_internal_r+0xce8>
    82a4:	9cadc83a 	sub	r22,r19,r18
    82a8:	05bde40e 	bge	zero,r22,7a3c <___vfiprintf_internal_r+0x524>
    82ac:	03000404 	movi	r12,16
    82b0:	6581500e 	bge	r12,r22,87f4 <___vfiprintf_internal_r+0x12dc>
    82b4:	00800074 	movhi	r2,1
    82b8:	10bec304 	addi	r2,r2,-1268
    82bc:	d8812315 	stw	r2,1164(sp)
    82c0:	8005883a 	mov	r2,r16
    82c4:	038001c4 	movi	r14,7
    82c8:	b021883a 	mov	r16,r22
    82cc:	da412515 	stw	r9,1172(sp)
    82d0:	102d883a 	mov	r22,r2
    82d4:	00000506 	br	82ec <___vfiprintf_internal_r+0xdd4>
    82d8:	29000084 	addi	r4,r5,2
    82dc:	42000204 	addi	r8,r8,8
    82e0:	100b883a 	mov	r5,r2
    82e4:	843ffc04 	addi	r16,r16,-16
    82e8:	64000d0e 	bge	r12,r16,8320 <___vfiprintf_internal_r+0xe08>
    82ec:	18c00404 	addi	r3,r3,16
    82f0:	28800044 	addi	r2,r5,1
    82f4:	45c00015 	stw	r23,0(r8)
    82f8:	43000115 	stw	r12,4(r8)
    82fc:	d8c11c15 	stw	r3,1136(sp)
    8300:	d8811b15 	stw	r2,1132(sp)
    8304:	70bff40e 	bge	r14,r2,82d8 <___vfiprintf_internal_r+0xdc0>
    8308:	1800151e 	bne	r3,zero,8360 <___vfiprintf_internal_r+0xe48>
    830c:	843ffc04 	addi	r16,r16,-16
    8310:	000b883a 	mov	r5,zero
    8314:	01000044 	movi	r4,1
    8318:	d811883a 	mov	r8,sp
    831c:	643ff316 	blt	r12,r16,82ec <___vfiprintf_internal_r+0xdd4>
    8320:	da412517 	ldw	r9,1172(sp)
    8324:	b005883a 	mov	r2,r22
    8328:	802d883a 	mov	r22,r16
    832c:	1021883a 	mov	r16,r2
    8330:	da812317 	ldw	r10,1164(sp)
    8334:	1d87883a 	add	r3,r3,r22
    8338:	45800115 	stw	r22,4(r8)
    833c:	42800015 	stw	r10,0(r8)
    8340:	d8c11c15 	stw	r3,1136(sp)
    8344:	d9011b15 	stw	r4,1132(sp)
    8348:	008001c4 	movi	r2,7
    834c:	11008d16 	blt	r2,r4,8584 <___vfiprintf_internal_r+0x106c>
    8350:	42000204 	addi	r8,r8,8
    8354:	20800044 	addi	r2,r4,1
    8358:	200b883a 	mov	r5,r4
    835c:	003db706 	br	7a3c <___vfiprintf_internal_r+0x524>
    8360:	d9012017 	ldw	r4,1152(sp)
    8364:	a00b883a 	mov	r5,r20
    8368:	d9811a04 	addi	r6,sp,1128
    836c:	db012b15 	stw	r12,1196(sp)
    8370:	db812a15 	stw	r14,1192(sp)
    8374:	00074040 	call	7404 <__sprint_r.part.0>
    8378:	db012b17 	ldw	r12,1196(sp)
    837c:	db812a17 	ldw	r14,1192(sp)
    8380:	103f9f1e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8384:	d9411b17 	ldw	r5,1132(sp)
    8388:	d8c11c17 	ldw	r3,1136(sp)
    838c:	d811883a 	mov	r8,sp
    8390:	29000044 	addi	r4,r5,1
    8394:	003fd306 	br	82e4 <___vfiprintf_internal_r+0xdcc>
    8398:	18006c1e 	bne	r3,zero,854c <___vfiprintf_internal_r+0x1034>
    839c:	70004f26 	beq	r14,zero,84dc <___vfiprintf_internal_r+0xfc4>
    83a0:	d8811d04 	addi	r2,sp,1140
    83a4:	00c00084 	movi	r3,2
    83a8:	d8800015 	stw	r2,0(sp)
    83ac:	d8c00115 	stw	r3,4(sp)
    83b0:	2005883a 	mov	r2,r4
    83b4:	d811883a 	mov	r8,sp
    83b8:	003d9b06 	br	7a28 <___vfiprintf_internal_r+0x510>
    83bc:	1800571e 	bne	r3,zero,851c <___vfiprintf_internal_r+0x1004>
    83c0:	000b883a 	mov	r5,zero
    83c4:	00800044 	movi	r2,1
    83c8:	d811883a 	mov	r8,sp
    83cc:	003d9906 	br	7a34 <___vfiprintf_internal_r+0x51c>
    83d0:	10803fcc 	andi	r2,r2,255
    83d4:	1000251e 	bne	r2,zero,846c <___vfiprintf_internal_r+0xf54>
    83d8:	a880004c 	andi	r2,r21,1
    83dc:	10007826 	beq	r2,zero,85c0 <___vfiprintf_internal_r+0x10a8>
    83e0:	00800c04 	movi	r2,48
    83e4:	d8c109c4 	addi	r3,sp,1063
    83e8:	d88109c5 	stb	r2,1063(sp)
    83ec:	dc412717 	ldw	r17,1180(sp)
    83f0:	d8c12415 	stw	r3,1168(sp)
    83f4:	003d4406 	br	7908 <___vfiprintf_internal_r+0x3f0>
    83f8:	d9012617 	ldw	r4,1176(sp)
    83fc:	dc410a04 	addi	r17,sp,1064
    8400:	908003cc 	andi	r2,r18,15
    8404:	b006973a 	slli	r3,r22,28
    8408:	2085883a 	add	r2,r4,r2
    840c:	9024d13a 	srli	r18,r18,4
    8410:	10800003 	ldbu	r2,0(r2)
    8414:	b02cd13a 	srli	r22,r22,4
    8418:	8c7fffc4 	addi	r17,r17,-1
    841c:	1ca4b03a 	or	r18,r3,r18
    8420:	88800005 	stb	r2,0(r17)
    8424:	9584b03a 	or	r2,r18,r22
    8428:	103ff51e 	bne	r2,zero,8400 <___vfiprintf_internal_r+0xee8>
    842c:	dac11e17 	ldw	r11,1144(sp)
    8430:	dc412415 	stw	r17,1168(sp)
    8434:	5c63c83a 	sub	r17,r11,r17
    8438:	003d3306 	br	7908 <___vfiprintf_internal_r+0x3f0>
    843c:	1800941e 	bne	r3,zero,8690 <___vfiprintf_internal_r+0x1178>
    8440:	d8811d87 	ldb	r2,1142(sp)
    8444:	10006b26 	beq	r2,zero,85f4 <___vfiprintf_internal_r+0x10dc>
    8448:	00c00044 	movi	r3,1
    844c:	d9011d84 	addi	r4,sp,1142
    8450:	1805883a 	mov	r2,r3
    8454:	d9000015 	stw	r4,0(sp)
    8458:	d8c00115 	stw	r3,4(sp)
    845c:	d811883a 	mov	r8,sp
    8460:	003f2306 	br	80f0 <___vfiprintf_internal_r+0xbd8>
    8464:	8023883a 	mov	r17,r16
    8468:	003c7d06 	br	7660 <___vfiprintf_internal_r+0x148>
    846c:	da810a04 	addi	r10,sp,1064
    8470:	da812415 	stw	r10,1168(sp)
    8474:	003d2406 	br	7908 <___vfiprintf_internal_r+0x3f0>
    8478:	d9012017 	ldw	r4,1152(sp)
    847c:	a00b883a 	mov	r5,r20
    8480:	d9811a04 	addi	r6,sp,1128
    8484:	00074040 	call	7404 <__sprint_r.part.0>
    8488:	103f5d1e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    848c:	d8c11c17 	ldw	r3,1136(sp)
    8490:	d811883a 	mov	r8,sp
    8494:	003f7306 	br	8264 <___vfiprintf_internal_r+0xd4c>
    8498:	1c800017 	ldw	r18,0(r3)
    849c:	dac12117 	ldw	r11,1156(sp)
    84a0:	902dd7fa 	srai	r22,r18,31
    84a4:	5ac00104 	addi	r11,r11,4
    84a8:	dac12115 	stw	r11,1156(sp)
    84ac:	b005883a 	mov	r2,r22
    84b0:	003e5406 	br	7e04 <___vfiprintf_internal_r+0x8ec>
    84b4:	00800084 	movi	r2,2
    84b8:	9588b03a 	or	r4,r18,r22
    84bc:	003cf506 	br	7894 <___vfiprintf_internal_r+0x37c>
    84c0:	d9012017 	ldw	r4,1152(sp)
    84c4:	a00b883a 	mov	r5,r20
    84c8:	d9811a04 	addi	r6,sp,1128
    84cc:	00074040 	call	7404 <__sprint_r.part.0>
    84d0:	103f4b1e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    84d4:	d811883a 	mov	r8,sp
    84d8:	003cd106 	br	7820 <___vfiprintf_internal_r+0x308>
    84dc:	000b883a 	mov	r5,zero
    84e0:	2005883a 	mov	r2,r4
    84e4:	d811883a 	mov	r8,sp
    84e8:	003d5206 	br	7a34 <___vfiprintf_internal_r+0x51c>
    84ec:	10803fcc 	andi	r2,r2,255
    84f0:	1080201c 	xori	r2,r2,128
    84f4:	10bfe004 	addi	r2,r2,-128
    84f8:	01000c04 	movi	r4,48
    84fc:	11008e26 	beq	r2,r4,8738 <___vfiprintf_internal_r+0x1220>
    8500:	da812417 	ldw	r10,1168(sp)
    8504:	dac11e17 	ldw	r11,1144(sp)
    8508:	193fffc5 	stb	r4,-1(r3)
    850c:	52bfffc4 	addi	r10,r10,-1
    8510:	da812415 	stw	r10,1168(sp)
    8514:	5aa3c83a 	sub	r17,r11,r10
    8518:	003cfb06 	br	7908 <___vfiprintf_internal_r+0x3f0>
    851c:	d9012017 	ldw	r4,1152(sp)
    8520:	a00b883a 	mov	r5,r20
    8524:	d9811a04 	addi	r6,sp,1128
    8528:	da412b15 	stw	r9,1196(sp)
    852c:	00074040 	call	7404 <__sprint_r.part.0>
    8530:	da412b17 	ldw	r9,1196(sp)
    8534:	103f321e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8538:	d9411b17 	ldw	r5,1132(sp)
    853c:	d8c11c17 	ldw	r3,1136(sp)
    8540:	d811883a 	mov	r8,sp
    8544:	28800044 	addi	r2,r5,1
    8548:	003d3a06 	br	7a34 <___vfiprintf_internal_r+0x51c>
    854c:	d9012017 	ldw	r4,1152(sp)
    8550:	a00b883a 	mov	r5,r20
    8554:	d9811a04 	addi	r6,sp,1128
    8558:	da412b15 	stw	r9,1196(sp)
    855c:	db812a15 	stw	r14,1192(sp)
    8560:	00074040 	call	7404 <__sprint_r.part.0>
    8564:	da412b17 	ldw	r9,1196(sp)
    8568:	db812a17 	ldw	r14,1192(sp)
    856c:	103f241e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8570:	d9411b17 	ldw	r5,1132(sp)
    8574:	d8c11c17 	ldw	r3,1136(sp)
    8578:	d811883a 	mov	r8,sp
    857c:	28800044 	addi	r2,r5,1
    8580:	003d1f06 	br	7a00 <___vfiprintf_internal_r+0x4e8>
    8584:	1800781e 	bne	r3,zero,8768 <___vfiprintf_internal_r+0x1250>
    8588:	000b883a 	mov	r5,zero
    858c:	00800044 	movi	r2,1
    8590:	d811883a 	mov	r8,sp
    8594:	003d2906 	br	7a3c <___vfiprintf_internal_r+0x524>
    8598:	d9012017 	ldw	r4,1152(sp)
    859c:	a00b883a 	mov	r5,r20
    85a0:	d9811a04 	addi	r6,sp,1128
    85a4:	00074040 	call	7404 <__sprint_r.part.0>
    85a8:	103f151e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    85ac:	d8811b17 	ldw	r2,1132(sp)
    85b0:	d8c11c17 	ldw	r3,1136(sp)
    85b4:	d811883a 	mov	r8,sp
    85b8:	10800044 	addi	r2,r2,1
    85bc:	003d4406 	br	7ad0 <___vfiprintf_internal_r+0x5b8>
    85c0:	dac10a04 	addi	r11,sp,1064
    85c4:	dac12415 	stw	r11,1168(sp)
    85c8:	003ccf06 	br	7908 <___vfiprintf_internal_r+0x3f0>
    85cc:	04a5c83a 	sub	r18,zero,r18
    85d0:	9004c03a 	cmpne	r2,r18,zero
    85d4:	05adc83a 	sub	r22,zero,r22
    85d8:	b0adc83a 	sub	r22,r22,r2
    85dc:	03000b44 	movi	r12,45
    85e0:	db011d85 	stb	r12,1142(sp)
    85e4:	4823883a 	mov	r17,r9
    85e8:	00800044 	movi	r2,1
    85ec:	9588b03a 	or	r4,r18,r22
    85f0:	003cab06 	br	78a0 <___vfiprintf_internal_r+0x388>
    85f4:	000b883a 	mov	r5,zero
    85f8:	00800044 	movi	r2,1
    85fc:	d811883a 	mov	r8,sp
    8600:	703d0c26 	beq	r14,zero,7a34 <___vfiprintf_internal_r+0x51c>
    8604:	00c00084 	movi	r3,2
    8608:	d9011d04 	addi	r4,sp,1140
    860c:	d9000015 	stw	r4,0(sp)
    8610:	d8c00115 	stw	r3,4(sp)
    8614:	003d0406 	br	7a28 <___vfiprintf_internal_r+0x510>
    8618:	80c00007 	ldb	r3,0(r16)
    861c:	003c1d06 	br	7694 <___vfiprintf_internal_r+0x17c>
    8620:	a880040c 	andi	r2,r21,16
    8624:	1000091e 	bne	r2,zero,864c <___vfiprintf_internal_r+0x1134>
    8628:	aac0100c 	andi	r11,r21,64
    862c:	58000726 	beq	r11,zero,864c <___vfiprintf_internal_r+0x1134>
    8630:	da812117 	ldw	r10,1156(sp)
    8634:	dac12217 	ldw	r11,1160(sp)
    8638:	50800017 	ldw	r2,0(r10)
    863c:	52800104 	addi	r10,r10,4
    8640:	da812115 	stw	r10,1156(sp)
    8644:	12c0000d 	sth	r11,0(r2)
    8648:	003be806 	br	75ec <___vfiprintf_internal_r+0xd4>
    864c:	da812117 	ldw	r10,1156(sp)
    8650:	dac12217 	ldw	r11,1160(sp)
    8654:	50800017 	ldw	r2,0(r10)
    8658:	52800104 	addi	r10,r10,4
    865c:	da812115 	stw	r10,1156(sp)
    8660:	12c00015 	stw	r11,0(r2)
    8664:	003be106 	br	75ec <___vfiprintf_internal_r+0xd4>
    8668:	00800084 	movi	r2,2
    866c:	003c8906 	br	7894 <___vfiprintf_internal_r+0x37c>
    8670:	a900100c 	andi	r4,r21,64
    8674:	20001f26 	beq	r4,zero,86f4 <___vfiprintf_internal_r+0x11dc>
    8678:	da812117 	ldw	r10,1156(sp)
    867c:	1480000b 	ldhu	r18,0(r2)
    8680:	002d883a 	mov	r22,zero
    8684:	52800104 	addi	r10,r10,4
    8688:	da812115 	stw	r10,1156(sp)
    868c:	003dae06 	br	7d48 <___vfiprintf_internal_r+0x830>
    8690:	d9012017 	ldw	r4,1152(sp)
    8694:	a00b883a 	mov	r5,r20
    8698:	d9811a04 	addi	r6,sp,1128
    869c:	da412b15 	stw	r9,1196(sp)
    86a0:	db812a15 	stw	r14,1192(sp)
    86a4:	00074040 	call	7404 <__sprint_r.part.0>
    86a8:	da412b17 	ldw	r9,1196(sp)
    86ac:	db812a17 	ldw	r14,1192(sp)
    86b0:	103ed31e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    86b4:	d9411b17 	ldw	r5,1132(sp)
    86b8:	d8c11c17 	ldw	r3,1136(sp)
    86bc:	d811883a 	mov	r8,sp
    86c0:	28800044 	addi	r2,r5,1
    86c4:	003e7f06 	br	80c4 <___vfiprintf_internal_r+0xbac>
    86c8:	9825883a 	mov	r18,r19
    86cc:	003d3406 	br	7ba0 <___vfiprintf_internal_r+0x688>
    86d0:	4823883a 	mov	r17,r9
    86d4:	003e0806 	br	7ef8 <___vfiprintf_internal_r+0x9e0>
    86d8:	d9012017 	ldw	r4,1152(sp)
    86dc:	a00b883a 	mov	r5,r20
    86e0:	d9811a04 	addi	r6,sp,1128
    86e4:	00074040 	call	7404 <__sprint_r.part.0>
    86e8:	103ec51e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    86ec:	d8c11c17 	ldw	r3,1136(sp)
    86f0:	003ee006 	br	8274 <___vfiprintf_internal_r+0xd5c>
    86f4:	dac12117 	ldw	r11,1156(sp)
    86f8:	14800017 	ldw	r18,0(r2)
    86fc:	002d883a 	mov	r22,zero
    8700:	5ac00104 	addi	r11,r11,4
    8704:	dac12115 	stw	r11,1156(sp)
    8708:	003d8f06 	br	7d48 <___vfiprintf_internal_r+0x830>
    870c:	02c00074 	movhi	r11,1
    8710:	5afec304 	addi	r11,r11,-1268
    8714:	dac12315 	stw	r11,1164(sp)
    8718:	003ce306 	br	7aa8 <___vfiprintf_internal_r+0x590>
    871c:	80c00043 	ldbu	r3,1(r16)
    8720:	ad400814 	ori	r21,r21,32
    8724:	84000044 	addi	r16,r16,1
    8728:	18c03fcc 	andi	r3,r3,255
    872c:	18c0201c 	xori	r3,r3,128
    8730:	18ffe004 	addi	r3,r3,-128
    8734:	003bd706 	br	7694 <___vfiprintf_internal_r+0x17c>
    8738:	dac11e17 	ldw	r11,1144(sp)
    873c:	d8c12417 	ldw	r3,1168(sp)
    8740:	58e3c83a 	sub	r17,r11,r3
    8744:	003c7006 	br	7908 <___vfiprintf_internal_r+0x3f0>
    8748:	da012a15 	stw	r8,1192(sp)
    874c:	000736c0 	call	736c <strlen>
    8750:	1023883a 	mov	r17,r2
    8754:	db011d83 	ldbu	r12,1142(sp)
    8758:	dd812115 	stw	r22,1156(sp)
    875c:	0013883a 	mov	r9,zero
    8760:	da012a17 	ldw	r8,1192(sp)
    8764:	003c6806 	br	7908 <___vfiprintf_internal_r+0x3f0>
    8768:	d9012017 	ldw	r4,1152(sp)
    876c:	a00b883a 	mov	r5,r20
    8770:	d9811a04 	addi	r6,sp,1128
    8774:	da412b15 	stw	r9,1196(sp)
    8778:	00074040 	call	7404 <__sprint_r.part.0>
    877c:	da412b17 	ldw	r9,1196(sp)
    8780:	103e9f1e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0xce8>
    8784:	d9411b17 	ldw	r5,1132(sp)
    8788:	d8c11c17 	ldw	r3,1136(sp)
    878c:	d811883a 	mov	r8,sp
    8790:	28800044 	addi	r2,r5,1
    8794:	003ca906 	br	7a3c <___vfiprintf_internal_r+0x524>
    8798:	d9411b17 	ldw	r5,1132(sp)
    879c:	01000074 	movhi	r4,1
    87a0:	213ec704 	addi	r4,r4,-1252
    87a4:	d9012315 	stw	r4,1164(sp)
    87a8:	29400044 	addi	r5,r5,1
    87ac:	003c8806 	br	79d0 <___vfiprintf_internal_r+0x4b8>
    87b0:	00800184 	movi	r2,6
    87b4:	1240012e 	bgeu	r2,r9,87bc <___vfiprintf_internal_r+0x12a4>
    87b8:	1013883a 	mov	r9,r2
    87bc:	4823883a 	mov	r17,r9
    87c0:	4825883a 	mov	r18,r9
    87c4:	48001516 	blt	r9,zero,881c <___vfiprintf_internal_r+0x1304>
    87c8:	00800074 	movhi	r2,1
    87cc:	10be6704 	addi	r2,r2,-1636
    87d0:	dd812115 	stw	r22,1156(sp)
    87d4:	d8812415 	stw	r2,1168(sp)
    87d8:	003d6f06 	br	7d98 <___vfiprintf_internal_r+0x880>
    87dc:	d9411b17 	ldw	r5,1132(sp)
    87e0:	02c00074 	movhi	r11,1
    87e4:	5afec704 	addi	r11,r11,-1252
    87e8:	dac12315 	stw	r11,1164(sp)
    87ec:	29400044 	addi	r5,r5,1
    87f0:	003ce106 	br	7b78 <___vfiprintf_internal_r+0x660>
    87f4:	01000074 	movhi	r4,1
    87f8:	213ec304 	addi	r4,r4,-1268
    87fc:	d9012315 	stw	r4,1164(sp)
    8800:	1009883a 	mov	r4,r2
    8804:	003eca06 	br	8330 <___vfiprintf_internal_r+0xe18>
    8808:	4823883a 	mov	r17,r9
    880c:	db011d83 	ldbu	r12,1142(sp)
    8810:	dd812115 	stw	r22,1156(sp)
    8814:	0013883a 	mov	r9,zero
    8818:	003c3b06 	br	7908 <___vfiprintf_internal_r+0x3f0>
    881c:	0025883a 	mov	r18,zero
    8820:	003fe906 	br	87c8 <___vfiprintf_internal_r+0x12b0>
    8824:	dac12117 	ldw	r11,1156(sp)
    8828:	8005883a 	mov	r2,r16
    882c:	5021883a 	mov	r16,r10
    8830:	5a400017 	ldw	r9,0(r11)
    8834:	58c00104 	addi	r3,r11,4
    8838:	d8c12115 	stw	r3,1156(sp)
    883c:	48000a16 	blt	r9,zero,8868 <___vfiprintf_internal_r+0x1350>
    8840:	10c00047 	ldb	r3,1(r2)
    8844:	003b9306 	br	7694 <___vfiprintf_internal_r+0x17c>
    8848:	043fffc4 	movi	r16,-1
    884c:	003d0206 	br	7c58 <___vfiprintf_internal_r+0x740>
    8850:	94c0010e 	bge	r18,r19,8858 <___vfiprintf_internal_r+0x1340>
    8854:	9825883a 	mov	r18,r19
    8858:	da812217 	ldw	r10,1160(sp)
    885c:	5495883a 	add	r10,r10,r18
    8860:	da812215 	stw	r10,1160(sp)
    8864:	003cd106 	br	7bac <___vfiprintf_internal_r+0x694>
    8868:	027fffc4 	movi	r9,-1
    886c:	10c00047 	ldb	r3,1(r2)
    8870:	003b8806 	br	7694 <___vfiprintf_internal_r+0x17c>

00008874 <__vfiprintf_internal>:
    8874:	2007883a 	mov	r3,r4
    8878:	01000074 	movhi	r4,1
    887c:	2105c204 	addi	r4,r4,5896
    8880:	21000017 	ldw	r4,0(r4)
    8884:	2805883a 	mov	r2,r5
    8888:	300f883a 	mov	r7,r6
    888c:	180b883a 	mov	r5,r3
    8890:	100d883a 	mov	r6,r2
    8894:	00075181 	jmpi	7518 <___vfiprintf_internal_r>

00008898 <_write_r>:
    8898:	defffd04 	addi	sp,sp,-12
    889c:	dc000015 	stw	r16,0(sp)
    88a0:	04000074 	movhi	r16,1
    88a4:	dc400115 	stw	r17,4(sp)
    88a8:	840c9304 	addi	r16,r16,12876
    88ac:	2023883a 	mov	r17,r4
    88b0:	2809883a 	mov	r4,r5
    88b4:	300b883a 	mov	r5,r6
    88b8:	380d883a 	mov	r6,r7
    88bc:	dfc00215 	stw	ra,8(sp)
    88c0:	80000015 	stw	zero,0(r16)
    88c4:	000d8c80 	call	d8c8 <write>
    88c8:	00ffffc4 	movi	r3,-1
    88cc:	10c00526 	beq	r2,r3,88e4 <_write_r+0x4c>
    88d0:	dfc00217 	ldw	ra,8(sp)
    88d4:	dc400117 	ldw	r17,4(sp)
    88d8:	dc000017 	ldw	r16,0(sp)
    88dc:	dec00304 	addi	sp,sp,12
    88e0:	f800283a 	ret
    88e4:	80c00017 	ldw	r3,0(r16)
    88e8:	183ff926 	beq	r3,zero,88d0 <_write_r+0x38>
    88ec:	88c00015 	stw	r3,0(r17)
    88f0:	003ff706 	br	88d0 <_write_r+0x38>

000088f4 <_close_r>:
    88f4:	defffd04 	addi	sp,sp,-12
    88f8:	dc000015 	stw	r16,0(sp)
    88fc:	04000074 	movhi	r16,1
    8900:	dc400115 	stw	r17,4(sp)
    8904:	840c9304 	addi	r16,r16,12876
    8908:	2023883a 	mov	r17,r4
    890c:	2809883a 	mov	r4,r5
    8910:	dfc00215 	stw	ra,8(sp)
    8914:	80000015 	stw	zero,0(r16)
    8918:	000d03c0 	call	d03c <close>
    891c:	00ffffc4 	movi	r3,-1
    8920:	10c00526 	beq	r2,r3,8938 <_close_r+0x44>
    8924:	dfc00217 	ldw	ra,8(sp)
    8928:	dc400117 	ldw	r17,4(sp)
    892c:	dc000017 	ldw	r16,0(sp)
    8930:	dec00304 	addi	sp,sp,12
    8934:	f800283a 	ret
    8938:	80c00017 	ldw	r3,0(r16)
    893c:	183ff926 	beq	r3,zero,8924 <_close_r+0x30>
    8940:	88c00015 	stw	r3,0(r17)
    8944:	003ff706 	br	8924 <_close_r+0x30>

00008948 <_calloc_r>:
    8948:	298b383a 	mul	r5,r5,r6
    894c:	defffe04 	addi	sp,sp,-8
    8950:	dc000015 	stw	r16,0(sp)
    8954:	dfc00115 	stw	ra,4(sp)
    8958:	000564c0 	call	564c <_malloc_r>
    895c:	1021883a 	mov	r16,r2
    8960:	10002826 	beq	r2,zero,8a04 <_calloc_r+0xbc>
    8964:	11bfff17 	ldw	r6,-4(r2)
    8968:	00bfff04 	movi	r2,-4
    896c:	00c00904 	movi	r3,36
    8970:	308c703a 	and	r6,r6,r2
    8974:	308d883a 	add	r6,r6,r2
    8978:	19801436 	bltu	r3,r6,89cc <_calloc_r+0x84>
    897c:	008004c4 	movi	r2,19
    8980:	11800936 	bltu	r2,r6,89a8 <_calloc_r+0x60>
    8984:	8005883a 	mov	r2,r16
    8988:	10000015 	stw	zero,0(r2)
    898c:	10000115 	stw	zero,4(r2)
    8990:	10000215 	stw	zero,8(r2)
    8994:	8005883a 	mov	r2,r16
    8998:	dfc00117 	ldw	ra,4(sp)
    899c:	dc000017 	ldw	r16,0(sp)
    89a0:	dec00204 	addi	sp,sp,8
    89a4:	f800283a 	ret
    89a8:	80000015 	stw	zero,0(r16)
    89ac:	80000115 	stw	zero,4(r16)
    89b0:	008006c4 	movi	r2,27
    89b4:	11800d2e 	bgeu	r2,r6,89ec <_calloc_r+0xa4>
    89b8:	80000215 	stw	zero,8(r16)
    89bc:	80000315 	stw	zero,12(r16)
    89c0:	30c00c26 	beq	r6,r3,89f4 <_calloc_r+0xac>
    89c4:	80800404 	addi	r2,r16,16
    89c8:	003fef06 	br	8988 <_calloc_r+0x40>
    89cc:	8009883a 	mov	r4,r16
    89d0:	000b883a 	mov	r5,zero
    89d4:	00060140 	call	6014 <memset>
    89d8:	8005883a 	mov	r2,r16
    89dc:	dfc00117 	ldw	ra,4(sp)
    89e0:	dc000017 	ldw	r16,0(sp)
    89e4:	dec00204 	addi	sp,sp,8
    89e8:	f800283a 	ret
    89ec:	80800204 	addi	r2,r16,8
    89f0:	003fe506 	br	8988 <_calloc_r+0x40>
    89f4:	80000415 	stw	zero,16(r16)
    89f8:	80800604 	addi	r2,r16,24
    89fc:	80000515 	stw	zero,20(r16)
    8a00:	003fe106 	br	8988 <_calloc_r+0x40>
    8a04:	0005883a 	mov	r2,zero
    8a08:	003fe306 	br	8998 <_calloc_r+0x50>

00008a0c <_fclose_r>:
    8a0c:	28003226 	beq	r5,zero,8ad8 <_fclose_r+0xcc>
    8a10:	defffc04 	addi	sp,sp,-16
    8a14:	dc400115 	stw	r17,4(sp)
    8a18:	2023883a 	mov	r17,r4
    8a1c:	dc000015 	stw	r16,0(sp)
    8a20:	dfc00315 	stw	ra,12(sp)
    8a24:	dc800215 	stw	r18,8(sp)
    8a28:	2821883a 	mov	r16,r5
    8a2c:	0004df00 	call	4df0 <__sfp_lock_acquire>
    8a30:	88000226 	beq	r17,zero,8a3c <_fclose_r+0x30>
    8a34:	88800e17 	ldw	r2,56(r17)
    8a38:	10002926 	beq	r2,zero,8ae0 <_fclose_r+0xd4>
    8a3c:	8080030f 	ldh	r2,12(r16)
    8a40:	10002226 	beq	r2,zero,8acc <_fclose_r+0xc0>
    8a44:	8809883a 	mov	r4,r17
    8a48:	800b883a 	mov	r5,r16
    8a4c:	00048380 	call	4838 <_fflush_r>
    8a50:	1025883a 	mov	r18,r2
    8a54:	80800b17 	ldw	r2,44(r16)
    8a58:	10000426 	beq	r2,zero,8a6c <_fclose_r+0x60>
    8a5c:	81400717 	ldw	r5,28(r16)
    8a60:	8809883a 	mov	r4,r17
    8a64:	103ee83a 	callr	r2
    8a68:	10002616 	blt	r2,zero,8b04 <_fclose_r+0xf8>
    8a6c:	8080030b 	ldhu	r2,12(r16)
    8a70:	1080200c 	andi	r2,r2,128
    8a74:	10001f1e 	bne	r2,zero,8af4 <_fclose_r+0xe8>
    8a78:	81400c17 	ldw	r5,48(r16)
    8a7c:	28000526 	beq	r5,zero,8a94 <_fclose_r+0x88>
    8a80:	80801004 	addi	r2,r16,64
    8a84:	28800226 	beq	r5,r2,8a90 <_fclose_r+0x84>
    8a88:	8809883a 	mov	r4,r17
    8a8c:	0004f540 	call	4f54 <_free_r>
    8a90:	80000c15 	stw	zero,48(r16)
    8a94:	81401117 	ldw	r5,68(r16)
    8a98:	28000326 	beq	r5,zero,8aa8 <_fclose_r+0x9c>
    8a9c:	8809883a 	mov	r4,r17
    8aa0:	0004f540 	call	4f54 <_free_r>
    8aa4:	80001115 	stw	zero,68(r16)
    8aa8:	8000030d 	sth	zero,12(r16)
    8aac:	0004df40 	call	4df4 <__sfp_lock_release>
    8ab0:	9005883a 	mov	r2,r18
    8ab4:	dfc00317 	ldw	ra,12(sp)
    8ab8:	dc800217 	ldw	r18,8(sp)
    8abc:	dc400117 	ldw	r17,4(sp)
    8ac0:	dc000017 	ldw	r16,0(sp)
    8ac4:	dec00404 	addi	sp,sp,16
    8ac8:	f800283a 	ret
    8acc:	0004df40 	call	4df4 <__sfp_lock_release>
    8ad0:	0005883a 	mov	r2,zero
    8ad4:	003ff706 	br	8ab4 <_fclose_r+0xa8>
    8ad8:	0005883a 	mov	r2,zero
    8adc:	f800283a 	ret
    8ae0:	8809883a 	mov	r4,r17
    8ae4:	0004de00 	call	4de0 <__sinit>
    8ae8:	8080030f 	ldh	r2,12(r16)
    8aec:	103fd51e 	bne	r2,zero,8a44 <_fclose_r+0x38>
    8af0:	003ff606 	br	8acc <_fclose_r+0xc0>
    8af4:	81400417 	ldw	r5,16(r16)
    8af8:	8809883a 	mov	r4,r17
    8afc:	0004f540 	call	4f54 <_free_r>
    8b00:	003fdd06 	br	8a78 <_fclose_r+0x6c>
    8b04:	04bfffc4 	movi	r18,-1
    8b08:	003fd806 	br	8a6c <_fclose_r+0x60>

00008b0c <fclose>:
    8b0c:	00800074 	movhi	r2,1
    8b10:	1085c204 	addi	r2,r2,5896
    8b14:	200b883a 	mov	r5,r4
    8b18:	11000017 	ldw	r4,0(r2)
    8b1c:	0008a0c1 	jmpi	8a0c <_fclose_r>

00008b20 <_fputwc_r>:
    8b20:	3080030b 	ldhu	r2,12(r6)
    8b24:	defff804 	addi	sp,sp,-32
    8b28:	dcc00415 	stw	r19,16(sp)
    8b2c:	dc800315 	stw	r18,12(sp)
    8b30:	dc000115 	stw	r16,4(sp)
    8b34:	dfc00715 	stw	ra,28(sp)
    8b38:	dd400615 	stw	r21,24(sp)
    8b3c:	dd000515 	stw	r20,20(sp)
    8b40:	dc400215 	stw	r17,8(sp)
    8b44:	10c8000c 	andi	r3,r2,8192
    8b48:	3021883a 	mov	r16,r6
    8b4c:	2027883a 	mov	r19,r4
    8b50:	2825883a 	mov	r18,r5
    8b54:	1800051e 	bne	r3,zero,8b6c <_fputwc_r+0x4c>
    8b58:	30c01917 	ldw	r3,100(r6)
    8b5c:	10880014 	ori	r2,r2,8192
    8b60:	3080030d 	sth	r2,12(r6)
    8b64:	18880014 	ori	r2,r3,8192
    8b68:	30801915 	stw	r2,100(r6)
    8b6c:	000543c0 	call	543c <__locale_mb_cur_max>
    8b70:	00c00044 	movi	r3,1
    8b74:	10c03e26 	beq	r2,r3,8c70 <_fputwc_r+0x150>
    8b78:	9809883a 	mov	r4,r19
    8b7c:	d80b883a 	mov	r5,sp
    8b80:	900d883a 	mov	r6,r18
    8b84:	81c01704 	addi	r7,r16,92
    8b88:	0009b700 	call	9b70 <_wcrtomb_r>
    8b8c:	1029883a 	mov	r20,r2
    8b90:	00bfffc4 	movi	r2,-1
    8b94:	a0802026 	beq	r20,r2,8c18 <_fputwc_r+0xf8>
    8b98:	d9400003 	ldbu	r5,0(sp)
    8b9c:	a0001c26 	beq	r20,zero,8c10 <_fputwc_r+0xf0>
    8ba0:	0023883a 	mov	r17,zero
    8ba4:	05400284 	movi	r21,10
    8ba8:	00000906 	br	8bd0 <_fputwc_r+0xb0>
    8bac:	80800017 	ldw	r2,0(r16)
    8bb0:	11400005 	stb	r5,0(r2)
    8bb4:	80c00017 	ldw	r3,0(r16)
    8bb8:	18c00044 	addi	r3,r3,1
    8bbc:	80c00015 	stw	r3,0(r16)
    8bc0:	8c400044 	addi	r17,r17,1
    8bc4:	dc45883a 	add	r2,sp,r17
    8bc8:	8d00112e 	bgeu	r17,r20,8c10 <_fputwc_r+0xf0>
    8bcc:	11400003 	ldbu	r5,0(r2)
    8bd0:	80c00217 	ldw	r3,8(r16)
    8bd4:	18ffffc4 	addi	r3,r3,-1
    8bd8:	80c00215 	stw	r3,8(r16)
    8bdc:	183ff30e 	bge	r3,zero,8bac <_fputwc_r+0x8c>
    8be0:	80800617 	ldw	r2,24(r16)
    8be4:	18801916 	blt	r3,r2,8c4c <_fputwc_r+0x12c>
    8be8:	80800017 	ldw	r2,0(r16)
    8bec:	11400005 	stb	r5,0(r2)
    8bf0:	80800017 	ldw	r2,0(r16)
    8bf4:	10c00003 	ldbu	r3,0(r2)
    8bf8:	10800044 	addi	r2,r2,1
    8bfc:	1d402326 	beq	r3,r21,8c8c <_fputwc_r+0x16c>
    8c00:	80800015 	stw	r2,0(r16)
    8c04:	8c400044 	addi	r17,r17,1
    8c08:	dc45883a 	add	r2,sp,r17
    8c0c:	8d3fef36 	bltu	r17,r20,8bcc <_fputwc_r+0xac>
    8c10:	9005883a 	mov	r2,r18
    8c14:	00000406 	br	8c28 <_fputwc_r+0x108>
    8c18:	80c0030b 	ldhu	r3,12(r16)
    8c1c:	a005883a 	mov	r2,r20
    8c20:	18c01014 	ori	r3,r3,64
    8c24:	80c0030d 	sth	r3,12(r16)
    8c28:	dfc00717 	ldw	ra,28(sp)
    8c2c:	dd400617 	ldw	r21,24(sp)
    8c30:	dd000517 	ldw	r20,20(sp)
    8c34:	dcc00417 	ldw	r19,16(sp)
    8c38:	dc800317 	ldw	r18,12(sp)
    8c3c:	dc400217 	ldw	r17,8(sp)
    8c40:	dc000117 	ldw	r16,4(sp)
    8c44:	dec00804 	addi	sp,sp,32
    8c48:	f800283a 	ret
    8c4c:	9809883a 	mov	r4,r19
    8c50:	29403fcc 	andi	r5,r5,255
    8c54:	800d883a 	mov	r6,r16
    8c58:	0009a000 	call	9a00 <__swbuf_r>
    8c5c:	10bfffe0 	cmpeqi	r2,r2,-1
    8c60:	10803fcc 	andi	r2,r2,255
    8c64:	103fd626 	beq	r2,zero,8bc0 <_fputwc_r+0xa0>
    8c68:	00bfffc4 	movi	r2,-1
    8c6c:	003fee06 	br	8c28 <_fputwc_r+0x108>
    8c70:	90ffffc4 	addi	r3,r18,-1
    8c74:	01003f84 	movi	r4,254
    8c78:	20ffbf36 	bltu	r4,r3,8b78 <_fputwc_r+0x58>
    8c7c:	900b883a 	mov	r5,r18
    8c80:	dc800005 	stb	r18,0(sp)
    8c84:	1029883a 	mov	r20,r2
    8c88:	003fc506 	br	8ba0 <_fputwc_r+0x80>
    8c8c:	9809883a 	mov	r4,r19
    8c90:	a80b883a 	mov	r5,r21
    8c94:	800d883a 	mov	r6,r16
    8c98:	0009a000 	call	9a00 <__swbuf_r>
    8c9c:	10bfffe0 	cmpeqi	r2,r2,-1
    8ca0:	003fef06 	br	8c60 <_fputwc_r+0x140>

00008ca4 <fputwc>:
    8ca4:	defffc04 	addi	sp,sp,-16
    8ca8:	dc000115 	stw	r16,4(sp)
    8cac:	04000074 	movhi	r16,1
    8cb0:	8405c204 	addi	r16,r16,5896
    8cb4:	dc400215 	stw	r17,8(sp)
    8cb8:	2023883a 	mov	r17,r4
    8cbc:	81000017 	ldw	r4,0(r16)
    8cc0:	dfc00315 	stw	ra,12(sp)
    8cc4:	280d883a 	mov	r6,r5
    8cc8:	20000626 	beq	r4,zero,8ce4 <fputwc+0x40>
    8ccc:	20800e17 	ldw	r2,56(r4)
    8cd0:	1000041e 	bne	r2,zero,8ce4 <fputwc+0x40>
    8cd4:	d9400015 	stw	r5,0(sp)
    8cd8:	0004de00 	call	4de0 <__sinit>
    8cdc:	81000017 	ldw	r4,0(r16)
    8ce0:	d9800017 	ldw	r6,0(sp)
    8ce4:	880b883a 	mov	r5,r17
    8ce8:	dfc00317 	ldw	ra,12(sp)
    8cec:	dc400217 	ldw	r17,8(sp)
    8cf0:	dc000117 	ldw	r16,4(sp)
    8cf4:	dec00404 	addi	sp,sp,16
    8cf8:	0008b201 	jmpi	8b20 <_fputwc_r>

00008cfc <_fstat_r>:
    8cfc:	defffd04 	addi	sp,sp,-12
    8d00:	dc000015 	stw	r16,0(sp)
    8d04:	04000074 	movhi	r16,1
    8d08:	dc400115 	stw	r17,4(sp)
    8d0c:	840c9304 	addi	r16,r16,12876
    8d10:	2023883a 	mov	r17,r4
    8d14:	2809883a 	mov	r4,r5
    8d18:	300b883a 	mov	r5,r6
    8d1c:	dfc00215 	stw	ra,8(sp)
    8d20:	80000015 	stw	zero,0(r16)
    8d24:	000d1880 	call	d188 <fstat>
    8d28:	00ffffc4 	movi	r3,-1
    8d2c:	10c00526 	beq	r2,r3,8d44 <_fstat_r+0x48>
    8d30:	dfc00217 	ldw	ra,8(sp)
    8d34:	dc400117 	ldw	r17,4(sp)
    8d38:	dc000017 	ldw	r16,0(sp)
    8d3c:	dec00304 	addi	sp,sp,12
    8d40:	f800283a 	ret
    8d44:	80c00017 	ldw	r3,0(r16)
    8d48:	183ff926 	beq	r3,zero,8d30 <_fstat_r+0x34>
    8d4c:	88c00015 	stw	r3,0(r17)
    8d50:	003ff706 	br	8d30 <_fstat_r+0x34>

00008d54 <__sfvwrite_r>:
    8d54:	30800217 	ldw	r2,8(r6)
    8d58:	10004526 	beq	r2,zero,8e70 <__sfvwrite_r+0x11c>
    8d5c:	28c0030b 	ldhu	r3,12(r5)
    8d60:	defff404 	addi	sp,sp,-48
    8d64:	dd400715 	stw	r21,28(sp)
    8d68:	dcc00515 	stw	r19,20(sp)
    8d6c:	dc000215 	stw	r16,8(sp)
    8d70:	dfc00b15 	stw	ra,44(sp)
    8d74:	df000a15 	stw	fp,40(sp)
    8d78:	ddc00915 	stw	r23,36(sp)
    8d7c:	dd800815 	stw	r22,32(sp)
    8d80:	dd000615 	stw	r20,24(sp)
    8d84:	dc800415 	stw	r18,16(sp)
    8d88:	dc400315 	stw	r17,12(sp)
    8d8c:	1880020c 	andi	r2,r3,8
    8d90:	2821883a 	mov	r16,r5
    8d94:	202b883a 	mov	r21,r4
    8d98:	3027883a 	mov	r19,r6
    8d9c:	10002526 	beq	r2,zero,8e34 <__sfvwrite_r+0xe0>
    8da0:	28800417 	ldw	r2,16(r5)
    8da4:	10002326 	beq	r2,zero,8e34 <__sfvwrite_r+0xe0>
    8da8:	1880008c 	andi	r2,r3,2
    8dac:	9c400017 	ldw	r17,0(r19)
    8db0:	10003126 	beq	r2,zero,8e78 <__sfvwrite_r+0x124>
    8db4:	0029883a 	mov	r20,zero
    8db8:	0025883a 	mov	r18,zero
    8dbc:	05810004 	movi	r22,1024
    8dc0:	a00d883a 	mov	r6,r20
    8dc4:	a809883a 	mov	r4,r21
    8dc8:	90002526 	beq	r18,zero,8e60 <__sfvwrite_r+0x10c>
    8dcc:	900f883a 	mov	r7,r18
    8dd0:	81400717 	ldw	r5,28(r16)
    8dd4:	b480012e 	bgeu	r22,r18,8ddc <__sfvwrite_r+0x88>
    8dd8:	01c10004 	movi	r7,1024
    8ddc:	80800917 	ldw	r2,36(r16)
    8de0:	103ee83a 	callr	r2
    8de4:	0080510e 	bge	zero,r2,8f2c <__sfvwrite_r+0x1d8>
    8de8:	98c00217 	ldw	r3,8(r19)
    8dec:	a0a9883a 	add	r20,r20,r2
    8df0:	90a5c83a 	sub	r18,r18,r2
    8df4:	1885c83a 	sub	r2,r3,r2
    8df8:	98800215 	stw	r2,8(r19)
    8dfc:	103ff01e 	bne	r2,zero,8dc0 <__sfvwrite_r+0x6c>
    8e00:	0005883a 	mov	r2,zero
    8e04:	dfc00b17 	ldw	ra,44(sp)
    8e08:	df000a17 	ldw	fp,40(sp)
    8e0c:	ddc00917 	ldw	r23,36(sp)
    8e10:	dd800817 	ldw	r22,32(sp)
    8e14:	dd400717 	ldw	r21,28(sp)
    8e18:	dd000617 	ldw	r20,24(sp)
    8e1c:	dcc00517 	ldw	r19,20(sp)
    8e20:	dc800417 	ldw	r18,16(sp)
    8e24:	dc400317 	ldw	r17,12(sp)
    8e28:	dc000217 	ldw	r16,8(sp)
    8e2c:	dec00c04 	addi	sp,sp,48
    8e30:	f800283a 	ret
    8e34:	a809883a 	mov	r4,r21
    8e38:	800b883a 	mov	r5,r16
    8e3c:	0002de00 	call	2de0 <__swsetup_r>
    8e40:	80c0030b 	ldhu	r3,12(r16)
    8e44:	103fd826 	beq	r2,zero,8da8 <__sfvwrite_r+0x54>
    8e48:	18c01014 	ori	r3,r3,64
    8e4c:	80c0030d 	sth	r3,12(r16)
    8e50:	00c00244 	movi	r3,9
    8e54:	00bfffc4 	movi	r2,-1
    8e58:	a8c00015 	stw	r3,0(r21)
    8e5c:	003fe906 	br	8e04 <__sfvwrite_r+0xb0>
    8e60:	8d000017 	ldw	r20,0(r17)
    8e64:	8c800117 	ldw	r18,4(r17)
    8e68:	8c400204 	addi	r17,r17,8
    8e6c:	003fd406 	br	8dc0 <__sfvwrite_r+0x6c>
    8e70:	0005883a 	mov	r2,zero
    8e74:	f800283a 	ret
    8e78:	1880004c 	andi	r2,r3,1
    8e7c:	1000301e 	bne	r2,zero,8f40 <__sfvwrite_r+0x1ec>
    8e80:	002f883a 	mov	r23,zero
    8e84:	0025883a 	mov	r18,zero
    8e88:	90001c26 	beq	r18,zero,8efc <__sfvwrite_r+0x1a8>
    8e8c:	1880800c 	andi	r2,r3,512
    8e90:	85000217 	ldw	r20,8(r16)
    8e94:	10006c26 	beq	r2,zero,9048 <__sfvwrite_r+0x2f4>
    8e98:	a02d883a 	mov	r22,r20
    8e9c:	95008536 	bltu	r18,r20,90b4 <__sfvwrite_r+0x360>
    8ea0:	1881200c 	andi	r2,r3,1152
    8ea4:	10009d1e 	bne	r2,zero,911c <__sfvwrite_r+0x3c8>
    8ea8:	81000017 	ldw	r4,0(r16)
    8eac:	a039883a 	mov	fp,r20
    8eb0:	9029883a 	mov	r20,r18
    8eb4:	b80b883a 	mov	r5,r23
    8eb8:	b00d883a 	mov	r6,r22
    8ebc:	00092a80 	call	92a8 <memmove>
    8ec0:	80c00217 	ldw	r3,8(r16)
    8ec4:	81000017 	ldw	r4,0(r16)
    8ec8:	9005883a 	mov	r2,r18
    8ecc:	1f39c83a 	sub	fp,r3,fp
    8ed0:	258f883a 	add	r7,r4,r22
    8ed4:	87000215 	stw	fp,8(r16)
    8ed8:	81c00015 	stw	r7,0(r16)
    8edc:	98c00217 	ldw	r3,8(r19)
    8ee0:	b8af883a 	add	r23,r23,r2
    8ee4:	90a5c83a 	sub	r18,r18,r2
    8ee8:	1d05c83a 	sub	r2,r3,r20
    8eec:	98800215 	stw	r2,8(r19)
    8ef0:	103fc326 	beq	r2,zero,8e00 <__sfvwrite_r+0xac>
    8ef4:	80c0030b 	ldhu	r3,12(r16)
    8ef8:	903fe41e 	bne	r18,zero,8e8c <__sfvwrite_r+0x138>
    8efc:	8dc00017 	ldw	r23,0(r17)
    8f00:	8c800117 	ldw	r18,4(r17)
    8f04:	8c400204 	addi	r17,r17,8
    8f08:	003fdf06 	br	8e88 <__sfvwrite_r+0x134>
    8f0c:	00094600 	call	9460 <_realloc_r>
    8f10:	102d883a 	mov	r22,r2
    8f14:	1000a01e 	bne	r2,zero,9198 <__sfvwrite_r+0x444>
    8f18:	81400417 	ldw	r5,16(r16)
    8f1c:	a809883a 	mov	r4,r21
    8f20:	0004f540 	call	4f54 <_free_r>
    8f24:	00800304 	movi	r2,12
    8f28:	a8800015 	stw	r2,0(r21)
    8f2c:	80c0030b 	ldhu	r3,12(r16)
    8f30:	00bfffc4 	movi	r2,-1
    8f34:	18c01014 	ori	r3,r3,64
    8f38:	80c0030d 	sth	r3,12(r16)
    8f3c:	003fb106 	br	8e04 <__sfvwrite_r+0xb0>
    8f40:	0029883a 	mov	r20,zero
    8f44:	0011883a 	mov	r8,zero
    8f48:	0039883a 	mov	fp,zero
    8f4c:	0025883a 	mov	r18,zero
    8f50:	90001f26 	beq	r18,zero,8fd0 <__sfvwrite_r+0x27c>
    8f54:	40006826 	beq	r8,zero,90f8 <__sfvwrite_r+0x3a4>
    8f58:	a02f883a 	mov	r23,r20
    8f5c:	9500012e 	bgeu	r18,r20,8f64 <__sfvwrite_r+0x210>
    8f60:	902f883a 	mov	r23,r18
    8f64:	81000017 	ldw	r4,0(r16)
    8f68:	80800417 	ldw	r2,16(r16)
    8f6c:	b82d883a 	mov	r22,r23
    8f70:	81800217 	ldw	r6,8(r16)
    8f74:	81c00517 	ldw	r7,20(r16)
    8f78:	1100022e 	bgeu	r2,r4,8f84 <__sfvwrite_r+0x230>
    8f7c:	31c7883a 	add	r3,r6,r7
    8f80:	1dc01816 	blt	r3,r23,8fe4 <__sfvwrite_r+0x290>
    8f84:	b9c03f16 	blt	r23,r7,9084 <__sfvwrite_r+0x330>
    8f88:	80800917 	ldw	r2,36(r16)
    8f8c:	81400717 	ldw	r5,28(r16)
    8f90:	a809883a 	mov	r4,r21
    8f94:	da000115 	stw	r8,4(sp)
    8f98:	e00d883a 	mov	r6,fp
    8f9c:	103ee83a 	callr	r2
    8fa0:	102d883a 	mov	r22,r2
    8fa4:	da000117 	ldw	r8,4(sp)
    8fa8:	00bfe00e 	bge	zero,r2,8f2c <__sfvwrite_r+0x1d8>
    8fac:	a5a9c83a 	sub	r20,r20,r22
    8fb0:	a0001f26 	beq	r20,zero,9030 <__sfvwrite_r+0x2dc>
    8fb4:	98800217 	ldw	r2,8(r19)
    8fb8:	e5b9883a 	add	fp,fp,r22
    8fbc:	95a5c83a 	sub	r18,r18,r22
    8fc0:	15adc83a 	sub	r22,r2,r22
    8fc4:	9d800215 	stw	r22,8(r19)
    8fc8:	b03f8d26 	beq	r22,zero,8e00 <__sfvwrite_r+0xac>
    8fcc:	903fe11e 	bne	r18,zero,8f54 <__sfvwrite_r+0x200>
    8fd0:	8f000017 	ldw	fp,0(r17)
    8fd4:	8c800117 	ldw	r18,4(r17)
    8fd8:	0011883a 	mov	r8,zero
    8fdc:	8c400204 	addi	r17,r17,8
    8fe0:	003fdb06 	br	8f50 <__sfvwrite_r+0x1fc>
    8fe4:	180d883a 	mov	r6,r3
    8fe8:	e00b883a 	mov	r5,fp
    8fec:	da000115 	stw	r8,4(sp)
    8ff0:	d8c00015 	stw	r3,0(sp)
    8ff4:	00092a80 	call	92a8 <memmove>
    8ff8:	d8c00017 	ldw	r3,0(sp)
    8ffc:	80800017 	ldw	r2,0(r16)
    9000:	a809883a 	mov	r4,r21
    9004:	800b883a 	mov	r5,r16
    9008:	10c5883a 	add	r2,r2,r3
    900c:	80800015 	stw	r2,0(r16)
    9010:	d8c00015 	stw	r3,0(sp)
    9014:	00048380 	call	4838 <_fflush_r>
    9018:	d8c00017 	ldw	r3,0(sp)
    901c:	da000117 	ldw	r8,4(sp)
    9020:	103fc21e 	bne	r2,zero,8f2c <__sfvwrite_r+0x1d8>
    9024:	182d883a 	mov	r22,r3
    9028:	a5a9c83a 	sub	r20,r20,r22
    902c:	a03fe11e 	bne	r20,zero,8fb4 <__sfvwrite_r+0x260>
    9030:	a809883a 	mov	r4,r21
    9034:	800b883a 	mov	r5,r16
    9038:	00048380 	call	4838 <_fflush_r>
    903c:	103fbb1e 	bne	r2,zero,8f2c <__sfvwrite_r+0x1d8>
    9040:	0011883a 	mov	r8,zero
    9044:	003fdb06 	br	8fb4 <__sfvwrite_r+0x260>
    9048:	81000017 	ldw	r4,0(r16)
    904c:	80800417 	ldw	r2,16(r16)
    9050:	1100012e 	bgeu	r2,r4,9058 <__sfvwrite_r+0x304>
    9054:	a4805a36 	bltu	r20,r18,91c0 <__sfvwrite_r+0x46c>
    9058:	81c00517 	ldw	r7,20(r16)
    905c:	91c01a36 	bltu	r18,r7,90c8 <__sfvwrite_r+0x374>
    9060:	80800917 	ldw	r2,36(r16)
    9064:	81400717 	ldw	r5,28(r16)
    9068:	a809883a 	mov	r4,r21
    906c:	b80d883a 	mov	r6,r23
    9070:	103ee83a 	callr	r2
    9074:	1029883a 	mov	r20,r2
    9078:	00bfac0e 	bge	zero,r2,8f2c <__sfvwrite_r+0x1d8>
    907c:	a005883a 	mov	r2,r20
    9080:	003f9606 	br	8edc <__sfvwrite_r+0x188>
    9084:	b80d883a 	mov	r6,r23
    9088:	e00b883a 	mov	r5,fp
    908c:	da000115 	stw	r8,4(sp)
    9090:	00092a80 	call	92a8 <memmove>
    9094:	80800217 	ldw	r2,8(r16)
    9098:	80c00017 	ldw	r3,0(r16)
    909c:	da000117 	ldw	r8,4(sp)
    90a0:	15c5c83a 	sub	r2,r2,r23
    90a4:	1def883a 	add	r23,r3,r23
    90a8:	80800215 	stw	r2,8(r16)
    90ac:	85c00015 	stw	r23,0(r16)
    90b0:	003fbe06 	br	8fac <__sfvwrite_r+0x258>
    90b4:	81000017 	ldw	r4,0(r16)
    90b8:	9039883a 	mov	fp,r18
    90bc:	9029883a 	mov	r20,r18
    90c0:	902d883a 	mov	r22,r18
    90c4:	003f7b06 	br	8eb4 <__sfvwrite_r+0x160>
    90c8:	b80b883a 	mov	r5,r23
    90cc:	900d883a 	mov	r6,r18
    90d0:	00092a80 	call	92a8 <memmove>
    90d4:	80c00217 	ldw	r3,8(r16)
    90d8:	80800017 	ldw	r2,0(r16)
    90dc:	9029883a 	mov	r20,r18
    90e0:	1c87c83a 	sub	r3,r3,r18
    90e4:	1485883a 	add	r2,r2,r18
    90e8:	80800015 	stw	r2,0(r16)
    90ec:	80c00215 	stw	r3,8(r16)
    90f0:	9005883a 	mov	r2,r18
    90f4:	003f7906 	br	8edc <__sfvwrite_r+0x188>
    90f8:	e009883a 	mov	r4,fp
    90fc:	01400284 	movi	r5,10
    9100:	900d883a 	mov	r6,r18
    9104:	0005df40 	call	5df4 <memchr>
    9108:	10003826 	beq	r2,zero,91ec <__sfvwrite_r+0x498>
    910c:	10800044 	addi	r2,r2,1
    9110:	1729c83a 	sub	r20,r2,fp
    9114:	02000044 	movi	r8,1
    9118:	003f8f06 	br	8f58 <__sfvwrite_r+0x204>
    911c:	80800517 	ldw	r2,20(r16)
    9120:	81400417 	ldw	r5,16(r16)
    9124:	87000017 	ldw	fp,0(r16)
    9128:	10a9883a 	add	r20,r2,r2
    912c:	a085883a 	add	r2,r20,r2
    9130:	1028d7fa 	srli	r20,r2,31
    9134:	e179c83a 	sub	fp,fp,r5
    9138:	e1000044 	addi	r4,fp,1
    913c:	a085883a 	add	r2,r20,r2
    9140:	1029d07a 	srai	r20,r2,1
    9144:	2485883a 	add	r2,r4,r18
    9148:	a00d883a 	mov	r6,r20
    914c:	a080022e 	bgeu	r20,r2,9158 <__sfvwrite_r+0x404>
    9150:	1029883a 	mov	r20,r2
    9154:	100d883a 	mov	r6,r2
    9158:	18c1000c 	andi	r3,r3,1024
    915c:	a809883a 	mov	r4,r21
    9160:	183f6a26 	beq	r3,zero,8f0c <__sfvwrite_r+0x1b8>
    9164:	300b883a 	mov	r5,r6
    9168:	000564c0 	call	564c <_malloc_r>
    916c:	102d883a 	mov	r22,r2
    9170:	103f6c26 	beq	r2,zero,8f24 <__sfvwrite_r+0x1d0>
    9174:	81400417 	ldw	r5,16(r16)
    9178:	1009883a 	mov	r4,r2
    917c:	e00d883a 	mov	r6,fp
    9180:	0005edc0 	call	5edc <memcpy>
    9184:	8080030b 	ldhu	r2,12(r16)
    9188:	00fedfc4 	movi	r3,-1153
    918c:	10c4703a 	and	r2,r2,r3
    9190:	10802014 	ori	r2,r2,128
    9194:	8080030d 	sth	r2,12(r16)
    9198:	b709883a 	add	r4,r22,fp
    919c:	a707c83a 	sub	r3,r20,fp
    91a0:	85800415 	stw	r22,16(r16)
    91a4:	85000515 	stw	r20,20(r16)
    91a8:	81000015 	stw	r4,0(r16)
    91ac:	9039883a 	mov	fp,r18
    91b0:	80c00215 	stw	r3,8(r16)
    91b4:	9029883a 	mov	r20,r18
    91b8:	902d883a 	mov	r22,r18
    91bc:	003f3d06 	br	8eb4 <__sfvwrite_r+0x160>
    91c0:	b80b883a 	mov	r5,r23
    91c4:	a00d883a 	mov	r6,r20
    91c8:	00092a80 	call	92a8 <memmove>
    91cc:	80800017 	ldw	r2,0(r16)
    91d0:	a809883a 	mov	r4,r21
    91d4:	800b883a 	mov	r5,r16
    91d8:	1505883a 	add	r2,r2,r20
    91dc:	80800015 	stw	r2,0(r16)
    91e0:	00048380 	call	4838 <_fflush_r>
    91e4:	103fa526 	beq	r2,zero,907c <__sfvwrite_r+0x328>
    91e8:	003f5006 	br	8f2c <__sfvwrite_r+0x1d8>
    91ec:	95000044 	addi	r20,r18,1
    91f0:	02000044 	movi	r8,1
    91f4:	003f5806 	br	8f58 <__sfvwrite_r+0x204>

000091f8 <_isatty_r>:
    91f8:	defffd04 	addi	sp,sp,-12
    91fc:	dc000015 	stw	r16,0(sp)
    9200:	04000074 	movhi	r16,1
    9204:	dc400115 	stw	r17,4(sp)
    9208:	840c9304 	addi	r16,r16,12876
    920c:	2023883a 	mov	r17,r4
    9210:	2809883a 	mov	r4,r5
    9214:	dfc00215 	stw	ra,8(sp)
    9218:	80000015 	stw	zero,0(r16)
    921c:	000d2880 	call	d288 <isatty>
    9220:	00ffffc4 	movi	r3,-1
    9224:	10c00526 	beq	r2,r3,923c <_isatty_r+0x44>
    9228:	dfc00217 	ldw	ra,8(sp)
    922c:	dc400117 	ldw	r17,4(sp)
    9230:	dc000017 	ldw	r16,0(sp)
    9234:	dec00304 	addi	sp,sp,12
    9238:	f800283a 	ret
    923c:	80c00017 	ldw	r3,0(r16)
    9240:	183ff926 	beq	r3,zero,9228 <_isatty_r+0x30>
    9244:	88c00015 	stw	r3,0(r17)
    9248:	003ff706 	br	9228 <_isatty_r+0x30>

0000924c <_lseek_r>:
    924c:	defffd04 	addi	sp,sp,-12
    9250:	dc000015 	stw	r16,0(sp)
    9254:	04000074 	movhi	r16,1
    9258:	dc400115 	stw	r17,4(sp)
    925c:	840c9304 	addi	r16,r16,12876
    9260:	2023883a 	mov	r17,r4
    9264:	2809883a 	mov	r4,r5
    9268:	300b883a 	mov	r5,r6
    926c:	380d883a 	mov	r6,r7
    9270:	dfc00215 	stw	ra,8(sp)
    9274:	80000015 	stw	zero,0(r16)
    9278:	000d4600 	call	d460 <lseek>
    927c:	00ffffc4 	movi	r3,-1
    9280:	10c00526 	beq	r2,r3,9298 <_lseek_r+0x4c>
    9284:	dfc00217 	ldw	ra,8(sp)
    9288:	dc400117 	ldw	r17,4(sp)
    928c:	dc000017 	ldw	r16,0(sp)
    9290:	dec00304 	addi	sp,sp,12
    9294:	f800283a 	ret
    9298:	80c00017 	ldw	r3,0(r16)
    929c:	183ff926 	beq	r3,zero,9284 <_lseek_r+0x38>
    92a0:	88c00015 	stw	r3,0(r17)
    92a4:	003ff706 	br	9284 <_lseek_r+0x38>

000092a8 <memmove>:
    92a8:	2005883a 	mov	r2,r4
    92ac:	29000b2e 	bgeu	r5,r4,92dc <memmove+0x34>
    92b0:	298f883a 	add	r7,r5,r6
    92b4:	21c0092e 	bgeu	r4,r7,92dc <memmove+0x34>
    92b8:	2187883a 	add	r3,r4,r6
    92bc:	198bc83a 	sub	r5,r3,r6
    92c0:	30004b26 	beq	r6,zero,93f0 <memmove+0x148>
    92c4:	39ffffc4 	addi	r7,r7,-1
    92c8:	39000003 	ldbu	r4,0(r7)
    92cc:	18ffffc4 	addi	r3,r3,-1
    92d0:	19000005 	stb	r4,0(r3)
    92d4:	197ffb1e 	bne	r3,r5,92c4 <memmove+0x1c>
    92d8:	f800283a 	ret
    92dc:	00c003c4 	movi	r3,15
    92e0:	1980412e 	bgeu	r3,r6,93e8 <memmove+0x140>
    92e4:	1146b03a 	or	r3,r2,r5
    92e8:	18c000cc 	andi	r3,r3,3
    92ec:	1800411e 	bne	r3,zero,93f4 <memmove+0x14c>
    92f0:	33fffc04 	addi	r15,r6,-16
    92f4:	781ed13a 	srli	r15,r15,4
    92f8:	28c00104 	addi	r3,r5,4
    92fc:	13400104 	addi	r13,r2,4
    9300:	781c913a 	slli	r14,r15,4
    9304:	2b000204 	addi	r12,r5,8
    9308:	12c00204 	addi	r11,r2,8
    930c:	73800504 	addi	r14,r14,20
    9310:	2a800304 	addi	r10,r5,12
    9314:	12400304 	addi	r9,r2,12
    9318:	2b9d883a 	add	r14,r5,r14
    931c:	2811883a 	mov	r8,r5
    9320:	100f883a 	mov	r7,r2
    9324:	41000017 	ldw	r4,0(r8)
    9328:	39c00404 	addi	r7,r7,16
    932c:	18c00404 	addi	r3,r3,16
    9330:	393ffc15 	stw	r4,-16(r7)
    9334:	193ffc17 	ldw	r4,-16(r3)
    9338:	6b400404 	addi	r13,r13,16
    933c:	5ac00404 	addi	r11,r11,16
    9340:	693ffc15 	stw	r4,-16(r13)
    9344:	61000017 	ldw	r4,0(r12)
    9348:	4a400404 	addi	r9,r9,16
    934c:	42000404 	addi	r8,r8,16
    9350:	593ffc15 	stw	r4,-16(r11)
    9354:	51000017 	ldw	r4,0(r10)
    9358:	63000404 	addi	r12,r12,16
    935c:	52800404 	addi	r10,r10,16
    9360:	493ffc15 	stw	r4,-16(r9)
    9364:	1bbfef1e 	bne	r3,r14,9324 <memmove+0x7c>
    9368:	79000044 	addi	r4,r15,1
    936c:	2008913a 	slli	r4,r4,4
    9370:	328003cc 	andi	r10,r6,15
    9374:	02c000c4 	movi	r11,3
    9378:	1107883a 	add	r3,r2,r4
    937c:	290b883a 	add	r5,r5,r4
    9380:	5a801e2e 	bgeu	r11,r10,93fc <memmove+0x154>
    9384:	1813883a 	mov	r9,r3
    9388:	2811883a 	mov	r8,r5
    938c:	500f883a 	mov	r7,r10
    9390:	41000017 	ldw	r4,0(r8)
    9394:	4a400104 	addi	r9,r9,4
    9398:	39ffff04 	addi	r7,r7,-4
    939c:	493fff15 	stw	r4,-4(r9)
    93a0:	42000104 	addi	r8,r8,4
    93a4:	59fffa36 	bltu	r11,r7,9390 <memmove+0xe8>
    93a8:	513fff04 	addi	r4,r10,-4
    93ac:	2008d0ba 	srli	r4,r4,2
    93b0:	318000cc 	andi	r6,r6,3
    93b4:	21000044 	addi	r4,r4,1
    93b8:	2109883a 	add	r4,r4,r4
    93bc:	2109883a 	add	r4,r4,r4
    93c0:	1907883a 	add	r3,r3,r4
    93c4:	290b883a 	add	r5,r5,r4
    93c8:	30000926 	beq	r6,zero,93f0 <memmove+0x148>
    93cc:	198d883a 	add	r6,r3,r6
    93d0:	29c00003 	ldbu	r7,0(r5)
    93d4:	18c00044 	addi	r3,r3,1
    93d8:	29400044 	addi	r5,r5,1
    93dc:	19ffffc5 	stb	r7,-1(r3)
    93e0:	19bffb1e 	bne	r3,r6,93d0 <memmove+0x128>
    93e4:	f800283a 	ret
    93e8:	1007883a 	mov	r3,r2
    93ec:	003ff606 	br	93c8 <memmove+0x120>
    93f0:	f800283a 	ret
    93f4:	1007883a 	mov	r3,r2
    93f8:	003ff406 	br	93cc <memmove+0x124>
    93fc:	500d883a 	mov	r6,r10
    9400:	003ff106 	br	93c8 <memmove+0x120>

00009404 <_read_r>:
    9404:	defffd04 	addi	sp,sp,-12
    9408:	dc000015 	stw	r16,0(sp)
    940c:	04000074 	movhi	r16,1
    9410:	dc400115 	stw	r17,4(sp)
    9414:	840c9304 	addi	r16,r16,12876
    9418:	2023883a 	mov	r17,r4
    941c:	2809883a 	mov	r4,r5
    9420:	300b883a 	mov	r5,r6
    9424:	380d883a 	mov	r6,r7
    9428:	dfc00215 	stw	ra,8(sp)
    942c:	80000015 	stw	zero,0(r16)
    9430:	000d63c0 	call	d63c <read>
    9434:	00ffffc4 	movi	r3,-1
    9438:	10c00526 	beq	r2,r3,9450 <_read_r+0x4c>
    943c:	dfc00217 	ldw	ra,8(sp)
    9440:	dc400117 	ldw	r17,4(sp)
    9444:	dc000017 	ldw	r16,0(sp)
    9448:	dec00304 	addi	sp,sp,12
    944c:	f800283a 	ret
    9450:	80c00017 	ldw	r3,0(r16)
    9454:	183ff926 	beq	r3,zero,943c <_read_r+0x38>
    9458:	88c00015 	stw	r3,0(r17)
    945c:	003ff706 	br	943c <_read_r+0x38>

00009460 <_realloc_r>:
    9460:	defff604 	addi	sp,sp,-40
    9464:	dcc00315 	stw	r19,12(sp)
    9468:	dc400115 	stw	r17,4(sp)
    946c:	dfc00915 	stw	ra,36(sp)
    9470:	df000815 	stw	fp,32(sp)
    9474:	ddc00715 	stw	r23,28(sp)
    9478:	dd800615 	stw	r22,24(sp)
    947c:	dd400515 	stw	r21,20(sp)
    9480:	dd000415 	stw	r20,16(sp)
    9484:	dc800215 	stw	r18,8(sp)
    9488:	dc000015 	stw	r16,0(sp)
    948c:	2827883a 	mov	r19,r5
    9490:	3023883a 	mov	r17,r6
    9494:	2800bf26 	beq	r5,zero,9794 <_realloc_r+0x334>
    9498:	2025883a 	mov	r18,r4
    949c:	000d5ac0 	call	d5ac <__malloc_lock>
    94a0:	98ffff17 	ldw	r3,-4(r19)
    94a4:	01bfff04 	movi	r6,-4
    94a8:	890002c4 	addi	r4,r17,11
    94ac:	01c00584 	movi	r7,22
    94b0:	9d7ffe04 	addi	r21,r19,-8
    94b4:	19a0703a 	and	r16,r3,r6
    94b8:	39003f2e 	bgeu	r7,r4,95b8 <_realloc_r+0x158>
    94bc:	053ffe04 	movi	r20,-8
    94c0:	2528703a 	and	r20,r4,r20
    94c4:	a00f883a 	mov	r7,r20
    94c8:	a0008216 	blt	r20,zero,96d4 <_realloc_r+0x274>
    94cc:	a4408136 	bltu	r20,r17,96d4 <_realloc_r+0x274>
    94d0:	81c03c0e 	bge	r16,r7,95c4 <_realloc_r+0x164>
    94d4:	07000074 	movhi	fp,1
    94d8:	e7003d04 	addi	fp,fp,244
    94dc:	e1000217 	ldw	r4,8(fp)
    94e0:	ac05883a 	add	r2,r21,r16
    94e4:	2080bf26 	beq	r4,r2,97e4 <_realloc_r+0x384>
    94e8:	11000117 	ldw	r4,4(r2)
    94ec:	023fff84 	movi	r8,-2
    94f0:	2210703a 	and	r8,r4,r8
    94f4:	1211883a 	add	r8,r2,r8
    94f8:	41400117 	ldw	r5,4(r8)
    94fc:	2940004c 	andi	r5,r5,1
    9500:	28004a1e 	bne	r5,zero,962c <_realloc_r+0x1cc>
    9504:	017fff04 	movi	r5,-4
    9508:	2148703a 	and	r4,r4,r5
    950c:	2409883a 	add	r4,r4,r16
    9510:	21c0ad0e 	bge	r4,r7,97c8 <_realloc_r+0x368>
    9514:	18c0004c 	andi	r3,r3,1
    9518:	18007f1e 	bne	r3,zero,9718 <_realloc_r+0x2b8>
    951c:	9dfffe17 	ldw	r23,-8(r19)
    9520:	adefc83a 	sub	r23,r21,r23
    9524:	bd800117 	ldw	r22,4(r23)
    9528:	b14a703a 	and	r5,r22,r5
    952c:	216d883a 	add	r22,r4,r5
    9530:	b1c04516 	blt	r22,r7,9648 <_realloc_r+0x1e8>
    9534:	10c00317 	ldw	r3,12(r2)
    9538:	10800217 	ldw	r2,8(r2)
    953c:	81bfff04 	addi	r6,r16,-4
    9540:	bc400204 	addi	r17,r23,8
    9544:	10c00315 	stw	r3,12(r2)
    9548:	18800215 	stw	r2,8(r3)
    954c:	b9400217 	ldw	r5,8(r23)
    9550:	b8c00317 	ldw	r3,12(r23)
    9554:	00800904 	movi	r2,36
    9558:	28c00315 	stw	r3,12(r5)
    955c:	19400215 	stw	r5,8(r3)
    9560:	1180ef36 	bltu	r2,r6,9920 <_realloc_r+0x4c0>
    9564:	008004c4 	movi	r2,19
    9568:	1180da2e 	bgeu	r2,r6,98d4 <_realloc_r+0x474>
    956c:	98800017 	ldw	r2,0(r19)
    9570:	b8800215 	stw	r2,8(r23)
    9574:	98800117 	ldw	r2,4(r19)
    9578:	b8800315 	stw	r2,12(r23)
    957c:	008006c4 	movi	r2,27
    9580:	1180fc2e 	bgeu	r2,r6,9974 <_realloc_r+0x514>
    9584:	98800217 	ldw	r2,8(r19)
    9588:	b8800415 	stw	r2,16(r23)
    958c:	98800317 	ldw	r2,12(r19)
    9590:	b8800515 	stw	r2,20(r23)
    9594:	00800904 	movi	r2,36
    9598:	3080421e 	bne	r6,r2,96a4 <_realloc_r+0x244>
    959c:	98800417 	ldw	r2,16(r19)
    95a0:	9cc00604 	addi	r19,r19,24
    95a4:	b8c00804 	addi	r3,r23,32
    95a8:	b8800615 	stw	r2,24(r23)
    95ac:	98bfff17 	ldw	r2,-4(r19)
    95b0:	b8800715 	stw	r2,28(r23)
    95b4:	00003d06 	br	96ac <_realloc_r+0x24c>
    95b8:	01c00404 	movi	r7,16
    95bc:	3829883a 	mov	r20,r7
    95c0:	003fc206 	br	94cc <_realloc_r+0x6c>
    95c4:	9823883a 	mov	r17,r19
    95c8:	850fc83a 	sub	r7,r16,r20
    95cc:	008003c4 	movi	r2,15
    95d0:	18c0004c 	andi	r3,r3,1
    95d4:	11c04336 	bltu	r2,r7,96e4 <_realloc_r+0x284>
    95d8:	1c06b03a 	or	r3,r3,r16
    95dc:	a8c00115 	stw	r3,4(r21)
    95e0:	ac21883a 	add	r16,r21,r16
    95e4:	80c00117 	ldw	r3,4(r16)
    95e8:	18c00054 	ori	r3,r3,1
    95ec:	80c00115 	stw	r3,4(r16)
    95f0:	9009883a 	mov	r4,r18
    95f4:	000d5cc0 	call	d5cc <__malloc_unlock>
    95f8:	8805883a 	mov	r2,r17
    95fc:	dfc00917 	ldw	ra,36(sp)
    9600:	df000817 	ldw	fp,32(sp)
    9604:	ddc00717 	ldw	r23,28(sp)
    9608:	dd800617 	ldw	r22,24(sp)
    960c:	dd400517 	ldw	r21,20(sp)
    9610:	dd000417 	ldw	r20,16(sp)
    9614:	dcc00317 	ldw	r19,12(sp)
    9618:	dc800217 	ldw	r18,8(sp)
    961c:	dc400117 	ldw	r17,4(sp)
    9620:	dc000017 	ldw	r16,0(sp)
    9624:	dec00a04 	addi	sp,sp,40
    9628:	f800283a 	ret
    962c:	18c0004c 	andi	r3,r3,1
    9630:	1800391e 	bne	r3,zero,9718 <_realloc_r+0x2b8>
    9634:	9dfffe17 	ldw	r23,-8(r19)
    9638:	00bfff04 	movi	r2,-4
    963c:	adefc83a 	sub	r23,r21,r23
    9640:	b9400117 	ldw	r5,4(r23)
    9644:	288a703a 	and	r5,r5,r2
    9648:	2c2d883a 	add	r22,r5,r16
    964c:	b1c03216 	blt	r22,r7,9718 <_realloc_r+0x2b8>
    9650:	b8800317 	ldw	r2,12(r23)
    9654:	b8c00217 	ldw	r3,8(r23)
    9658:	81bfff04 	addi	r6,r16,-4
    965c:	01000904 	movi	r4,36
    9660:	18800315 	stw	r2,12(r3)
    9664:	10c00215 	stw	r3,8(r2)
    9668:	bc400204 	addi	r17,r23,8
    966c:	2180ac36 	bltu	r4,r6,9920 <_realloc_r+0x4c0>
    9670:	008004c4 	movi	r2,19
    9674:	1180972e 	bgeu	r2,r6,98d4 <_realloc_r+0x474>
    9678:	98800017 	ldw	r2,0(r19)
    967c:	b8800215 	stw	r2,8(r23)
    9680:	98800117 	ldw	r2,4(r19)
    9684:	b8800315 	stw	r2,12(r23)
    9688:	008006c4 	movi	r2,27
    968c:	1180b92e 	bgeu	r2,r6,9974 <_realloc_r+0x514>
    9690:	98800217 	ldw	r2,8(r19)
    9694:	b8800415 	stw	r2,16(r23)
    9698:	98800317 	ldw	r2,12(r19)
    969c:	b8800515 	stw	r2,20(r23)
    96a0:	313fbe26 	beq	r6,r4,959c <_realloc_r+0x13c>
    96a4:	b8c00604 	addi	r3,r23,24
    96a8:	9cc00404 	addi	r19,r19,16
    96ac:	98800017 	ldw	r2,0(r19)
    96b0:	b021883a 	mov	r16,r22
    96b4:	b82b883a 	mov	r21,r23
    96b8:	18800015 	stw	r2,0(r3)
    96bc:	98800117 	ldw	r2,4(r19)
    96c0:	18800115 	stw	r2,4(r3)
    96c4:	98800217 	ldw	r2,8(r19)
    96c8:	18800215 	stw	r2,8(r3)
    96cc:	b8c00117 	ldw	r3,4(r23)
    96d0:	003fbd06 	br	95c8 <_realloc_r+0x168>
    96d4:	00800304 	movi	r2,12
    96d8:	90800015 	stw	r2,0(r18)
    96dc:	0005883a 	mov	r2,zero
    96e0:	003fc606 	br	95fc <_realloc_r+0x19c>
    96e4:	1d06b03a 	or	r3,r3,r20
    96e8:	ad0b883a 	add	r5,r21,r20
    96ec:	a8c00115 	stw	r3,4(r21)
    96f0:	38800054 	ori	r2,r7,1
    96f4:	28800115 	stw	r2,4(r5)
    96f8:	29cf883a 	add	r7,r5,r7
    96fc:	38800117 	ldw	r2,4(r7)
    9700:	9009883a 	mov	r4,r18
    9704:	29400204 	addi	r5,r5,8
    9708:	10800054 	ori	r2,r2,1
    970c:	38800115 	stw	r2,4(r7)
    9710:	0004f540 	call	4f54 <_free_r>
    9714:	003fb606 	br	95f0 <_realloc_r+0x190>
    9718:	880b883a 	mov	r5,r17
    971c:	9009883a 	mov	r4,r18
    9720:	000564c0 	call	564c <_malloc_r>
    9724:	1023883a 	mov	r17,r2
    9728:	1000aa26 	beq	r2,zero,99d4 <_realloc_r+0x574>
    972c:	98ffff17 	ldw	r3,-4(r19)
    9730:	113ffe04 	addi	r4,r2,-8
    9734:	00bfff84 	movi	r2,-2
    9738:	1884703a 	and	r2,r3,r2
    973c:	a885883a 	add	r2,r21,r2
    9740:	20808626 	beq	r4,r2,995c <_realloc_r+0x4fc>
    9744:	81bfff04 	addi	r6,r16,-4
    9748:	00800904 	movi	r2,36
    974c:	11807036 	bltu	r2,r6,9910 <_realloc_r+0x4b0>
    9750:	00c004c4 	movi	r3,19
    9754:	19805636 	bltu	r3,r6,98b0 <_realloc_r+0x450>
    9758:	8805883a 	mov	r2,r17
    975c:	9807883a 	mov	r3,r19
    9760:	19000017 	ldw	r4,0(r3)
    9764:	11000015 	stw	r4,0(r2)
    9768:	19000117 	ldw	r4,4(r3)
    976c:	11000115 	stw	r4,4(r2)
    9770:	18c00217 	ldw	r3,8(r3)
    9774:	10c00215 	stw	r3,8(r2)
    9778:	980b883a 	mov	r5,r19
    977c:	9009883a 	mov	r4,r18
    9780:	0004f540 	call	4f54 <_free_r>
    9784:	9009883a 	mov	r4,r18
    9788:	000d5cc0 	call	d5cc <__malloc_unlock>
    978c:	8805883a 	mov	r2,r17
    9790:	003f9a06 	br	95fc <_realloc_r+0x19c>
    9794:	300b883a 	mov	r5,r6
    9798:	dfc00917 	ldw	ra,36(sp)
    979c:	df000817 	ldw	fp,32(sp)
    97a0:	ddc00717 	ldw	r23,28(sp)
    97a4:	dd800617 	ldw	r22,24(sp)
    97a8:	dd400517 	ldw	r21,20(sp)
    97ac:	dd000417 	ldw	r20,16(sp)
    97b0:	dcc00317 	ldw	r19,12(sp)
    97b4:	dc800217 	ldw	r18,8(sp)
    97b8:	dc400117 	ldw	r17,4(sp)
    97bc:	dc000017 	ldw	r16,0(sp)
    97c0:	dec00a04 	addi	sp,sp,40
    97c4:	000564c1 	jmpi	564c <_malloc_r>
    97c8:	11400317 	ldw	r5,12(r2)
    97cc:	10800217 	ldw	r2,8(r2)
    97d0:	9823883a 	mov	r17,r19
    97d4:	2021883a 	mov	r16,r4
    97d8:	11400315 	stw	r5,12(r2)
    97dc:	28800215 	stw	r2,8(r5)
    97e0:	003f7906 	br	95c8 <_realloc_r+0x168>
    97e4:	21000117 	ldw	r4,4(r4)
    97e8:	00bfff04 	movi	r2,-4
    97ec:	a1800404 	addi	r6,r20,16
    97f0:	2088703a 	and	r4,r4,r2
    97f4:	2409883a 	add	r4,r4,r16
    97f8:	2180380e 	bge	r4,r6,98dc <_realloc_r+0x47c>
    97fc:	18c0004c 	andi	r3,r3,1
    9800:	183fc51e 	bne	r3,zero,9718 <_realloc_r+0x2b8>
    9804:	9dfffe17 	ldw	r23,-8(r19)
    9808:	adefc83a 	sub	r23,r21,r23
    980c:	b9400117 	ldw	r5,4(r23)
    9810:	288a703a 	and	r5,r5,r2
    9814:	216d883a 	add	r22,r4,r5
    9818:	b1bf8b16 	blt	r22,r6,9648 <_realloc_r+0x1e8>
    981c:	b8800317 	ldw	r2,12(r23)
    9820:	b8c00217 	ldw	r3,8(r23)
    9824:	81bfff04 	addi	r6,r16,-4
    9828:	01000904 	movi	r4,36
    982c:	18800315 	stw	r2,12(r3)
    9830:	10c00215 	stw	r3,8(r2)
    9834:	bc400204 	addi	r17,r23,8
    9838:	21805a36 	bltu	r4,r6,99a4 <_realloc_r+0x544>
    983c:	008004c4 	movi	r2,19
    9840:	1180562e 	bgeu	r2,r6,999c <_realloc_r+0x53c>
    9844:	98800017 	ldw	r2,0(r19)
    9848:	b8800215 	stw	r2,8(r23)
    984c:	98800117 	ldw	r2,4(r19)
    9850:	b8800315 	stw	r2,12(r23)
    9854:	008006c4 	movi	r2,27
    9858:	11805636 	bltu	r2,r6,99b4 <_realloc_r+0x554>
    985c:	b8800404 	addi	r2,r23,16
    9860:	9cc00204 	addi	r19,r19,8
    9864:	98c00017 	ldw	r3,0(r19)
    9868:	10c00015 	stw	r3,0(r2)
    986c:	98c00117 	ldw	r3,4(r19)
    9870:	10c00115 	stw	r3,4(r2)
    9874:	98c00217 	ldw	r3,8(r19)
    9878:	10c00215 	stw	r3,8(r2)
    987c:	bd07883a 	add	r3,r23,r20
    9880:	b505c83a 	sub	r2,r22,r20
    9884:	e0c00215 	stw	r3,8(fp)
    9888:	10800054 	ori	r2,r2,1
    988c:	18800115 	stw	r2,4(r3)
    9890:	b8800117 	ldw	r2,4(r23)
    9894:	9009883a 	mov	r4,r18
    9898:	1080004c 	andi	r2,r2,1
    989c:	a0a8b03a 	or	r20,r20,r2
    98a0:	bd000115 	stw	r20,4(r23)
    98a4:	000d5cc0 	call	d5cc <__malloc_unlock>
    98a8:	8805883a 	mov	r2,r17
    98ac:	003f5306 	br	95fc <_realloc_r+0x19c>
    98b0:	98c00017 	ldw	r3,0(r19)
    98b4:	88c00015 	stw	r3,0(r17)
    98b8:	98c00117 	ldw	r3,4(r19)
    98bc:	88c00115 	stw	r3,4(r17)
    98c0:	00c006c4 	movi	r3,27
    98c4:	19801d36 	bltu	r3,r6,993c <_realloc_r+0x4dc>
    98c8:	88800204 	addi	r2,r17,8
    98cc:	98c00204 	addi	r3,r19,8
    98d0:	003fa306 	br	9760 <_realloc_r+0x300>
    98d4:	8807883a 	mov	r3,r17
    98d8:	003f7406 	br	96ac <_realloc_r+0x24c>
    98dc:	ad2b883a 	add	r21,r21,r20
    98e0:	2505c83a 	sub	r2,r4,r20
    98e4:	e5400215 	stw	r21,8(fp)
    98e8:	10800054 	ori	r2,r2,1
    98ec:	a8800115 	stw	r2,4(r21)
    98f0:	98bfff17 	ldw	r2,-4(r19)
    98f4:	9009883a 	mov	r4,r18
    98f8:	1080004c 	andi	r2,r2,1
    98fc:	a0a8b03a 	or	r20,r20,r2
    9900:	9d3fff15 	stw	r20,-4(r19)
    9904:	000d5cc0 	call	d5cc <__malloc_unlock>
    9908:	9805883a 	mov	r2,r19
    990c:	003f3b06 	br	95fc <_realloc_r+0x19c>
    9910:	8809883a 	mov	r4,r17
    9914:	980b883a 	mov	r5,r19
    9918:	00092a80 	call	92a8 <memmove>
    991c:	003f9606 	br	9778 <_realloc_r+0x318>
    9920:	8809883a 	mov	r4,r17
    9924:	980b883a 	mov	r5,r19
    9928:	00092a80 	call	92a8 <memmove>
    992c:	b8c00117 	ldw	r3,4(r23)
    9930:	b021883a 	mov	r16,r22
    9934:	b82b883a 	mov	r21,r23
    9938:	003f2306 	br	95c8 <_realloc_r+0x168>
    993c:	98c00217 	ldw	r3,8(r19)
    9940:	88c00215 	stw	r3,8(r17)
    9944:	98c00317 	ldw	r3,12(r19)
    9948:	88c00315 	stw	r3,12(r17)
    994c:	30800c26 	beq	r6,r2,9980 <_realloc_r+0x520>
    9950:	88800404 	addi	r2,r17,16
    9954:	98c00404 	addi	r3,r19,16
    9958:	003f8106 	br	9760 <_realloc_r+0x300>
    995c:	893fff17 	ldw	r4,-4(r17)
    9960:	00bfff04 	movi	r2,-4
    9964:	9823883a 	mov	r17,r19
    9968:	2084703a 	and	r2,r4,r2
    996c:	80a1883a 	add	r16,r16,r2
    9970:	003f1506 	br	95c8 <_realloc_r+0x168>
    9974:	b8c00404 	addi	r3,r23,16
    9978:	9cc00204 	addi	r19,r19,8
    997c:	003f4b06 	br	96ac <_realloc_r+0x24c>
    9980:	99000417 	ldw	r4,16(r19)
    9984:	88800604 	addi	r2,r17,24
    9988:	98c00604 	addi	r3,r19,24
    998c:	89000415 	stw	r4,16(r17)
    9990:	99000517 	ldw	r4,20(r19)
    9994:	89000515 	stw	r4,20(r17)
    9998:	003f7106 	br	9760 <_realloc_r+0x300>
    999c:	8805883a 	mov	r2,r17
    99a0:	003fb006 	br	9864 <_realloc_r+0x404>
    99a4:	8809883a 	mov	r4,r17
    99a8:	980b883a 	mov	r5,r19
    99ac:	00092a80 	call	92a8 <memmove>
    99b0:	003fb206 	br	987c <_realloc_r+0x41c>
    99b4:	98800217 	ldw	r2,8(r19)
    99b8:	b8800415 	stw	r2,16(r23)
    99bc:	98800317 	ldw	r2,12(r19)
    99c0:	b8800515 	stw	r2,20(r23)
    99c4:	31000726 	beq	r6,r4,99e4 <_realloc_r+0x584>
    99c8:	b8800604 	addi	r2,r23,24
    99cc:	9cc00404 	addi	r19,r19,16
    99d0:	003fa406 	br	9864 <_realloc_r+0x404>
    99d4:	9009883a 	mov	r4,r18
    99d8:	000d5cc0 	call	d5cc <__malloc_unlock>
    99dc:	0005883a 	mov	r2,zero
    99e0:	003f0606 	br	95fc <_realloc_r+0x19c>
    99e4:	98c00417 	ldw	r3,16(r19)
    99e8:	9cc00604 	addi	r19,r19,24
    99ec:	b8800804 	addi	r2,r23,32
    99f0:	b8c00615 	stw	r3,24(r23)
    99f4:	98ffff17 	ldw	r3,-4(r19)
    99f8:	b8c00715 	stw	r3,28(r23)
    99fc:	003f9906 	br	9864 <_realloc_r+0x404>

00009a00 <__swbuf_r>:
    9a00:	defffc04 	addi	sp,sp,-16
    9a04:	dc800215 	stw	r18,8(sp)
    9a08:	dc400115 	stw	r17,4(sp)
    9a0c:	dc000015 	stw	r16,0(sp)
    9a10:	dfc00315 	stw	ra,12(sp)
    9a14:	2025883a 	mov	r18,r4
    9a18:	2823883a 	mov	r17,r5
    9a1c:	3021883a 	mov	r16,r6
    9a20:	20000226 	beq	r4,zero,9a2c <__swbuf_r+0x2c>
    9a24:	20800e17 	ldw	r2,56(r4)
    9a28:	10004126 	beq	r2,zero,9b30 <__swbuf_r+0x130>
    9a2c:	80c00617 	ldw	r3,24(r16)
    9a30:	8180030b 	ldhu	r6,12(r16)
    9a34:	80c00215 	stw	r3,8(r16)
    9a38:	30c0020c 	andi	r3,r6,8
    9a3c:	18003526 	beq	r3,zero,9b14 <__swbuf_r+0x114>
    9a40:	80c00417 	ldw	r3,16(r16)
    9a44:	18003326 	beq	r3,zero,9b14 <__swbuf_r+0x114>
    9a48:	3088000c 	andi	r2,r6,8192
    9a4c:	8c403fcc 	andi	r17,r17,255
    9a50:	10001726 	beq	r2,zero,9ab0 <__swbuf_r+0xb0>
    9a54:	80800017 	ldw	r2,0(r16)
    9a58:	81000517 	ldw	r4,20(r16)
    9a5c:	10c7c83a 	sub	r3,r2,r3
    9a60:	19001d0e 	bge	r3,r4,9ad8 <__swbuf_r+0xd8>
    9a64:	18c00044 	addi	r3,r3,1
    9a68:	81400217 	ldw	r5,8(r16)
    9a6c:	11000044 	addi	r4,r2,1
    9a70:	81000015 	stw	r4,0(r16)
    9a74:	297fffc4 	addi	r5,r5,-1
    9a78:	81400215 	stw	r5,8(r16)
    9a7c:	14400005 	stb	r17,0(r2)
    9a80:	80800517 	ldw	r2,20(r16)
    9a84:	10c01d26 	beq	r2,r3,9afc <__swbuf_r+0xfc>
    9a88:	8080030b 	ldhu	r2,12(r16)
    9a8c:	1080004c 	andi	r2,r2,1
    9a90:	1000181e 	bne	r2,zero,9af4 <__swbuf_r+0xf4>
    9a94:	8805883a 	mov	r2,r17
    9a98:	dfc00317 	ldw	ra,12(sp)
    9a9c:	dc800217 	ldw	r18,8(sp)
    9aa0:	dc400117 	ldw	r17,4(sp)
    9aa4:	dc000017 	ldw	r16,0(sp)
    9aa8:	dec00404 	addi	sp,sp,16
    9aac:	f800283a 	ret
    9ab0:	81001917 	ldw	r4,100(r16)
    9ab4:	00b7ffc4 	movi	r2,-8193
    9ab8:	31880014 	ori	r6,r6,8192
    9abc:	2084703a 	and	r2,r4,r2
    9ac0:	80801915 	stw	r2,100(r16)
    9ac4:	80800017 	ldw	r2,0(r16)
    9ac8:	81000517 	ldw	r4,20(r16)
    9acc:	8180030d 	sth	r6,12(r16)
    9ad0:	10c7c83a 	sub	r3,r2,r3
    9ad4:	193fe316 	blt	r3,r4,9a64 <__swbuf_r+0x64>
    9ad8:	9009883a 	mov	r4,r18
    9adc:	800b883a 	mov	r5,r16
    9ae0:	00048380 	call	4838 <_fflush_r>
    9ae4:	1000091e 	bne	r2,zero,9b0c <__swbuf_r+0x10c>
    9ae8:	80800017 	ldw	r2,0(r16)
    9aec:	00c00044 	movi	r3,1
    9af0:	003fdd06 	br	9a68 <__swbuf_r+0x68>
    9af4:	00800284 	movi	r2,10
    9af8:	88bfe61e 	bne	r17,r2,9a94 <__swbuf_r+0x94>
    9afc:	9009883a 	mov	r4,r18
    9b00:	800b883a 	mov	r5,r16
    9b04:	00048380 	call	4838 <_fflush_r>
    9b08:	103fe226 	beq	r2,zero,9a94 <__swbuf_r+0x94>
    9b0c:	00bfffc4 	movi	r2,-1
    9b10:	003fe106 	br	9a98 <__swbuf_r+0x98>
    9b14:	9009883a 	mov	r4,r18
    9b18:	800b883a 	mov	r5,r16
    9b1c:	0002de00 	call	2de0 <__swsetup_r>
    9b20:	1000051e 	bne	r2,zero,9b38 <__swbuf_r+0x138>
    9b24:	8180030b 	ldhu	r6,12(r16)
    9b28:	80c00417 	ldw	r3,16(r16)
    9b2c:	003fc606 	br	9a48 <__swbuf_r+0x48>
    9b30:	0004de00 	call	4de0 <__sinit>
    9b34:	003fbd06 	br	9a2c <__swbuf_r+0x2c>
    9b38:	80c0030b 	ldhu	r3,12(r16)
    9b3c:	00bfffc4 	movi	r2,-1
    9b40:	18c01014 	ori	r3,r3,64
    9b44:	80c0030d 	sth	r3,12(r16)
    9b48:	00c00244 	movi	r3,9
    9b4c:	90c00015 	stw	r3,0(r18)
    9b50:	003fd106 	br	9a98 <__swbuf_r+0x98>

00009b54 <__swbuf>:
    9b54:	00c00074 	movhi	r3,1
    9b58:	18c5c204 	addi	r3,r3,5896
    9b5c:	2005883a 	mov	r2,r4
    9b60:	19000017 	ldw	r4,0(r3)
    9b64:	280d883a 	mov	r6,r5
    9b68:	100b883a 	mov	r5,r2
    9b6c:	0009a001 	jmpi	9a00 <__swbuf_r>

00009b70 <_wcrtomb_r>:
    9b70:	defff604 	addi	sp,sp,-40
    9b74:	00800074 	movhi	r2,1
    9b78:	dc800815 	stw	r18,32(sp)
    9b7c:	dc400715 	stw	r17,28(sp)
    9b80:	dc000615 	stw	r16,24(sp)
    9b84:	1085c604 	addi	r2,r2,5912
    9b88:	dfc00915 	stw	ra,36(sp)
    9b8c:	2021883a 	mov	r16,r4
    9b90:	3823883a 	mov	r17,r7
    9b94:	14800017 	ldw	r18,0(r2)
    9b98:	28001426 	beq	r5,zero,9bec <_wcrtomb_r+0x7c>
    9b9c:	d9400415 	stw	r5,16(sp)
    9ba0:	d9800515 	stw	r6,20(sp)
    9ba4:	00054300 	call	5430 <__locale_charset>
    9ba8:	d9400417 	ldw	r5,16(sp)
    9bac:	d9800517 	ldw	r6,20(sp)
    9bb0:	8009883a 	mov	r4,r16
    9bb4:	dc400015 	stw	r17,0(sp)
    9bb8:	100f883a 	mov	r7,r2
    9bbc:	903ee83a 	callr	r18
    9bc0:	00ffffc4 	movi	r3,-1
    9bc4:	10c0031e 	bne	r2,r3,9bd4 <_wcrtomb_r+0x64>
    9bc8:	88000015 	stw	zero,0(r17)
    9bcc:	00c02284 	movi	r3,138
    9bd0:	80c00015 	stw	r3,0(r16)
    9bd4:	dfc00917 	ldw	ra,36(sp)
    9bd8:	dc800817 	ldw	r18,32(sp)
    9bdc:	dc400717 	ldw	r17,28(sp)
    9be0:	dc000617 	ldw	r16,24(sp)
    9be4:	dec00a04 	addi	sp,sp,40
    9be8:	f800283a 	ret
    9bec:	00054300 	call	5430 <__locale_charset>
    9bf0:	8009883a 	mov	r4,r16
    9bf4:	dc400015 	stw	r17,0(sp)
    9bf8:	d9400104 	addi	r5,sp,4
    9bfc:	000d883a 	mov	r6,zero
    9c00:	100f883a 	mov	r7,r2
    9c04:	903ee83a 	callr	r18
    9c08:	003fed06 	br	9bc0 <_wcrtomb_r+0x50>

00009c0c <wcrtomb>:
    9c0c:	defff504 	addi	sp,sp,-44
    9c10:	dc400515 	stw	r17,20(sp)
    9c14:	dc000415 	stw	r16,16(sp)
    9c18:	dfc00a15 	stw	ra,40(sp)
    9c1c:	dd400915 	stw	r21,36(sp)
    9c20:	dd000815 	stw	r20,32(sp)
    9c24:	dcc00715 	stw	r19,28(sp)
    9c28:	dc800615 	stw	r18,24(sp)
    9c2c:	2021883a 	mov	r16,r4
    9c30:	3023883a 	mov	r17,r6
    9c34:	20001d26 	beq	r4,zero,9cac <wcrtomb+0xa0>
    9c38:	04800074 	movhi	r18,1
    9c3c:	9485c204 	addi	r18,r18,5896
    9c40:	00800074 	movhi	r2,1
    9c44:	95400017 	ldw	r21,0(r18)
    9c48:	1085c604 	addi	r2,r2,5912
    9c4c:	15000017 	ldw	r20,0(r2)
    9c50:	2827883a 	mov	r19,r5
    9c54:	00054300 	call	5430 <__locale_charset>
    9c58:	a809883a 	mov	r4,r21
    9c5c:	dc400015 	stw	r17,0(sp)
    9c60:	800b883a 	mov	r5,r16
    9c64:	980d883a 	mov	r6,r19
    9c68:	100f883a 	mov	r7,r2
    9c6c:	a03ee83a 	callr	r20
    9c70:	00ffffc4 	movi	r3,-1
    9c74:	10c0041e 	bne	r2,r3,9c88 <wcrtomb+0x7c>
    9c78:	90c00017 	ldw	r3,0(r18)
    9c7c:	01002284 	movi	r4,138
    9c80:	88000015 	stw	zero,0(r17)
    9c84:	19000015 	stw	r4,0(r3)
    9c88:	dfc00a17 	ldw	ra,40(sp)
    9c8c:	dd400917 	ldw	r21,36(sp)
    9c90:	dd000817 	ldw	r20,32(sp)
    9c94:	dcc00717 	ldw	r19,28(sp)
    9c98:	dc800617 	ldw	r18,24(sp)
    9c9c:	dc400517 	ldw	r17,20(sp)
    9ca0:	dc000417 	ldw	r16,16(sp)
    9ca4:	dec00b04 	addi	sp,sp,44
    9ca8:	f800283a 	ret
    9cac:	04800074 	movhi	r18,1
    9cb0:	9485c204 	addi	r18,r18,5896
    9cb4:	00800074 	movhi	r2,1
    9cb8:	94c00017 	ldw	r19,0(r18)
    9cbc:	1085c604 	addi	r2,r2,5912
    9cc0:	14000017 	ldw	r16,0(r2)
    9cc4:	00054300 	call	5430 <__locale_charset>
    9cc8:	9809883a 	mov	r4,r19
    9ccc:	dc400015 	stw	r17,0(sp)
    9cd0:	d9400104 	addi	r5,sp,4
    9cd4:	000d883a 	mov	r6,zero
    9cd8:	100f883a 	mov	r7,r2
    9cdc:	803ee83a 	callr	r16
    9ce0:	003fe306 	br	9c70 <wcrtomb+0x64>

00009ce4 <__ascii_wctomb>:
    9ce4:	28000526 	beq	r5,zero,9cfc <__ascii_wctomb+0x18>
    9ce8:	00803fc4 	movi	r2,255
    9cec:	11800536 	bltu	r2,r6,9d04 <__ascii_wctomb+0x20>
    9cf0:	29800005 	stb	r6,0(r5)
    9cf4:	00800044 	movi	r2,1
    9cf8:	f800283a 	ret
    9cfc:	0005883a 	mov	r2,zero
    9d00:	f800283a 	ret
    9d04:	00802284 	movi	r2,138
    9d08:	20800015 	stw	r2,0(r4)
    9d0c:	00bfffc4 	movi	r2,-1
    9d10:	f800283a 	ret

00009d14 <_wctomb_r>:
    9d14:	00800074 	movhi	r2,1
    9d18:	defff904 	addi	sp,sp,-28
    9d1c:	1085c604 	addi	r2,r2,5912
    9d20:	dfc00615 	stw	ra,24(sp)
    9d24:	dc400515 	stw	r17,20(sp)
    9d28:	dc000415 	stw	r16,16(sp)
    9d2c:	3823883a 	mov	r17,r7
    9d30:	14000017 	ldw	r16,0(r2)
    9d34:	d9000115 	stw	r4,4(sp)
    9d38:	d9400215 	stw	r5,8(sp)
    9d3c:	d9800315 	stw	r6,12(sp)
    9d40:	00054300 	call	5430 <__locale_charset>
    9d44:	d9000117 	ldw	r4,4(sp)
    9d48:	d9400217 	ldw	r5,8(sp)
    9d4c:	d9800317 	ldw	r6,12(sp)
    9d50:	dc400015 	stw	r17,0(sp)
    9d54:	100f883a 	mov	r7,r2
    9d58:	803ee83a 	callr	r16
    9d5c:	dfc00617 	ldw	ra,24(sp)
    9d60:	dc400517 	ldw	r17,20(sp)
    9d64:	dc000417 	ldw	r16,16(sp)
    9d68:	dec00704 	addi	sp,sp,28
    9d6c:	f800283a 	ret

00009d70 <__udivdi3>:
    9d70:	defff504 	addi	sp,sp,-44
    9d74:	dcc00415 	stw	r19,16(sp)
    9d78:	dc000115 	stw	r16,4(sp)
    9d7c:	dfc00a15 	stw	ra,40(sp)
    9d80:	df000915 	stw	fp,36(sp)
    9d84:	ddc00815 	stw	r23,32(sp)
    9d88:	dd800715 	stw	r22,28(sp)
    9d8c:	dd400615 	stw	r21,24(sp)
    9d90:	dd000515 	stw	r20,20(sp)
    9d94:	dc800315 	stw	r18,12(sp)
    9d98:	dc400215 	stw	r17,8(sp)
    9d9c:	2027883a 	mov	r19,r4
    9da0:	2821883a 	mov	r16,r5
    9da4:	3800421e 	bne	r7,zero,9eb0 <__udivdi3+0x140>
    9da8:	3025883a 	mov	r18,r6
    9dac:	2023883a 	mov	r17,r4
    9db0:	2980542e 	bgeu	r5,r6,9f04 <__udivdi3+0x194>
    9db4:	00bfffd4 	movui	r2,65535
    9db8:	282d883a 	mov	r22,r5
    9dbc:	1180a836 	bltu	r2,r6,a060 <__udivdi3+0x2f0>
    9dc0:	00803fc4 	movi	r2,255
    9dc4:	1181422e 	bgeu	r2,r6,a2d0 <__udivdi3+0x560>
    9dc8:	00800204 	movi	r2,8
    9dcc:	1007883a 	mov	r3,r2
    9dd0:	3084d83a 	srl	r2,r6,r2
    9dd4:	01000074 	movhi	r4,1
    9dd8:	213ecb04 	addi	r4,r4,-1236
    9ddc:	2085883a 	add	r2,r4,r2
    9de0:	10800003 	ldbu	r2,0(r2)
    9de4:	10c7883a 	add	r3,r2,r3
    9de8:	00800804 	movi	r2,32
    9dec:	10c5c83a 	sub	r2,r2,r3
    9df0:	10000526 	beq	r2,zero,9e08 <__udivdi3+0x98>
    9df4:	80a0983a 	sll	r16,r16,r2
    9df8:	98c6d83a 	srl	r3,r19,r3
    9dfc:	30a4983a 	sll	r18,r6,r2
    9e00:	98a2983a 	sll	r17,r19,r2
    9e04:	80ecb03a 	or	r22,r16,r3
    9e08:	902ad43a 	srli	r21,r18,16
    9e0c:	b009883a 	mov	r4,r22
    9e10:	953fffcc 	andi	r20,r18,65535
    9e14:	a80b883a 	mov	r5,r21
    9e18:	000a9e40 	call	a9e4 <__umodsi3>
    9e1c:	b009883a 	mov	r4,r22
    9e20:	a80b883a 	mov	r5,r21
    9e24:	1027883a 	mov	r19,r2
    9e28:	000a9dc0 	call	a9dc <__udivsi3>
    9e2c:	1021883a 	mov	r16,r2
    9e30:	8806d43a 	srli	r3,r17,16
    9e34:	9804943a 	slli	r2,r19,16
    9e38:	8527383a 	mul	r19,r16,r20
    9e3c:	10c4b03a 	or	r2,r2,r3
    9e40:	14c0052e 	bgeu	r2,r19,9e58 <__udivdi3+0xe8>
    9e44:	1485883a 	add	r2,r2,r18
    9e48:	80ffffc4 	addi	r3,r16,-1
    9e4c:	14800136 	bltu	r2,r18,9e54 <__udivdi3+0xe4>
    9e50:	14c13436 	bltu	r2,r19,a324 <__udivdi3+0x5b4>
    9e54:	1821883a 	mov	r16,r3
    9e58:	14e7c83a 	sub	r19,r2,r19
    9e5c:	9809883a 	mov	r4,r19
    9e60:	a80b883a 	mov	r5,r21
    9e64:	000a9e40 	call	a9e4 <__umodsi3>
    9e68:	102d883a 	mov	r22,r2
    9e6c:	9809883a 	mov	r4,r19
    9e70:	a80b883a 	mov	r5,r21
    9e74:	000a9dc0 	call	a9dc <__udivsi3>
    9e78:	b02c943a 	slli	r22,r22,16
    9e7c:	1529383a 	mul	r20,r2,r20
    9e80:	8c7fffcc 	andi	r17,r17,65535
    9e84:	b462b03a 	or	r17,r22,r17
    9e88:	8d00052e 	bgeu	r17,r20,9ea0 <__udivdi3+0x130>
    9e8c:	8ca3883a 	add	r17,r17,r18
    9e90:	10ffffc4 	addi	r3,r2,-1
    9e94:	8c80f636 	bltu	r17,r18,a270 <__udivdi3+0x500>
    9e98:	8d00f52e 	bgeu	r17,r20,a270 <__udivdi3+0x500>
    9e9c:	10bfff84 	addi	r2,r2,-2
    9ea0:	8020943a 	slli	r16,r16,16
    9ea4:	0007883a 	mov	r3,zero
    9ea8:	1404b03a 	or	r2,r2,r16
    9eac:	00005b06 	br	a01c <__udivdi3+0x2ac>
    9eb0:	29c05836 	bltu	r5,r7,a014 <__udivdi3+0x2a4>
    9eb4:	00bfffd4 	movui	r2,65535
    9eb8:	11c0642e 	bgeu	r2,r7,a04c <__udivdi3+0x2dc>
    9ebc:	00804034 	movhi	r2,256
    9ec0:	10bfffc4 	addi	r2,r2,-1
    9ec4:	11c0f32e 	bgeu	r2,r7,a294 <__udivdi3+0x524>
    9ec8:	00c00604 	movi	r3,24
    9ecc:	180b883a 	mov	r5,r3
    9ed0:	38c6d83a 	srl	r3,r7,r3
    9ed4:	00800074 	movhi	r2,1
    9ed8:	10becb04 	addi	r2,r2,-1236
    9edc:	10c7883a 	add	r3,r2,r3
    9ee0:	18c00003 	ldbu	r3,0(r3)
    9ee4:	01000804 	movi	r4,32
    9ee8:	1947883a 	add	r3,r3,r5
    9eec:	20e5c83a 	sub	r18,r4,r3
    9ef0:	9000661e 	bne	r18,zero,a08c <__udivdi3+0x31c>
    9ef4:	3c00f936 	bltu	r7,r16,a2dc <__udivdi3+0x56c>
    9ef8:	9985403a 	cmpgeu	r2,r19,r6
    9efc:	0007883a 	mov	r3,zero
    9f00:	00004606 	br	a01c <__udivdi3+0x2ac>
    9f04:	3000041e 	bne	r6,zero,9f18 <__udivdi3+0x1a8>
    9f08:	01000044 	movi	r4,1
    9f0c:	000b883a 	mov	r5,zero
    9f10:	000a9dc0 	call	a9dc <__udivsi3>
    9f14:	1025883a 	mov	r18,r2
    9f18:	00bfffd4 	movui	r2,65535
    9f1c:	1480562e 	bgeu	r2,r18,a078 <__udivdi3+0x308>
    9f20:	00804034 	movhi	r2,256
    9f24:	10bfffc4 	addi	r2,r2,-1
    9f28:	1480e32e 	bgeu	r2,r18,a2b8 <__udivdi3+0x548>
    9f2c:	00800604 	movi	r2,24
    9f30:	1007883a 	mov	r3,r2
    9f34:	9084d83a 	srl	r2,r18,r2
    9f38:	01000074 	movhi	r4,1
    9f3c:	213ecb04 	addi	r4,r4,-1236
    9f40:	2085883a 	add	r2,r4,r2
    9f44:	10800003 	ldbu	r2,0(r2)
    9f48:	10c5883a 	add	r2,r2,r3
    9f4c:	00c00804 	movi	r3,32
    9f50:	1887c83a 	sub	r3,r3,r2
    9f54:	1800911e 	bne	r3,zero,a19c <__udivdi3+0x42c>
    9f58:	9028d43a 	srli	r20,r18,16
    9f5c:	84a1c83a 	sub	r16,r16,r18
    9f60:	957fffcc 	andi	r21,r18,65535
    9f64:	00c00044 	movi	r3,1
    9f68:	8009883a 	mov	r4,r16
    9f6c:	a00b883a 	mov	r5,r20
    9f70:	d8c00015 	stw	r3,0(sp)
    9f74:	000a9e40 	call	a9e4 <__umodsi3>
    9f78:	8009883a 	mov	r4,r16
    9f7c:	a00b883a 	mov	r5,r20
    9f80:	1027883a 	mov	r19,r2
    9f84:	000a9dc0 	call	a9dc <__udivsi3>
    9f88:	1021883a 	mov	r16,r2
    9f8c:	880cd43a 	srli	r6,r17,16
    9f90:	9804943a 	slli	r2,r19,16
    9f94:	8567383a 	mul	r19,r16,r21
    9f98:	d8c00017 	ldw	r3,0(sp)
    9f9c:	1188b03a 	or	r4,r2,r6
    9fa0:	24c0052e 	bgeu	r4,r19,9fb8 <__udivdi3+0x248>
    9fa4:	2489883a 	add	r4,r4,r18
    9fa8:	80bfffc4 	addi	r2,r16,-1
    9fac:	24800136 	bltu	r4,r18,9fb4 <__udivdi3+0x244>
    9fb0:	24c0d936 	bltu	r4,r19,a318 <__udivdi3+0x5a8>
    9fb4:	1021883a 	mov	r16,r2
    9fb8:	24e7c83a 	sub	r19,r4,r19
    9fbc:	9809883a 	mov	r4,r19
    9fc0:	a00b883a 	mov	r5,r20
    9fc4:	d8c00015 	stw	r3,0(sp)
    9fc8:	000a9e40 	call	a9e4 <__umodsi3>
    9fcc:	102d883a 	mov	r22,r2
    9fd0:	9809883a 	mov	r4,r19
    9fd4:	a00b883a 	mov	r5,r20
    9fd8:	000a9dc0 	call	a9dc <__udivsi3>
    9fdc:	b02c943a 	slli	r22,r22,16
    9fe0:	156b383a 	mul	r21,r2,r21
    9fe4:	8c7fffcc 	andi	r17,r17,65535
    9fe8:	b462b03a 	or	r17,r22,r17
    9fec:	d8c00017 	ldw	r3,0(sp)
    9ff0:	8d40052e 	bgeu	r17,r21,a008 <__udivdi3+0x298>
    9ff4:	8ca3883a 	add	r17,r17,r18
    9ff8:	113fffc4 	addi	r4,r2,-1
    9ffc:	8c809a36 	bltu	r17,r18,a268 <__udivdi3+0x4f8>
    a000:	8d40992e 	bgeu	r17,r21,a268 <__udivdi3+0x4f8>
    a004:	10bfff84 	addi	r2,r2,-2
    a008:	8020943a 	slli	r16,r16,16
    a00c:	1404b03a 	or	r2,r2,r16
    a010:	00000206 	br	a01c <__udivdi3+0x2ac>
    a014:	0007883a 	mov	r3,zero
    a018:	0005883a 	mov	r2,zero
    a01c:	dfc00a17 	ldw	ra,40(sp)
    a020:	df000917 	ldw	fp,36(sp)
    a024:	ddc00817 	ldw	r23,32(sp)
    a028:	dd800717 	ldw	r22,28(sp)
    a02c:	dd400617 	ldw	r21,24(sp)
    a030:	dd000517 	ldw	r20,20(sp)
    a034:	dcc00417 	ldw	r19,16(sp)
    a038:	dc800317 	ldw	r18,12(sp)
    a03c:	dc400217 	ldw	r17,8(sp)
    a040:	dc000117 	ldw	r16,4(sp)
    a044:	dec00b04 	addi	sp,sp,44
    a048:	f800283a 	ret
    a04c:	00803fc4 	movi	r2,255
    a050:	11c0932e 	bgeu	r2,r7,a2a0 <__udivdi3+0x530>
    a054:	00c00204 	movi	r3,8
    a058:	180b883a 	mov	r5,r3
    a05c:	003f9c06 	br	9ed0 <__udivdi3+0x160>
    a060:	00804034 	movhi	r2,256
    a064:	10bfffc4 	addi	r2,r2,-1
    a068:	1180902e 	bgeu	r2,r6,a2ac <__udivdi3+0x53c>
    a06c:	00800604 	movi	r2,24
    a070:	1007883a 	mov	r3,r2
    a074:	003f5606 	br	9dd0 <__udivdi3+0x60>
    a078:	00803fc4 	movi	r2,255
    a07c:	1480912e 	bgeu	r2,r18,a2c4 <__udivdi3+0x554>
    a080:	00800204 	movi	r2,8
    a084:	1007883a 	mov	r3,r2
    a088:	003faa06 	br	9f34 <__udivdi3+0x1c4>
    a08c:	30eed83a 	srl	r23,r6,r3
    a090:	3c8e983a 	sll	r7,r7,r18
    a094:	80f8d83a 	srl	fp,r16,r3
    a098:	98c6d83a 	srl	r3,r19,r3
    a09c:	3deeb03a 	or	r23,r7,r23
    a0a0:	b828d43a 	srli	r20,r23,16
    a0a4:	84a0983a 	sll	r16,r16,r18
    a0a8:	e009883a 	mov	r4,fp
    a0ac:	a00b883a 	mov	r5,r20
    a0b0:	80e2b03a 	or	r17,r16,r3
    a0b4:	34aa983a 	sll	r21,r6,r18
    a0b8:	000a9e40 	call	a9e4 <__umodsi3>
    a0bc:	e009883a 	mov	r4,fp
    a0c0:	a00b883a 	mov	r5,r20
    a0c4:	102d883a 	mov	r22,r2
    a0c8:	000a9dc0 	call	a9dc <__udivsi3>
    a0cc:	1021883a 	mov	r16,r2
    a0d0:	bf3fffcc 	andi	fp,r23,65535
    a0d4:	b004943a 	slli	r2,r22,16
    a0d8:	8808d43a 	srli	r4,r17,16
    a0dc:	872d383a 	mul	r22,r16,fp
    a0e0:	1104b03a 	or	r2,r2,r4
    a0e4:	1580042e 	bgeu	r2,r22,a0f8 <__udivdi3+0x388>
    a0e8:	15c5883a 	add	r2,r2,r23
    a0ec:	80ffffc4 	addi	r3,r16,-1
    a0f0:	15c0812e 	bgeu	r2,r23,a2f8 <__udivdi3+0x588>
    a0f4:	1821883a 	mov	r16,r3
    a0f8:	15adc83a 	sub	r22,r2,r22
    a0fc:	b009883a 	mov	r4,r22
    a100:	a00b883a 	mov	r5,r20
    a104:	000a9e40 	call	a9e4 <__umodsi3>
    a108:	a00b883a 	mov	r5,r20
    a10c:	b009883a 	mov	r4,r22
    a110:	d8800015 	stw	r2,0(sp)
    a114:	000a9dc0 	call	a9dc <__udivsi3>
    a118:	d8c00017 	ldw	r3,0(sp)
    a11c:	170b383a 	mul	r5,r2,fp
    a120:	8c7fffcc 	andi	r17,r17,65535
    a124:	1806943a 	slli	r3,r3,16
    a128:	1c46b03a 	or	r3,r3,r17
    a12c:	1940042e 	bgeu	r3,r5,a140 <__udivdi3+0x3d0>
    a130:	1dc7883a 	add	r3,r3,r23
    a134:	113fffc4 	addi	r4,r2,-1
    a138:	1dc06b2e 	bgeu	r3,r23,a2e8 <__udivdi3+0x578>
    a13c:	2005883a 	mov	r2,r4
    a140:	8020943a 	slli	r16,r16,16
    a144:	a9ffffcc 	andi	r7,r21,65535
    a148:	a82ad43a 	srli	r21,r21,16
    a14c:	1404b03a 	or	r2,r2,r16
    a150:	113fffcc 	andi	r4,r2,65535
    a154:	100cd43a 	srli	r6,r2,16
    a158:	21d3383a 	mul	r9,r4,r7
    a15c:	2549383a 	mul	r4,r4,r21
    a160:	31cf383a 	mul	r7,r6,r7
    a164:	4810d43a 	srli	r8,r9,16
    a168:	1947c83a 	sub	r3,r3,r5
    a16c:	3909883a 	add	r4,r7,r4
    a170:	2209883a 	add	r4,r4,r8
    a174:	354d383a 	mul	r6,r6,r21
    a178:	21c0022e 	bgeu	r4,r7,a184 <__udivdi3+0x414>
    a17c:	01400074 	movhi	r5,1
    a180:	314d883a 	add	r6,r6,r5
    a184:	202ad43a 	srli	r21,r4,16
    a188:	354d883a 	add	r6,r6,r21
    a18c:	19803f36 	bltu	r3,r6,a28c <__udivdi3+0x51c>
    a190:	19803926 	beq	r3,r6,a278 <__udivdi3+0x508>
    a194:	0007883a 	mov	r3,zero
    a198:	003fa006 	br	a01c <__udivdi3+0x2ac>
    a19c:	90e4983a 	sll	r18,r18,r3
    a1a0:	80aad83a 	srl	r21,r16,r2
    a1a4:	80e0983a 	sll	r16,r16,r3
    a1a8:	9028d43a 	srli	r20,r18,16
    a1ac:	9884d83a 	srl	r2,r19,r2
    a1b0:	a809883a 	mov	r4,r21
    a1b4:	a00b883a 	mov	r5,r20
    a1b8:	80acb03a 	or	r22,r16,r2
    a1bc:	98e2983a 	sll	r17,r19,r3
    a1c0:	000a9e40 	call	a9e4 <__umodsi3>
    a1c4:	a809883a 	mov	r4,r21
    a1c8:	a00b883a 	mov	r5,r20
    a1cc:	1021883a 	mov	r16,r2
    a1d0:	000a9dc0 	call	a9dc <__udivsi3>
    a1d4:	957fffcc 	andi	r21,r18,65535
    a1d8:	8020943a 	slli	r16,r16,16
    a1dc:	b00ad43a 	srli	r5,r22,16
    a1e0:	1567383a 	mul	r19,r2,r21
    a1e4:	102f883a 	mov	r23,r2
    a1e8:	8148b03a 	or	r4,r16,r5
    a1ec:	24c0062e 	bgeu	r4,r19,a208 <__udivdi3+0x498>
    a1f0:	2489883a 	add	r4,r4,r18
    a1f4:	10bfffc4 	addi	r2,r2,-1
    a1f8:	24804536 	bltu	r4,r18,a310 <__udivdi3+0x5a0>
    a1fc:	24c0442e 	bgeu	r4,r19,a310 <__udivdi3+0x5a0>
    a200:	bdffff84 	addi	r23,r23,-2
    a204:	2489883a 	add	r4,r4,r18
    a208:	24e7c83a 	sub	r19,r4,r19
    a20c:	9809883a 	mov	r4,r19
    a210:	a00b883a 	mov	r5,r20
    a214:	000a9e40 	call	a9e4 <__umodsi3>
    a218:	1021883a 	mov	r16,r2
    a21c:	9809883a 	mov	r4,r19
    a220:	a00b883a 	mov	r5,r20
    a224:	000a9dc0 	call	a9dc <__udivsi3>
    a228:	8020943a 	slli	r16,r16,16
    a22c:	1007883a 	mov	r3,r2
    a230:	1545383a 	mul	r2,r2,r21
    a234:	b13fffcc 	andi	r4,r22,65535
    a238:	8108b03a 	or	r4,r16,r4
    a23c:	2080062e 	bgeu	r4,r2,a258 <__udivdi3+0x4e8>
    a240:	2489883a 	add	r4,r4,r18
    a244:	197fffc4 	addi	r5,r3,-1
    a248:	24802f36 	bltu	r4,r18,a308 <__udivdi3+0x598>
    a24c:	20802e2e 	bgeu	r4,r2,a308 <__udivdi3+0x598>
    a250:	18ffff84 	addi	r3,r3,-2
    a254:	2489883a 	add	r4,r4,r18
    a258:	b82e943a 	slli	r23,r23,16
    a25c:	20a1c83a 	sub	r16,r4,r2
    a260:	1dc6b03a 	or	r3,r3,r23
    a264:	003f4006 	br	9f68 <__udivdi3+0x1f8>
    a268:	2005883a 	mov	r2,r4
    a26c:	003f6606 	br	a008 <__udivdi3+0x298>
    a270:	1805883a 	mov	r2,r3
    a274:	003f0a06 	br	9ea0 <__udivdi3+0x130>
    a278:	2006943a 	slli	r3,r4,16
    a27c:	9c88983a 	sll	r4,r19,r18
    a280:	4a7fffcc 	andi	r9,r9,65535
    a284:	1a47883a 	add	r3,r3,r9
    a288:	20ffc22e 	bgeu	r4,r3,a194 <__udivdi3+0x424>
    a28c:	10bfffc4 	addi	r2,r2,-1
    a290:	003fc006 	br	a194 <__udivdi3+0x424>
    a294:	00c00404 	movi	r3,16
    a298:	180b883a 	mov	r5,r3
    a29c:	003f0c06 	br	9ed0 <__udivdi3+0x160>
    a2a0:	0007883a 	mov	r3,zero
    a2a4:	000b883a 	mov	r5,zero
    a2a8:	003f0906 	br	9ed0 <__udivdi3+0x160>
    a2ac:	00800404 	movi	r2,16
    a2b0:	1007883a 	mov	r3,r2
    a2b4:	003ec606 	br	9dd0 <__udivdi3+0x60>
    a2b8:	00800404 	movi	r2,16
    a2bc:	1007883a 	mov	r3,r2
    a2c0:	003f1c06 	br	9f34 <__udivdi3+0x1c4>
    a2c4:	0005883a 	mov	r2,zero
    a2c8:	0007883a 	mov	r3,zero
    a2cc:	003f1906 	br	9f34 <__udivdi3+0x1c4>
    a2d0:	0005883a 	mov	r2,zero
    a2d4:	0007883a 	mov	r3,zero
    a2d8:	003ebd06 	br	9dd0 <__udivdi3+0x60>
    a2dc:	0007883a 	mov	r3,zero
    a2e0:	00800044 	movi	r2,1
    a2e4:	003f4d06 	br	a01c <__udivdi3+0x2ac>
    a2e8:	197f942e 	bgeu	r3,r5,a13c <__udivdi3+0x3cc>
    a2ec:	10bfff84 	addi	r2,r2,-2
    a2f0:	1dc7883a 	add	r3,r3,r23
    a2f4:	003f9206 	br	a140 <__udivdi3+0x3d0>
    a2f8:	15bf7e2e 	bgeu	r2,r22,a0f4 <__udivdi3+0x384>
    a2fc:	843fff84 	addi	r16,r16,-2
    a300:	15c5883a 	add	r2,r2,r23
    a304:	003f7c06 	br	a0f8 <__udivdi3+0x388>
    a308:	2807883a 	mov	r3,r5
    a30c:	003fd206 	br	a258 <__udivdi3+0x4e8>
    a310:	102f883a 	mov	r23,r2
    a314:	003fbc06 	br	a208 <__udivdi3+0x498>
    a318:	843fff84 	addi	r16,r16,-2
    a31c:	2489883a 	add	r4,r4,r18
    a320:	003f2506 	br	9fb8 <__udivdi3+0x248>
    a324:	843fff84 	addi	r16,r16,-2
    a328:	1485883a 	add	r2,r2,r18
    a32c:	003eca06 	br	9e58 <__udivdi3+0xe8>

0000a330 <__umoddi3>:
    a330:	defff404 	addi	sp,sp,-48
    a334:	ddc00915 	stw	r23,36(sp)
    a338:	dc400315 	stw	r17,12(sp)
    a33c:	dc000215 	stw	r16,8(sp)
    a340:	dfc00b15 	stw	ra,44(sp)
    a344:	df000a15 	stw	fp,40(sp)
    a348:	dd800815 	stw	r22,32(sp)
    a34c:	dd400715 	stw	r21,28(sp)
    a350:	dd000615 	stw	r20,24(sp)
    a354:	dcc00515 	stw	r19,20(sp)
    a358:	dc800415 	stw	r18,16(sp)
    a35c:	2021883a 	mov	r16,r4
    a360:	2823883a 	mov	r17,r5
    a364:	282f883a 	mov	r23,r5
    a368:	3800381e 	bne	r7,zero,a44c <__umoddi3+0x11c>
    a36c:	3027883a 	mov	r19,r6
    a370:	2029883a 	mov	r20,r4
    a374:	29804e2e 	bgeu	r5,r6,a4b0 <__umoddi3+0x180>
    a378:	00bfffd4 	movui	r2,65535
    a37c:	11809c36 	bltu	r2,r6,a5f0 <__umoddi3+0x2c0>
    a380:	00803fc4 	movi	r2,255
    a384:	11813b2e 	bgeu	r2,r6,a874 <__umoddi3+0x544>
    a388:	01400204 	movi	r5,8
    a38c:	2805883a 	mov	r2,r5
    a390:	314ad83a 	srl	r5,r6,r5
    a394:	00c00074 	movhi	r3,1
    a398:	18fecb04 	addi	r3,r3,-1236
    a39c:	194b883a 	add	r5,r3,r5
    a3a0:	29000003 	ldbu	r4,0(r5)
    a3a4:	2089883a 	add	r4,r4,r2
    a3a8:	00800804 	movi	r2,32
    a3ac:	1105c83a 	sub	r2,r2,r4
    a3b0:	1000ec26 	beq	r2,zero,a764 <__umoddi3+0x434>
    a3b4:	88a2983a 	sll	r17,r17,r2
    a3b8:	8108d83a 	srl	r4,r16,r4
    a3bc:	30a6983a 	sll	r19,r6,r2
    a3c0:	80a8983a 	sll	r20,r16,r2
    a3c4:	1025883a 	mov	r18,r2
    a3c8:	892eb03a 	or	r23,r17,r4
    a3cc:	982cd43a 	srli	r22,r19,16
    a3d0:	b809883a 	mov	r4,r23
    a3d4:	9d7fffcc 	andi	r21,r19,65535
    a3d8:	b00b883a 	mov	r5,r22
    a3dc:	000a9e40 	call	a9e4 <__umodsi3>
    a3e0:	b809883a 	mov	r4,r23
    a3e4:	b00b883a 	mov	r5,r22
    a3e8:	1021883a 	mov	r16,r2
    a3ec:	000a9dc0 	call	a9dc <__udivsi3>
    a3f0:	8020943a 	slli	r16,r16,16
    a3f4:	a00cd43a 	srli	r6,r20,16
    a3f8:	1545383a 	mul	r2,r2,r21
    a3fc:	8188b03a 	or	r4,r16,r6
    a400:	2080042e 	bgeu	r4,r2,a414 <__umoddi3+0xe4>
    a404:	24c9883a 	add	r4,r4,r19
    a408:	24c00236 	bltu	r4,r19,a414 <__umoddi3+0xe4>
    a40c:	2080012e 	bgeu	r4,r2,a414 <__umoddi3+0xe4>
    a410:	24c9883a 	add	r4,r4,r19
    a414:	20a3c83a 	sub	r17,r4,r2
    a418:	8809883a 	mov	r4,r17
    a41c:	b00b883a 	mov	r5,r22
    a420:	000a9e40 	call	a9e4 <__umodsi3>
    a424:	8809883a 	mov	r4,r17
    a428:	b00b883a 	mov	r5,r22
    a42c:	1021883a 	mov	r16,r2
    a430:	000a9dc0 	call	a9dc <__udivsi3>
    a434:	8006943a 	slli	r3,r16,16
    a438:	1545383a 	mul	r2,r2,r21
    a43c:	a13fffcc 	andi	r4,r20,65535
    a440:	1906b03a 	or	r3,r3,r4
    a444:	1880532e 	bgeu	r3,r2,a594 <__umoddi3+0x264>
    a448:	00004e06 	br	a584 <__umoddi3+0x254>
    a44c:	29c05536 	bltu	r5,r7,a5a4 <__umoddi3+0x274>
    a450:	00bfffd4 	movui	r2,65535
    a454:	11c0612e 	bgeu	r2,r7,a5dc <__umoddi3+0x2ac>
    a458:	00804034 	movhi	r2,256
    a45c:	10bfffc4 	addi	r2,r2,-1
    a460:	11c0f82e 	bgeu	r2,r7,a844 <__umoddi3+0x514>
    a464:	01400604 	movi	r5,24
    a468:	282b883a 	mov	r21,r5
    a46c:	394ad83a 	srl	r5,r7,r5
    a470:	00c00074 	movhi	r3,1
    a474:	18fecb04 	addi	r3,r3,-1236
    a478:	194b883a 	add	r5,r3,r5
    a47c:	28800003 	ldbu	r2,0(r5)
    a480:	00c00804 	movi	r3,32
    a484:	156b883a 	add	r21,r2,r21
    a488:	1d69c83a 	sub	r20,r3,r21
    a48c:	a000631e 	bne	r20,zero,a61c <__umoddi3+0x2ec>
    a490:	3c400136 	bltu	r7,r17,a498 <__umoddi3+0x168>
    a494:	81810436 	bltu	r16,r6,a8a8 <__umoddi3+0x578>
    a498:	8185c83a 	sub	r2,r16,r6
    a49c:	89e3c83a 	sub	r17,r17,r7
    a4a0:	8087803a 	cmpltu	r3,r16,r2
    a4a4:	88efc83a 	sub	r23,r17,r3
    a4a8:	b807883a 	mov	r3,r23
    a4ac:	00003f06 	br	a5ac <__umoddi3+0x27c>
    a4b0:	3000041e 	bne	r6,zero,a4c4 <__umoddi3+0x194>
    a4b4:	01000044 	movi	r4,1
    a4b8:	000b883a 	mov	r5,zero
    a4bc:	000a9dc0 	call	a9dc <__udivsi3>
    a4c0:	1027883a 	mov	r19,r2
    a4c4:	00bfffd4 	movui	r2,65535
    a4c8:	14c04f2e 	bgeu	r2,r19,a608 <__umoddi3+0x2d8>
    a4cc:	00804034 	movhi	r2,256
    a4d0:	10bfffc4 	addi	r2,r2,-1
    a4d4:	14c0e42e 	bgeu	r2,r19,a868 <__umoddi3+0x538>
    a4d8:	00800604 	movi	r2,24
    a4dc:	1007883a 	mov	r3,r2
    a4e0:	9884d83a 	srl	r2,r19,r2
    a4e4:	01000074 	movhi	r4,1
    a4e8:	213ecb04 	addi	r4,r4,-1236
    a4ec:	2085883a 	add	r2,r4,r2
    a4f0:	11000003 	ldbu	r4,0(r2)
    a4f4:	00800804 	movi	r2,32
    a4f8:	20c7883a 	add	r3,r4,r3
    a4fc:	10c5c83a 	sub	r2,r2,r3
    a500:	10009a1e 	bne	r2,zero,a76c <__umoddi3+0x43c>
    a504:	982cd43a 	srli	r22,r19,16
    a508:	8ce3c83a 	sub	r17,r17,r19
    a50c:	9c3fffcc 	andi	r16,r19,65535
    a510:	0025883a 	mov	r18,zero
    a514:	8809883a 	mov	r4,r17
    a518:	b00b883a 	mov	r5,r22
    a51c:	000a9e40 	call	a9e4 <__umodsi3>
    a520:	8809883a 	mov	r4,r17
    a524:	b00b883a 	mov	r5,r22
    a528:	102b883a 	mov	r21,r2
    a52c:	000a9dc0 	call	a9dc <__udivsi3>
    a530:	a806943a 	slli	r3,r21,16
    a534:	a008d43a 	srli	r4,r20,16
    a538:	1405383a 	mul	r2,r2,r16
    a53c:	190cb03a 	or	r6,r3,r4
    a540:	3080032e 	bgeu	r6,r2,a550 <__umoddi3+0x220>
    a544:	34cd883a 	add	r6,r6,r19
    a548:	34c00136 	bltu	r6,r19,a550 <__umoddi3+0x220>
    a54c:	3080d436 	bltu	r6,r2,a8a0 <__umoddi3+0x570>
    a550:	30abc83a 	sub	r21,r6,r2
    a554:	a809883a 	mov	r4,r21
    a558:	b00b883a 	mov	r5,r22
    a55c:	000a9e40 	call	a9e4 <__umodsi3>
    a560:	1023883a 	mov	r17,r2
    a564:	a809883a 	mov	r4,r21
    a568:	b00b883a 	mov	r5,r22
    a56c:	000a9dc0 	call	a9dc <__udivsi3>
    a570:	8822943a 	slli	r17,r17,16
    a574:	1405383a 	mul	r2,r2,r16
    a578:	a13fffcc 	andi	r4,r20,65535
    a57c:	8906b03a 	or	r3,r17,r4
    a580:	1880042e 	bgeu	r3,r2,a594 <__umoddi3+0x264>
    a584:	1cc7883a 	add	r3,r3,r19
    a588:	1cc00236 	bltu	r3,r19,a594 <__umoddi3+0x264>
    a58c:	1880012e 	bgeu	r3,r2,a594 <__umoddi3+0x264>
    a590:	1cc7883a 	add	r3,r3,r19
    a594:	1887c83a 	sub	r3,r3,r2
    a598:	1c84d83a 	srl	r2,r3,r18
    a59c:	0007883a 	mov	r3,zero
    a5a0:	00000206 	br	a5ac <__umoddi3+0x27c>
    a5a4:	2005883a 	mov	r2,r4
    a5a8:	2807883a 	mov	r3,r5
    a5ac:	dfc00b17 	ldw	ra,44(sp)
    a5b0:	df000a17 	ldw	fp,40(sp)
    a5b4:	ddc00917 	ldw	r23,36(sp)
    a5b8:	dd800817 	ldw	r22,32(sp)
    a5bc:	dd400717 	ldw	r21,28(sp)
    a5c0:	dd000617 	ldw	r20,24(sp)
    a5c4:	dcc00517 	ldw	r19,20(sp)
    a5c8:	dc800417 	ldw	r18,16(sp)
    a5cc:	dc400317 	ldw	r17,12(sp)
    a5d0:	dc000217 	ldw	r16,8(sp)
    a5d4:	dec00c04 	addi	sp,sp,48
    a5d8:	f800283a 	ret
    a5dc:	00803fc4 	movi	r2,255
    a5e0:	11c0952e 	bgeu	r2,r7,a838 <__umoddi3+0x508>
    a5e4:	01400204 	movi	r5,8
    a5e8:	282b883a 	mov	r21,r5
    a5ec:	003f9f06 	br	a46c <__umoddi3+0x13c>
    a5f0:	00804034 	movhi	r2,256
    a5f4:	10bfffc4 	addi	r2,r2,-1
    a5f8:	1180952e 	bgeu	r2,r6,a850 <__umoddi3+0x520>
    a5fc:	01400604 	movi	r5,24
    a600:	2805883a 	mov	r2,r5
    a604:	003f6206 	br	a390 <__umoddi3+0x60>
    a608:	00803fc4 	movi	r2,255
    a60c:	14c0932e 	bgeu	r2,r19,a85c <__umoddi3+0x52c>
    a610:	00800204 	movi	r2,8
    a614:	1007883a 	mov	r3,r2
    a618:	003fb106 	br	a4e0 <__umoddi3+0x1b0>
    a61c:	3548d83a 	srl	r4,r6,r21
    a620:	3d0e983a 	sll	r7,r7,r20
    a624:	8d10983a 	sll	r8,r17,r20
    a628:	8d6cd83a 	srl	r22,r17,r21
    a62c:	3922b03a 	or	r17,r7,r4
    a630:	882ed43a 	srli	r23,r17,16
    a634:	8564d83a 	srl	r18,r16,r21
    a638:	b009883a 	mov	r4,r22
    a63c:	b80b883a 	mov	r5,r23
    a640:	44a4b03a 	or	r18,r8,r18
    a644:	3526983a 	sll	r19,r6,r20
    a648:	000a9e40 	call	a9e4 <__umodsi3>
    a64c:	b009883a 	mov	r4,r22
    a650:	b80b883a 	mov	r5,r23
    a654:	1039883a 	mov	fp,r2
    a658:	000a9dc0 	call	a9dc <__udivsi3>
    a65c:	102d883a 	mov	r22,r2
    a660:	8a3fffcc 	andi	r8,r17,65535
    a664:	e004943a 	slli	r2,fp,16
    a668:	900cd43a 	srli	r6,r18,16
    a66c:	b239383a 	mul	fp,r22,r8
    a670:	8520983a 	sll	r16,r16,r20
    a674:	118ab03a 	or	r5,r2,r6
    a678:	2f00042e 	bgeu	r5,fp,a68c <__umoddi3+0x35c>
    a67c:	2c4b883a 	add	r5,r5,r17
    a680:	b0bfffc4 	addi	r2,r22,-1
    a684:	2c40822e 	bgeu	r5,r17,a890 <__umoddi3+0x560>
    a688:	102d883a 	mov	r22,r2
    a68c:	2f39c83a 	sub	fp,r5,fp
    a690:	e009883a 	mov	r4,fp
    a694:	b80b883a 	mov	r5,r23
    a698:	da000115 	stw	r8,4(sp)
    a69c:	000a9e40 	call	a9e4 <__umodsi3>
    a6a0:	e009883a 	mov	r4,fp
    a6a4:	b80b883a 	mov	r5,r23
    a6a8:	d8800015 	stw	r2,0(sp)
    a6ac:	000a9dc0 	call	a9dc <__udivsi3>
    a6b0:	d9800017 	ldw	r6,0(sp)
    a6b4:	da000117 	ldw	r8,4(sp)
    a6b8:	94bfffcc 	andi	r18,r18,65535
    a6bc:	300c943a 	slli	r6,r6,16
    a6c0:	1209383a 	mul	r4,r2,r8
    a6c4:	3490b03a 	or	r8,r6,r18
    a6c8:	4100042e 	bgeu	r8,r4,a6dc <__umoddi3+0x3ac>
    a6cc:	4451883a 	add	r8,r8,r17
    a6d0:	10ffffc4 	addi	r3,r2,-1
    a6d4:	44406a2e 	bgeu	r8,r17,a880 <__umoddi3+0x550>
    a6d8:	1805883a 	mov	r2,r3
    a6dc:	b012943a 	slli	r9,r22,16
    a6e0:	9abfffcc 	andi	r10,r19,65535
    a6e4:	980ed43a 	srli	r7,r19,16
    a6e8:	124ab03a 	or	r5,r2,r9
    a6ec:	2a7fffcc 	andi	r9,r5,65535
    a6f0:	280ad43a 	srli	r5,r5,16
    a6f4:	4a8d383a 	mul	r6,r9,r10
    a6f8:	49d3383a 	mul	r9,r9,r7
    a6fc:	2a95383a 	mul	r10,r5,r10
    a700:	3004d43a 	srli	r2,r6,16
    a704:	4111c83a 	sub	r8,r8,r4
    a708:	5253883a 	add	r9,r10,r9
    a70c:	4893883a 	add	r9,r9,r2
    a710:	29cb383a 	mul	r5,r5,r7
    a714:	4a80022e 	bgeu	r9,r10,a720 <__umoddi3+0x3f0>
    a718:	00800074 	movhi	r2,1
    a71c:	288b883a 	add	r5,r5,r2
    a720:	4808d43a 	srli	r4,r9,16
    a724:	4812943a 	slli	r9,r9,16
    a728:	31bfffcc 	andi	r6,r6,65535
    a72c:	290b883a 	add	r5,r5,r4
    a730:	498d883a 	add	r6,r9,r6
    a734:	41403a36 	bltu	r8,r5,a820 <__umoddi3+0x4f0>
    a738:	41405d26 	beq	r8,r5,a8b0 <__umoddi3+0x580>
    a73c:	4149c83a 	sub	r4,r8,r5
    a740:	300f883a 	mov	r7,r6
    a744:	81cfc83a 	sub	r7,r16,r7
    a748:	81c7803a 	cmpltu	r3,r16,r7
    a74c:	20c7c83a 	sub	r3,r4,r3
    a750:	1d44983a 	sll	r2,r3,r21
    a754:	3d0ed83a 	srl	r7,r7,r20
    a758:	1d06d83a 	srl	r3,r3,r20
    a75c:	11c4b03a 	or	r2,r2,r7
    a760:	003f9206 	br	a5ac <__umoddi3+0x27c>
    a764:	0025883a 	mov	r18,zero
    a768:	003f1806 	br	a3cc <__umoddi3+0x9c>
    a76c:	98a6983a 	sll	r19,r19,r2
    a770:	88e8d83a 	srl	r20,r17,r3
    a774:	80c6d83a 	srl	r3,r16,r3
    a778:	982cd43a 	srli	r22,r19,16
    a77c:	88a2983a 	sll	r17,r17,r2
    a780:	a009883a 	mov	r4,r20
    a784:	b00b883a 	mov	r5,r22
    a788:	88eab03a 	or	r21,r17,r3
    a78c:	1025883a 	mov	r18,r2
    a790:	000a9e40 	call	a9e4 <__umodsi3>
    a794:	a009883a 	mov	r4,r20
    a798:	b00b883a 	mov	r5,r22
    a79c:	1023883a 	mov	r17,r2
    a7a0:	000a9dc0 	call	a9dc <__udivsi3>
    a7a4:	9f3fffcc 	andi	fp,r19,65535
    a7a8:	8822943a 	slli	r17,r17,16
    a7ac:	a80ad43a 	srli	r5,r21,16
    a7b0:	1705383a 	mul	r2,r2,fp
    a7b4:	84a8983a 	sll	r20,r16,r18
    a7b8:	8948b03a 	or	r4,r17,r5
    a7bc:	2080042e 	bgeu	r4,r2,a7d0 <__umoddi3+0x4a0>
    a7c0:	24c9883a 	add	r4,r4,r19
    a7c4:	24c00236 	bltu	r4,r19,a7d0 <__umoddi3+0x4a0>
    a7c8:	2080012e 	bgeu	r4,r2,a7d0 <__umoddi3+0x4a0>
    a7cc:	24c9883a 	add	r4,r4,r19
    a7d0:	20afc83a 	sub	r23,r4,r2
    a7d4:	b809883a 	mov	r4,r23
    a7d8:	b00b883a 	mov	r5,r22
    a7dc:	000a9e40 	call	a9e4 <__umodsi3>
    a7e0:	1023883a 	mov	r17,r2
    a7e4:	b809883a 	mov	r4,r23
    a7e8:	b00b883a 	mov	r5,r22
    a7ec:	000a9dc0 	call	a9dc <__udivsi3>
    a7f0:	8822943a 	slli	r17,r17,16
    a7f4:	1705383a 	mul	r2,r2,fp
    a7f8:	a93fffcc 	andi	r4,r21,65535
    a7fc:	8908b03a 	or	r4,r17,r4
    a800:	2080042e 	bgeu	r4,r2,a814 <__umoddi3+0x4e4>
    a804:	24c9883a 	add	r4,r4,r19
    a808:	24c00236 	bltu	r4,r19,a814 <__umoddi3+0x4e4>
    a80c:	2080012e 	bgeu	r4,r2,a814 <__umoddi3+0x4e4>
    a810:	24c9883a 	add	r4,r4,r19
    a814:	20a3c83a 	sub	r17,r4,r2
    a818:	e021883a 	mov	r16,fp
    a81c:	003f3d06 	br	a514 <__umoddi3+0x1e4>
    a820:	34cfc83a 	sub	r7,r6,r19
    a824:	2c4bc83a 	sub	r5,r5,r17
    a828:	31cd803a 	cmpltu	r6,r6,r7
    a82c:	298dc83a 	sub	r6,r5,r6
    a830:	4189c83a 	sub	r4,r8,r6
    a834:	003fc306 	br	a744 <__umoddi3+0x414>
    a838:	000b883a 	mov	r5,zero
    a83c:	002b883a 	mov	r21,zero
    a840:	003f0a06 	br	a46c <__umoddi3+0x13c>
    a844:	01400404 	movi	r5,16
    a848:	282b883a 	mov	r21,r5
    a84c:	003f0706 	br	a46c <__umoddi3+0x13c>
    a850:	01400404 	movi	r5,16
    a854:	2805883a 	mov	r2,r5
    a858:	003ecd06 	br	a390 <__umoddi3+0x60>
    a85c:	0005883a 	mov	r2,zero
    a860:	0007883a 	mov	r3,zero
    a864:	003f1e06 	br	a4e0 <__umoddi3+0x1b0>
    a868:	00800404 	movi	r2,16
    a86c:	1007883a 	mov	r3,r2
    a870:	003f1b06 	br	a4e0 <__umoddi3+0x1b0>
    a874:	000b883a 	mov	r5,zero
    a878:	0005883a 	mov	r2,zero
    a87c:	003ec406 	br	a390 <__umoddi3+0x60>
    a880:	413f952e 	bgeu	r8,r4,a6d8 <__umoddi3+0x3a8>
    a884:	10bfff84 	addi	r2,r2,-2
    a888:	4451883a 	add	r8,r8,r17
    a88c:	003f9306 	br	a6dc <__umoddi3+0x3ac>
    a890:	2f3f7d2e 	bgeu	r5,fp,a688 <__umoddi3+0x358>
    a894:	b5bfff84 	addi	r22,r22,-2
    a898:	2c4b883a 	add	r5,r5,r17
    a89c:	003f7b06 	br	a68c <__umoddi3+0x35c>
    a8a0:	34cd883a 	add	r6,r6,r19
    a8a4:	003f2a06 	br	a550 <__umoddi3+0x220>
    a8a8:	8005883a 	mov	r2,r16
    a8ac:	003efe06 	br	a4a8 <__umoddi3+0x178>
    a8b0:	81bfdb36 	bltu	r16,r6,a820 <__umoddi3+0x4f0>
    a8b4:	300f883a 	mov	r7,r6
    a8b8:	0009883a 	mov	r4,zero
    a8bc:	003fa106 	br	a744 <__umoddi3+0x414>

0000a8c0 <udivmodsi4>:
    a8c0:	2900182e 	bgeu	r5,r4,a924 <udivmodsi4+0x64>
    a8c4:	28001716 	blt	r5,zero,a924 <udivmodsi4+0x64>
    a8c8:	00800804 	movi	r2,32
    a8cc:	00c00044 	movi	r3,1
    a8d0:	00000206 	br	a8dc <udivmodsi4+0x1c>
    a8d4:	10001126 	beq	r2,zero,a91c <udivmodsi4+0x5c>
    a8d8:	28000516 	blt	r5,zero,a8f0 <udivmodsi4+0x30>
    a8dc:	294b883a 	add	r5,r5,r5
    a8e0:	10bfffc4 	addi	r2,r2,-1
    a8e4:	18c7883a 	add	r3,r3,r3
    a8e8:	293ffa36 	bltu	r5,r4,a8d4 <udivmodsi4+0x14>
    a8ec:	18000b26 	beq	r3,zero,a91c <udivmodsi4+0x5c>
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	21400236 	bltu	r4,r5,a900 <udivmodsi4+0x40>
    a8f8:	2149c83a 	sub	r4,r4,r5
    a8fc:	10c4b03a 	or	r2,r2,r3
    a900:	1806d07a 	srli	r3,r3,1
    a904:	280ad07a 	srli	r5,r5,1
    a908:	183ffa1e 	bne	r3,zero,a8f4 <udivmodsi4+0x34>
    a90c:	3000011e 	bne	r6,zero,a914 <udivmodsi4+0x54>
    a910:	f800283a 	ret
    a914:	2005883a 	mov	r2,r4
    a918:	f800283a 	ret
    a91c:	0005883a 	mov	r2,zero
    a920:	003ffa06 	br	a90c <udivmodsi4+0x4c>
    a924:	00c00044 	movi	r3,1
    a928:	003ff106 	br	a8f0 <udivmodsi4+0x30>

0000a92c <__divsi3>:
    a92c:	defffe04 	addi	sp,sp,-8
    a930:	dfc00115 	stw	ra,4(sp)
    a934:	dc000015 	stw	r16,0(sp)
    a938:	20000b16 	blt	r4,zero,a968 <__divsi3+0x3c>
    a93c:	0021883a 	mov	r16,zero
    a940:	28000c16 	blt	r5,zero,a974 <__divsi3+0x48>
    a944:	000d883a 	mov	r6,zero
    a948:	000a8c00 	call	a8c0 <udivmodsi4>
    a94c:	0407c83a 	sub	r3,zero,r16
    a950:	1884f03a 	xor	r2,r3,r2
    a954:	1405883a 	add	r2,r2,r16
    a958:	dfc00117 	ldw	ra,4(sp)
    a95c:	dc000017 	ldw	r16,0(sp)
    a960:	dec00204 	addi	sp,sp,8
    a964:	f800283a 	ret
    a968:	0109c83a 	sub	r4,zero,r4
    a96c:	04000044 	movi	r16,1
    a970:	283ff40e 	bge	r5,zero,a944 <__divsi3+0x18>
    a974:	014bc83a 	sub	r5,zero,r5
    a978:	8400005c 	xori	r16,r16,1
    a97c:	003ff106 	br	a944 <__divsi3+0x18>

0000a980 <__modsi3>:
    a980:	defffd04 	addi	sp,sp,-12
    a984:	dfc00215 	stw	ra,8(sp)
    a988:	dc400115 	stw	r17,4(sp)
    a98c:	dc000015 	stw	r16,0(sp)
    a990:	20000c16 	blt	r4,zero,a9c4 <__modsi3+0x44>
    a994:	0023883a 	mov	r17,zero
    a998:	0021883a 	mov	r16,zero
    a99c:	28000d16 	blt	r5,zero,a9d4 <__modsi3+0x54>
    a9a0:	01800044 	movi	r6,1
    a9a4:	000a8c00 	call	a8c0 <udivmodsi4>
    a9a8:	1404f03a 	xor	r2,r2,r16
    a9ac:	8885883a 	add	r2,r17,r2
    a9b0:	dfc00217 	ldw	ra,8(sp)
    a9b4:	dc400117 	ldw	r17,4(sp)
    a9b8:	dc000017 	ldw	r16,0(sp)
    a9bc:	dec00304 	addi	sp,sp,12
    a9c0:	f800283a 	ret
    a9c4:	0109c83a 	sub	r4,zero,r4
    a9c8:	04400044 	movi	r17,1
    a9cc:	043fffc4 	movi	r16,-1
    a9d0:	283ff30e 	bge	r5,zero,a9a0 <__modsi3+0x20>
    a9d4:	014bc83a 	sub	r5,zero,r5
    a9d8:	003ff106 	br	a9a0 <__modsi3+0x20>

0000a9dc <__udivsi3>:
    a9dc:	000d883a 	mov	r6,zero
    a9e0:	000a8c01 	jmpi	a8c0 <udivmodsi4>

0000a9e4 <__umodsi3>:
    a9e4:	01800044 	movi	r6,1
    a9e8:	000a8c01 	jmpi	a8c0 <udivmodsi4>

0000a9ec <__adddf3>:
    a9ec:	02000434 	movhi	r8,16
    a9f0:	423fffc4 	addi	r8,r8,-1
    a9f4:	defffb04 	addi	sp,sp,-20
    a9f8:	2a12703a 	and	r9,r5,r8
    a9fc:	2806d7fa 	srli	r3,r5,31
    aa00:	3a10703a 	and	r8,r7,r8
    aa04:	3804d53a 	srli	r2,r7,20
    aa08:	3014d77a 	srli	r10,r6,29
    aa0c:	dc000015 	stw	r16,0(sp)
    aa10:	481290fa 	slli	r9,r9,3
    aa14:	2820d53a 	srli	r16,r5,20
    aa18:	401090fa 	slli	r8,r8,3
    aa1c:	200ad77a 	srli	r5,r4,29
    aa20:	380ed7fa 	srli	r7,r7,31
    aa24:	dc800215 	stw	r18,8(sp)
    aa28:	dc400115 	stw	r17,4(sp)
    aa2c:	dfc00415 	stw	ra,16(sp)
    aa30:	dcc00315 	stw	r19,12(sp)
    aa34:	1c803fcc 	andi	r18,r3,255
    aa38:	8401ffcc 	andi	r16,r16,2047
    aa3c:	494ab03a 	or	r5,r9,r5
    aa40:	202290fa 	slli	r17,r4,3
    aa44:	1081ffcc 	andi	r2,r2,2047
    aa48:	4290b03a 	or	r8,r8,r10
    aa4c:	300c90fa 	slli	r6,r6,3
    aa50:	91c07026 	beq	r18,r7,ac14 <__adddf3+0x228>
    aa54:	8087c83a 	sub	r3,r16,r2
    aa58:	00c0b30e 	bge	zero,r3,ad28 <__adddf3+0x33c>
    aa5c:	10002a1e 	bne	r2,zero,ab08 <__adddf3+0x11c>
    aa60:	4184b03a 	or	r2,r8,r6
    aa64:	1000991e 	bne	r2,zero,accc <__adddf3+0x2e0>
    aa68:	888001cc 	andi	r2,r17,7
    aa6c:	10005b26 	beq	r2,zero,abdc <__adddf3+0x1f0>
    aa70:	88c003cc 	andi	r3,r17,15
    aa74:	00800104 	movi	r2,4
    aa78:	18805826 	beq	r3,r2,abdc <__adddf3+0x1f0>
    aa7c:	89800104 	addi	r6,r17,4
    aa80:	3463803a 	cmpltu	r17,r6,r17
    aa84:	2c4b883a 	add	r5,r5,r17
    aa88:	2880202c 	andhi	r2,r5,128
    aa8c:	9007883a 	mov	r3,r18
    aa90:	3023883a 	mov	r17,r6
    aa94:	10005426 	beq	r2,zero,abe8 <__adddf3+0x1fc>
    aa98:	84000044 	addi	r16,r16,1
    aa9c:	0081ffc4 	movi	r2,2047
    aaa0:	8080c126 	beq	r16,r2,ada8 <__adddf3+0x3bc>
    aaa4:	013fe034 	movhi	r4,65408
    aaa8:	213fffc4 	addi	r4,r4,-1
    aaac:	290a703a 	and	r5,r5,r4
    aab0:	2804977a 	slli	r2,r5,29
    aab4:	280a927a 	slli	r5,r5,9
    aab8:	8822d0fa 	srli	r17,r17,3
    aabc:	8401ffcc 	andi	r16,r16,2047
    aac0:	2808d33a 	srli	r4,r5,12
    aac4:	1444b03a 	or	r2,r2,r17
    aac8:	8401ffcc 	andi	r16,r16,2047
    aacc:	800a953a 	slli	r5,r16,20
    aad0:	18c03fcc 	andi	r3,r3,255
    aad4:	04000434 	movhi	r16,16
    aad8:	180697fa 	slli	r3,r3,31
    aadc:	843fffc4 	addi	r16,r16,-1
    aae0:	2420703a 	and	r16,r4,r16
    aae4:	8160b03a 	or	r16,r16,r5
    aae8:	80c6b03a 	or	r3,r16,r3
    aaec:	dfc00417 	ldw	ra,16(sp)
    aaf0:	dcc00317 	ldw	r19,12(sp)
    aaf4:	dc800217 	ldw	r18,8(sp)
    aaf8:	dc400117 	ldw	r17,4(sp)
    aafc:	dc000017 	ldw	r16,0(sp)
    ab00:	dec00504 	addi	sp,sp,20
    ab04:	f800283a 	ret
    ab08:	0081ffc4 	movi	r2,2047
    ab0c:	80bfd626 	beq	r16,r2,aa68 <__adddf3+0x7c>
    ab10:	42002034 	orhi	r8,r8,128
    ab14:	00800e04 	movi	r2,56
    ab18:	10c0a616 	blt	r2,r3,adb4 <__adddf3+0x3c8>
    ab1c:	008007c4 	movi	r2,31
    ab20:	10c0c916 	blt	r2,r3,ae48 <__adddf3+0x45c>
    ab24:	00800804 	movi	r2,32
    ab28:	10c5c83a 	sub	r2,r2,r3
    ab2c:	408e983a 	sll	r7,r8,r2
    ab30:	30c8d83a 	srl	r4,r6,r3
    ab34:	3084983a 	sll	r2,r6,r2
    ab38:	40c6d83a 	srl	r3,r8,r3
    ab3c:	390cb03a 	or	r6,r7,r4
    ab40:	1004c03a 	cmpne	r2,r2,zero
    ab44:	308cb03a 	or	r6,r6,r2
    ab48:	898dc83a 	sub	r6,r17,r6
    ab4c:	89a3803a 	cmpltu	r17,r17,r6
    ab50:	28cbc83a 	sub	r5,r5,r3
    ab54:	2c4bc83a 	sub	r5,r5,r17
    ab58:	3023883a 	mov	r17,r6
    ab5c:	2880202c 	andhi	r2,r5,128
    ab60:	10006d26 	beq	r2,zero,ad18 <__adddf3+0x32c>
    ab64:	04c02034 	movhi	r19,128
    ab68:	9cffffc4 	addi	r19,r19,-1
    ab6c:	2ce6703a 	and	r19,r5,r19
    ab70:	98007e26 	beq	r19,zero,ad6c <__adddf3+0x380>
    ab74:	9809883a 	mov	r4,r19
    ab78:	000cf880 	call	cf88 <__clzsi2>
    ab7c:	10fffe04 	addi	r3,r2,-8
    ab80:	010007c4 	movi	r4,31
    ab84:	20c07f16 	blt	r4,r3,ad84 <__adddf3+0x398>
    ab88:	01400a04 	movi	r5,40
    ab8c:	2885c83a 	sub	r2,r5,r2
    ab90:	888ad83a 	srl	r5,r17,r2
    ab94:	98e6983a 	sll	r19,r19,r3
    ab98:	88e2983a 	sll	r17,r17,r3
    ab9c:	2ce6b03a 	or	r19,r5,r19
    aba0:	1c007c16 	blt	r3,r16,ad94 <__adddf3+0x3a8>
    aba4:	1c21c83a 	sub	r16,r3,r16
    aba8:	81400044 	addi	r5,r16,1
    abac:	00c007c4 	movi	r3,31
    abb0:	19409816 	blt	r3,r5,ae14 <__adddf3+0x428>
    abb4:	1c21c83a 	sub	r16,r3,r16
    abb8:	8c08983a 	sll	r4,r17,r16
    abbc:	8946d83a 	srl	r3,r17,r5
    abc0:	9c20983a 	sll	r16,r19,r16
    abc4:	2008c03a 	cmpne	r4,r4,zero
    abc8:	994ad83a 	srl	r5,r19,r5
    abcc:	1c06b03a 	or	r3,r3,r16
    abd0:	1922b03a 	or	r17,r3,r4
    abd4:	0021883a 	mov	r16,zero
    abd8:	003fa306 	br	aa68 <__adddf3+0x7c>
    abdc:	2880202c 	andhi	r2,r5,128
    abe0:	9007883a 	mov	r3,r18
    abe4:	103fac1e 	bne	r2,zero,aa98 <__adddf3+0xac>
    abe8:	2804977a 	slli	r2,r5,29
    abec:	8822d0fa 	srli	r17,r17,3
    abf0:	0101ffc4 	movi	r4,2047
    abf4:	280ad0fa 	srli	r5,r5,3
    abf8:	1444b03a 	or	r2,r2,r17
    abfc:	81002c26 	beq	r16,r4,acb0 <__adddf3+0x2c4>
    ac00:	8120703a 	and	r16,r16,r4
    ac04:	01000434 	movhi	r4,16
    ac08:	213fffc4 	addi	r4,r4,-1
    ac0c:	2908703a 	and	r4,r5,r4
    ac10:	003fad06 	br	aac8 <__adddf3+0xdc>
    ac14:	8089c83a 	sub	r4,r16,r2
    ac18:	01006a0e 	bge	zero,r4,adc4 <__adddf3+0x3d8>
    ac1c:	10003326 	beq	r2,zero,acec <__adddf3+0x300>
    ac20:	0081ffc4 	movi	r2,2047
    ac24:	80bf9026 	beq	r16,r2,aa68 <__adddf3+0x7c>
    ac28:	42002034 	orhi	r8,r8,128
    ac2c:	00800e04 	movi	r2,56
    ac30:	1100b116 	blt	r2,r4,aef8 <__adddf3+0x50c>
    ac34:	008007c4 	movi	r2,31
    ac38:	1100e216 	blt	r2,r4,afc4 <__adddf3+0x5d8>
    ac3c:	00800804 	movi	r2,32
    ac40:	1105c83a 	sub	r2,r2,r4
    ac44:	4092983a 	sll	r9,r8,r2
    ac48:	310ed83a 	srl	r7,r6,r4
    ac4c:	3084983a 	sll	r2,r6,r2
    ac50:	4110d83a 	srl	r8,r8,r4
    ac54:	49ccb03a 	or	r6,r9,r7
    ac58:	1004c03a 	cmpne	r2,r2,zero
    ac5c:	308cb03a 	or	r6,r6,r2
    ac60:	344d883a 	add	r6,r6,r17
    ac64:	3463803a 	cmpltu	r17,r6,r17
    ac68:	414b883a 	add	r5,r8,r5
    ac6c:	2c4b883a 	add	r5,r5,r17
    ac70:	3023883a 	mov	r17,r6
    ac74:	2880202c 	andhi	r2,r5,128
    ac78:	10002726 	beq	r2,zero,ad18 <__adddf3+0x32c>
    ac7c:	84000044 	addi	r16,r16,1
    ac80:	0081ffc4 	movi	r2,2047
    ac84:	8080ae26 	beq	r16,r2,af40 <__adddf3+0x554>
    ac88:	00bfe034 	movhi	r2,65408
    ac8c:	10bfffc4 	addi	r2,r2,-1
    ac90:	288a703a 	and	r5,r5,r2
    ac94:	880cd07a 	srli	r6,r17,1
    ac98:	280897fa 	slli	r4,r5,31
    ac9c:	88c0004c 	andi	r3,r17,1
    aca0:	30e2b03a 	or	r17,r6,r3
    aca4:	280ad07a 	srli	r5,r5,1
    aca8:	8922b03a 	or	r17,r17,r4
    acac:	003f6e06 	br	aa68 <__adddf3+0x7c>
    acb0:	1148b03a 	or	r4,r2,r5
    acb4:	20003c26 	beq	r4,zero,ada8 <__adddf3+0x3bc>
    acb8:	29000234 	orhi	r4,r5,8
    acbc:	01400434 	movhi	r5,16
    acc0:	297fffc4 	addi	r5,r5,-1
    acc4:	2148703a 	and	r4,r4,r5
    acc8:	003f7f06 	br	aac8 <__adddf3+0xdc>
    accc:	18ffffc4 	addi	r3,r3,-1
    acd0:	18004d1e 	bne	r3,zero,ae08 <__adddf3+0x41c>
    acd4:	898dc83a 	sub	r6,r17,r6
    acd8:	89a3803a 	cmpltu	r17,r17,r6
    acdc:	2a0bc83a 	sub	r5,r5,r8
    ace0:	2c4bc83a 	sub	r5,r5,r17
    ace4:	3023883a 	mov	r17,r6
    ace8:	003f9c06 	br	ab5c <__adddf3+0x170>
    acec:	4184b03a 	or	r2,r8,r6
    acf0:	103f5d26 	beq	r2,zero,aa68 <__adddf3+0x7c>
    acf4:	213fffc4 	addi	r4,r4,-1
    acf8:	203fd926 	beq	r4,zero,ac60 <__adddf3+0x274>
    acfc:	0081ffc4 	movi	r2,2047
    ad00:	80bfca1e 	bne	r16,r2,ac2c <__adddf3+0x240>
    ad04:	003f5806 	br	aa68 <__adddf3+0x7c>
    ad08:	10c8b03a 	or	r4,r2,r3
    ad0c:	20008b26 	beq	r4,zero,af3c <__adddf3+0x550>
    ad10:	100b883a 	mov	r5,r2
    ad14:	1823883a 	mov	r17,r3
    ad18:	888001cc 	andi	r2,r17,7
    ad1c:	103f541e 	bne	r2,zero,aa70 <__adddf3+0x84>
    ad20:	9007883a 	mov	r3,r18
    ad24:	003fb006 	br	abe8 <__adddf3+0x1fc>
    ad28:	1800531e 	bne	r3,zero,ae78 <__adddf3+0x48c>
    ad2c:	80800044 	addi	r2,r16,1
    ad30:	1081ffcc 	andi	r2,r2,2047
    ad34:	00c00044 	movi	r3,1
    ad38:	1880990e 	bge	r3,r2,afa0 <__adddf3+0x5b4>
    ad3c:	8985c83a 	sub	r2,r17,r6
    ad40:	8887803a 	cmpltu	r3,r17,r2
    ad44:	2a27c83a 	sub	r19,r5,r8
    ad48:	98e7c83a 	sub	r19,r19,r3
    ad4c:	98c0202c 	andhi	r3,r19,128
    ad50:	18006226 	beq	r3,zero,aedc <__adddf3+0x4f0>
    ad54:	3463c83a 	sub	r17,r6,r17
    ad58:	4151c83a 	sub	r8,r8,r5
    ad5c:	344d803a 	cmpltu	r6,r6,r17
    ad60:	41a7c83a 	sub	r19,r8,r6
    ad64:	3825883a 	mov	r18,r7
    ad68:	983f821e 	bne	r19,zero,ab74 <__adddf3+0x188>
    ad6c:	8809883a 	mov	r4,r17
    ad70:	000cf880 	call	cf88 <__clzsi2>
    ad74:	10800804 	addi	r2,r2,32
    ad78:	10fffe04 	addi	r3,r2,-8
    ad7c:	010007c4 	movi	r4,31
    ad80:	20ff810e 	bge	r4,r3,ab88 <__adddf3+0x19c>
    ad84:	14fff604 	addi	r19,r2,-40
    ad88:	8ce6983a 	sll	r19,r17,r19
    ad8c:	0023883a 	mov	r17,zero
    ad90:	1c3f840e 	bge	r3,r16,aba4 <__adddf3+0x1b8>
    ad94:	017fe034 	movhi	r5,65408
    ad98:	297fffc4 	addi	r5,r5,-1
    ad9c:	80e1c83a 	sub	r16,r16,r3
    ada0:	994a703a 	and	r5,r19,r5
    ada4:	003f3006 	br	aa68 <__adddf3+0x7c>
    ada8:	0009883a 	mov	r4,zero
    adac:	0005883a 	mov	r2,zero
    adb0:	003f4506 	br	aac8 <__adddf3+0xdc>
    adb4:	418cb03a 	or	r6,r8,r6
    adb8:	300cc03a 	cmpne	r6,r6,zero
    adbc:	0007883a 	mov	r3,zero
    adc0:	003f6106 	br	ab48 <__adddf3+0x15c>
    adc4:	2000921e 	bne	r4,zero,b010 <__adddf3+0x624>
    adc8:	80800044 	addi	r2,r16,1
    adcc:	11c1ffcc 	andi	r7,r2,2047
    add0:	01000044 	movi	r4,1
    add4:	21c0610e 	bge	r4,r7,af5c <__adddf3+0x570>
    add8:	0101ffc4 	movi	r4,2047
    addc:	1100a326 	beq	r2,r4,b06c <__adddf3+0x680>
    ade0:	344d883a 	add	r6,r6,r17
    ade4:	3463803a 	cmpltu	r17,r6,r17
    ade8:	414b883a 	add	r5,r8,r5
    adec:	2c4b883a 	add	r5,r5,r17
    adf0:	282297fa 	slli	r17,r5,31
    adf4:	300cd07a 	srli	r6,r6,1
    adf8:	280ad07a 	srli	r5,r5,1
    adfc:	1021883a 	mov	r16,r2
    ae00:	89a2b03a 	or	r17,r17,r6
    ae04:	003f1806 	br	aa68 <__adddf3+0x7c>
    ae08:	0081ffc4 	movi	r2,2047
    ae0c:	80bf411e 	bne	r16,r2,ab14 <__adddf3+0x128>
    ae10:	003f1506 	br	aa68 <__adddf3+0x7c>
    ae14:	80bff844 	addi	r2,r16,-31
    ae18:	00c00804 	movi	r3,32
    ae1c:	9884d83a 	srl	r2,r19,r2
    ae20:	28c04a26 	beq	r5,r3,af4c <__adddf3+0x560>
    ae24:	00c00fc4 	movi	r3,63
    ae28:	1c21c83a 	sub	r16,r3,r16
    ae2c:	9c26983a 	sll	r19,r19,r16
    ae30:	9c62b03a 	or	r17,r19,r17
    ae34:	8822c03a 	cmpne	r17,r17,zero
    ae38:	88a2b03a 	or	r17,r17,r2
    ae3c:	000b883a 	mov	r5,zero
    ae40:	0021883a 	mov	r16,zero
    ae44:	003fb406 	br	ad18 <__adddf3+0x32c>
    ae48:	18bff804 	addi	r2,r3,-32
    ae4c:	01000804 	movi	r4,32
    ae50:	4084d83a 	srl	r2,r8,r2
    ae54:	19003f26 	beq	r3,r4,af54 <__adddf3+0x568>
    ae58:	01001004 	movi	r4,64
    ae5c:	20c7c83a 	sub	r3,r4,r3
    ae60:	40d0983a 	sll	r8,r8,r3
    ae64:	418cb03a 	or	r6,r8,r6
    ae68:	300cc03a 	cmpne	r6,r6,zero
    ae6c:	308cb03a 	or	r6,r6,r2
    ae70:	0007883a 	mov	r3,zero
    ae74:	003f3406 	br	ab48 <__adddf3+0x15c>
    ae78:	80002326 	beq	r16,zero,af08 <__adddf3+0x51c>
    ae7c:	0101ffc4 	movi	r4,2047
    ae80:	11005e26 	beq	r2,r4,affc <__adddf3+0x610>
    ae84:	00c7c83a 	sub	r3,zero,r3
    ae88:	29402034 	orhi	r5,r5,128
    ae8c:	01000e04 	movi	r4,56
    ae90:	20c07216 	blt	r4,r3,b05c <__adddf3+0x670>
    ae94:	010007c4 	movi	r4,31
    ae98:	20c0ce16 	blt	r4,r3,b1d4 <__adddf3+0x7e8>
    ae9c:	01000804 	movi	r4,32
    aea0:	20c9c83a 	sub	r4,r4,r3
    aea4:	2914983a 	sll	r10,r5,r4
    aea8:	88d2d83a 	srl	r9,r17,r3
    aeac:	8908983a 	sll	r4,r17,r4
    aeb0:	28c6d83a 	srl	r3,r5,r3
    aeb4:	5262b03a 	or	r17,r10,r9
    aeb8:	2008c03a 	cmpne	r4,r4,zero
    aebc:	8922b03a 	or	r17,r17,r4
    aec0:	3463c83a 	sub	r17,r6,r17
    aec4:	40c7c83a 	sub	r3,r8,r3
    aec8:	344d803a 	cmpltu	r6,r6,r17
    aecc:	198bc83a 	sub	r5,r3,r6
    aed0:	1021883a 	mov	r16,r2
    aed4:	3825883a 	mov	r18,r7
    aed8:	003f2006 	br	ab5c <__adddf3+0x170>
    aedc:	9886b03a 	or	r3,r19,r2
    aee0:	1800141e 	bne	r3,zero,af34 <__adddf3+0x548>
    aee4:	0007883a 	mov	r3,zero
    aee8:	000b883a 	mov	r5,zero
    aeec:	0023883a 	mov	r17,zero
    aef0:	0021883a 	mov	r16,zero
    aef4:	003f3c06 	br	abe8 <__adddf3+0x1fc>
    aef8:	418cb03a 	or	r6,r8,r6
    aefc:	300cc03a 	cmpne	r6,r6,zero
    af00:	0011883a 	mov	r8,zero
    af04:	003f5606 	br	ac60 <__adddf3+0x274>
    af08:	2c48b03a 	or	r4,r5,r17
    af0c:	20003b26 	beq	r4,zero,affc <__adddf3+0x610>
    af10:	00c6303a 	nor	r3,zero,r3
    af14:	1800371e 	bne	r3,zero,aff4 <__adddf3+0x608>
    af18:	3463c83a 	sub	r17,r6,r17
    af1c:	414bc83a 	sub	r5,r8,r5
    af20:	344d803a 	cmpltu	r6,r6,r17
    af24:	298bc83a 	sub	r5,r5,r6
    af28:	1021883a 	mov	r16,r2
    af2c:	3825883a 	mov	r18,r7
    af30:	003f0a06 	br	ab5c <__adddf3+0x170>
    af34:	1023883a 	mov	r17,r2
    af38:	003f0d06 	br	ab70 <__adddf3+0x184>
    af3c:	0007883a 	mov	r3,zero
    af40:	000b883a 	mov	r5,zero
    af44:	0023883a 	mov	r17,zero
    af48:	003f2706 	br	abe8 <__adddf3+0x1fc>
    af4c:	0027883a 	mov	r19,zero
    af50:	003fb706 	br	ae30 <__adddf3+0x444>
    af54:	0011883a 	mov	r8,zero
    af58:	003fc206 	br	ae64 <__adddf3+0x478>
    af5c:	2c44b03a 	or	r2,r5,r17
    af60:	8000871e 	bne	r16,zero,b180 <__adddf3+0x794>
    af64:	1000b126 	beq	r2,zero,b22c <__adddf3+0x840>
    af68:	4184b03a 	or	r2,r8,r6
    af6c:	103ebe26 	beq	r2,zero,aa68 <__adddf3+0x7c>
    af70:	3445883a 	add	r2,r6,r17
    af74:	1463803a 	cmpltu	r17,r2,r17
    af78:	414b883a 	add	r5,r8,r5
    af7c:	2c4b883a 	add	r5,r5,r17
    af80:	28c0202c 	andhi	r3,r5,128
    af84:	1023883a 	mov	r17,r2
    af88:	183f6326 	beq	r3,zero,ad18 <__adddf3+0x32c>
    af8c:	00bfe034 	movhi	r2,65408
    af90:	10bfffc4 	addi	r2,r2,-1
    af94:	2021883a 	mov	r16,r4
    af98:	288a703a 	and	r5,r5,r2
    af9c:	003eb206 	br	aa68 <__adddf3+0x7c>
    afa0:	2c44b03a 	or	r2,r5,r17
    afa4:	8000251e 	bne	r16,zero,b03c <__adddf3+0x650>
    afa8:	10004b1e 	bne	r2,zero,b0d8 <__adddf3+0x6ec>
    afac:	4184b03a 	or	r2,r8,r6
    afb0:	103fe226 	beq	r2,zero,af3c <__adddf3+0x550>
    afb4:	400b883a 	mov	r5,r8
    afb8:	3023883a 	mov	r17,r6
    afbc:	3825883a 	mov	r18,r7
    afc0:	003ea906 	br	aa68 <__adddf3+0x7c>
    afc4:	20bff804 	addi	r2,r4,-32
    afc8:	01c00804 	movi	r7,32
    afcc:	4084d83a 	srl	r2,r8,r2
    afd0:	21c07e26 	beq	r4,r7,b1cc <__adddf3+0x7e0>
    afd4:	01c01004 	movi	r7,64
    afd8:	3909c83a 	sub	r4,r7,r4
    afdc:	4110983a 	sll	r8,r8,r4
    afe0:	418cb03a 	or	r6,r8,r6
    afe4:	300cc03a 	cmpne	r6,r6,zero
    afe8:	308cb03a 	or	r6,r6,r2
    afec:	0011883a 	mov	r8,zero
    aff0:	003f1b06 	br	ac60 <__adddf3+0x274>
    aff4:	0101ffc4 	movi	r4,2047
    aff8:	113fa41e 	bne	r2,r4,ae8c <__adddf3+0x4a0>
    affc:	400b883a 	mov	r5,r8
    b000:	3023883a 	mov	r17,r6
    b004:	1021883a 	mov	r16,r2
    b008:	3825883a 	mov	r18,r7
    b00c:	003e9606 	br	aa68 <__adddf3+0x7c>
    b010:	80001a1e 	bne	r16,zero,b07c <__adddf3+0x690>
    b014:	2c4eb03a 	or	r7,r5,r17
    b018:	38005526 	beq	r7,zero,b170 <__adddf3+0x784>
    b01c:	0108303a 	nor	r4,zero,r4
    b020:	2000511e 	bne	r4,zero,b168 <__adddf3+0x77c>
    b024:	89a3883a 	add	r17,r17,r6
    b028:	414b883a 	add	r5,r8,r5
    b02c:	898d803a 	cmpltu	r6,r17,r6
    b030:	298b883a 	add	r5,r5,r6
    b034:	1021883a 	mov	r16,r2
    b038:	003f0e06 	br	ac74 <__adddf3+0x288>
    b03c:	1000341e 	bne	r2,zero,b110 <__adddf3+0x724>
    b040:	4184b03a 	or	r2,r8,r6
    b044:	10006f26 	beq	r2,zero,b204 <__adddf3+0x818>
    b048:	400b883a 	mov	r5,r8
    b04c:	3023883a 	mov	r17,r6
    b050:	3825883a 	mov	r18,r7
    b054:	0401ffc4 	movi	r16,2047
    b058:	003e8306 	br	aa68 <__adddf3+0x7c>
    b05c:	2c62b03a 	or	r17,r5,r17
    b060:	8822c03a 	cmpne	r17,r17,zero
    b064:	0007883a 	mov	r3,zero
    b068:	003f9506 	br	aec0 <__adddf3+0x4d4>
    b06c:	1021883a 	mov	r16,r2
    b070:	000b883a 	mov	r5,zero
    b074:	0023883a 	mov	r17,zero
    b078:	003edb06 	br	abe8 <__adddf3+0x1fc>
    b07c:	01c1ffc4 	movi	r7,2047
    b080:	11c03b26 	beq	r2,r7,b170 <__adddf3+0x784>
    b084:	0109c83a 	sub	r4,zero,r4
    b088:	29402034 	orhi	r5,r5,128
    b08c:	01c00e04 	movi	r7,56
    b090:	39006216 	blt	r7,r4,b21c <__adddf3+0x830>
    b094:	01c007c4 	movi	r7,31
    b098:	39006b16 	blt	r7,r4,b248 <__adddf3+0x85c>
    b09c:	01c00804 	movi	r7,32
    b0a0:	390fc83a 	sub	r7,r7,r4
    b0a4:	29d4983a 	sll	r10,r5,r7
    b0a8:	8912d83a 	srl	r9,r17,r4
    b0ac:	89ce983a 	sll	r7,r17,r7
    b0b0:	2908d83a 	srl	r4,r5,r4
    b0b4:	5262b03a 	or	r17,r10,r9
    b0b8:	380ac03a 	cmpne	r5,r7,zero
    b0bc:	8962b03a 	or	r17,r17,r5
    b0c0:	89a3883a 	add	r17,r17,r6
    b0c4:	2211883a 	add	r8,r4,r8
    b0c8:	898d803a 	cmpltu	r6,r17,r6
    b0cc:	418b883a 	add	r5,r8,r6
    b0d0:	1021883a 	mov	r16,r2
    b0d4:	003ee706 	br	ac74 <__adddf3+0x288>
    b0d8:	4184b03a 	or	r2,r8,r6
    b0dc:	103e6226 	beq	r2,zero,aa68 <__adddf3+0x7c>
    b0e0:	8987c83a 	sub	r3,r17,r6
    b0e4:	88c9803a 	cmpltu	r4,r17,r3
    b0e8:	2a05c83a 	sub	r2,r5,r8
    b0ec:	1105c83a 	sub	r2,r2,r4
    b0f0:	1100202c 	andhi	r4,r2,128
    b0f4:	203f0426 	beq	r4,zero,ad08 <__adddf3+0x31c>
    b0f8:	3463c83a 	sub	r17,r6,r17
    b0fc:	414bc83a 	sub	r5,r8,r5
    b100:	344d803a 	cmpltu	r6,r6,r17
    b104:	298bc83a 	sub	r5,r5,r6
    b108:	3825883a 	mov	r18,r7
    b10c:	003e5606 	br	aa68 <__adddf3+0x7c>
    b110:	4184b03a 	or	r2,r8,r6
    b114:	10002b26 	beq	r2,zero,b1c4 <__adddf3+0x7d8>
    b118:	2804d0fa 	srli	r2,r5,3
    b11c:	8822d0fa 	srli	r17,r17,3
    b120:	280a977a 	slli	r5,r5,29
    b124:	10c0022c 	andhi	r3,r2,8
    b128:	2c62b03a 	or	r17,r5,r17
    b12c:	18000826 	beq	r3,zero,b150 <__adddf3+0x764>
    b130:	4008d0fa 	srli	r4,r8,3
    b134:	20c0022c 	andhi	r3,r4,8
    b138:	1800051e 	bne	r3,zero,b150 <__adddf3+0x764>
    b13c:	300cd0fa 	srli	r6,r6,3
    b140:	4010977a 	slli	r8,r8,29
    b144:	2005883a 	mov	r2,r4
    b148:	3825883a 	mov	r18,r7
    b14c:	41a2b03a 	or	r17,r8,r6
    b150:	880ad77a 	srli	r5,r17,29
    b154:	100490fa 	slli	r2,r2,3
    b158:	882290fa 	slli	r17,r17,3
    b15c:	0401ffc4 	movi	r16,2047
    b160:	288ab03a 	or	r5,r5,r2
    b164:	003e4006 	br	aa68 <__adddf3+0x7c>
    b168:	01c1ffc4 	movi	r7,2047
    b16c:	11ffc71e 	bne	r2,r7,b08c <__adddf3+0x6a0>
    b170:	400b883a 	mov	r5,r8
    b174:	3023883a 	mov	r17,r6
    b178:	1021883a 	mov	r16,r2
    b17c:	003e3a06 	br	aa68 <__adddf3+0x7c>
    b180:	10002d26 	beq	r2,zero,b238 <__adddf3+0x84c>
    b184:	4184b03a 	or	r2,r8,r6
    b188:	10000e26 	beq	r2,zero,b1c4 <__adddf3+0x7d8>
    b18c:	2804d0fa 	srli	r2,r5,3
    b190:	8822d0fa 	srli	r17,r17,3
    b194:	280a977a 	slli	r5,r5,29
    b198:	10c0022c 	andhi	r3,r2,8
    b19c:	2c62b03a 	or	r17,r5,r17
    b1a0:	183feb26 	beq	r3,zero,b150 <__adddf3+0x764>
    b1a4:	4008d0fa 	srli	r4,r8,3
    b1a8:	20c0022c 	andhi	r3,r4,8
    b1ac:	183fe81e 	bne	r3,zero,b150 <__adddf3+0x764>
    b1b0:	300cd0fa 	srli	r6,r6,3
    b1b4:	4010977a 	slli	r8,r8,29
    b1b8:	2005883a 	mov	r2,r4
    b1bc:	41a2b03a 	or	r17,r8,r6
    b1c0:	003fe306 	br	b150 <__adddf3+0x764>
    b1c4:	0401ffc4 	movi	r16,2047
    b1c8:	003e2706 	br	aa68 <__adddf3+0x7c>
    b1cc:	0011883a 	mov	r8,zero
    b1d0:	003f8306 	br	afe0 <__adddf3+0x5f4>
    b1d4:	193ff804 	addi	r4,r3,-32
    b1d8:	02400804 	movi	r9,32
    b1dc:	2908d83a 	srl	r4,r5,r4
    b1e0:	1a402526 	beq	r3,r9,b278 <__adddf3+0x88c>
    b1e4:	02401004 	movi	r9,64
    b1e8:	48c7c83a 	sub	r3,r9,r3
    b1ec:	28ca983a 	sll	r5,r5,r3
    b1f0:	2c62b03a 	or	r17,r5,r17
    b1f4:	8822c03a 	cmpne	r17,r17,zero
    b1f8:	8922b03a 	or	r17,r17,r4
    b1fc:	0007883a 	mov	r3,zero
    b200:	003f2f06 	br	aec0 <__adddf3+0x4d4>
    b204:	01402034 	movhi	r5,128
    b208:	0007883a 	mov	r3,zero
    b20c:	297fffc4 	addi	r5,r5,-1
    b210:	047ffe04 	movi	r17,-8
    b214:	0401ffc4 	movi	r16,2047
    b218:	003e7306 	br	abe8 <__adddf3+0x1fc>
    b21c:	2c62b03a 	or	r17,r5,r17
    b220:	8822c03a 	cmpne	r17,r17,zero
    b224:	0009883a 	mov	r4,zero
    b228:	003fa506 	br	b0c0 <__adddf3+0x6d4>
    b22c:	400b883a 	mov	r5,r8
    b230:	3023883a 	mov	r17,r6
    b234:	003e0c06 	br	aa68 <__adddf3+0x7c>
    b238:	400b883a 	mov	r5,r8
    b23c:	3023883a 	mov	r17,r6
    b240:	0401ffc4 	movi	r16,2047
    b244:	003e0806 	br	aa68 <__adddf3+0x7c>
    b248:	21fff804 	addi	r7,r4,-32
    b24c:	02400804 	movi	r9,32
    b250:	29ced83a 	srl	r7,r5,r7
    b254:	22400a26 	beq	r4,r9,b280 <__adddf3+0x894>
    b258:	02401004 	movi	r9,64
    b25c:	4909c83a 	sub	r4,r9,r4
    b260:	290a983a 	sll	r5,r5,r4
    b264:	2c62b03a 	or	r17,r5,r17
    b268:	8822c03a 	cmpne	r17,r17,zero
    b26c:	89e2b03a 	or	r17,r17,r7
    b270:	0009883a 	mov	r4,zero
    b274:	003f9206 	br	b0c0 <__adddf3+0x6d4>
    b278:	000b883a 	mov	r5,zero
    b27c:	003fdc06 	br	b1f0 <__adddf3+0x804>
    b280:	000b883a 	mov	r5,zero
    b284:	003ff706 	br	b264 <__adddf3+0x878>

0000b288 <__divdf3>:
    b288:	defff204 	addi	sp,sp,-56
    b28c:	dd000815 	stw	r20,32(sp)
    b290:	2828d53a 	srli	r20,r5,20
    b294:	dd800a15 	stw	r22,40(sp)
    b298:	282cd7fa 	srli	r22,r5,31
    b29c:	dc000415 	stw	r16,16(sp)
    b2a0:	04000434 	movhi	r16,16
    b2a4:	df000c15 	stw	fp,48(sp)
    b2a8:	dcc00715 	stw	r19,28(sp)
    b2ac:	dc800615 	stw	r18,24(sp)
    b2b0:	dc400515 	stw	r17,20(sp)
    b2b4:	843fffc4 	addi	r16,r16,-1
    b2b8:	dfc00d15 	stw	ra,52(sp)
    b2bc:	ddc00b15 	stw	r23,44(sp)
    b2c0:	dd400915 	stw	r21,36(sp)
    b2c4:	a501ffcc 	andi	r20,r20,2047
    b2c8:	2025883a 	mov	r18,r4
    b2cc:	2027883a 	mov	r19,r4
    b2d0:	2c22703a 	and	r17,r5,r16
    b2d4:	b7003fcc 	andi	fp,r22,255
    b2d8:	a0005e26 	beq	r20,zero,b454 <__divdf3+0x1cc>
    b2dc:	0081ffc4 	movi	r2,2047
    b2e0:	a0803526 	beq	r20,r2,b3b8 <__divdf3+0x130>
    b2e4:	8c000434 	orhi	r16,r17,16
    b2e8:	2004d77a 	srli	r2,r4,29
    b2ec:	802090fa 	slli	r16,r16,3
    b2f0:	202690fa 	slli	r19,r4,3
    b2f4:	a53f0044 	addi	r20,r20,-1023
    b2f8:	80a2b03a 	or	r17,r16,r2
    b2fc:	0025883a 	mov	r18,zero
    b300:	0011883a 	mov	r8,zero
    b304:	380ad53a 	srli	r5,r7,20
    b308:	382ed7fa 	srli	r23,r7,31
    b30c:	04000434 	movhi	r16,16
    b310:	843fffc4 	addi	r16,r16,-1
    b314:	2941ffcc 	andi	r5,r5,2047
    b318:	302b883a 	mov	r21,r6
    b31c:	3c20703a 	and	r16,r7,r16
    b320:	ba403fcc 	andi	r9,r23,255
    b324:	28006726 	beq	r5,zero,b4c4 <__divdf3+0x23c>
    b328:	0081ffc4 	movi	r2,2047
    b32c:	28805f26 	beq	r5,r2,b4ac <__divdf3+0x224>
    b330:	84000434 	orhi	r16,r16,16
    b334:	3004d77a 	srli	r2,r6,29
    b338:	802090fa 	slli	r16,r16,3
    b33c:	302a90fa 	slli	r21,r6,3
    b340:	297f0044 	addi	r5,r5,-1023
    b344:	80a0b03a 	or	r16,r16,r2
    b348:	000f883a 	mov	r7,zero
    b34c:	3c86b03a 	or	r3,r7,r18
    b350:	180690ba 	slli	r3,r3,2
    b354:	00800074 	movhi	r2,1
    b358:	10acde04 	addi	r2,r2,-19592
    b35c:	1887883a 	add	r3,r3,r2
    b360:	18c00017 	ldw	r3,0(r3)
    b364:	b5c8f03a 	xor	r4,r22,r23
    b368:	200d883a 	mov	r6,r4
    b36c:	24803fcc 	andi	r18,r4,255
    b370:	a169c83a 	sub	r20,r20,r5
    b374:	1800683a 	jmp	r3
    b378:	0000b5c0 	call	b5c <check_lcd_frame+0xc0>
    b37c:	0000b3f0 	cmpltui	zero,zero,719
    b380:	0000b584 	movi	zero,726
    b384:	0000b3d4 	movui	zero,719
    b388:	0000b584 	movi	zero,726
    b38c:	0000b558 	cmpnei	zero,zero,725
    b390:	0000b584 	movi	zero,726
    b394:	0000b3d4 	movui	zero,719
    b398:	0000b3f0 	cmpltui	zero,zero,719
    b39c:	0000b3f0 	cmpltui	zero,zero,719
    b3a0:	0000b558 	cmpnei	zero,zero,725
    b3a4:	0000b3d4 	movui	zero,719
    b3a8:	0000b3e4 	muli	zero,zero,719
    b3ac:	0000b3e4 	muli	zero,zero,719
    b3b0:	0000b3e4 	muli	zero,zero,719
    b3b4:	0000b594 	movui	zero,726
    b3b8:	8904b03a 	or	r2,r17,r4
    b3bc:	1000631e 	bne	r2,zero,b54c <__divdf3+0x2c4>
    b3c0:	04800204 	movi	r18,8
    b3c4:	0023883a 	mov	r17,zero
    b3c8:	0027883a 	mov	r19,zero
    b3cc:	02000084 	movi	r8,2
    b3d0:	003fcc06 	br	b304 <__divdf3+0x7c>
    b3d4:	8023883a 	mov	r17,r16
    b3d8:	a827883a 	mov	r19,r21
    b3dc:	4839883a 	mov	fp,r9
    b3e0:	3811883a 	mov	r8,r7
    b3e4:	00800084 	movi	r2,2
    b3e8:	40812a1e 	bne	r8,r2,b894 <__divdf3+0x60c>
    b3ec:	e025883a 	mov	r18,fp
    b3f0:	9180004c 	andi	r6,r18,1
    b3f4:	0101ffc4 	movi	r4,2047
    b3f8:	000b883a 	mov	r5,zero
    b3fc:	0027883a 	mov	r19,zero
    b400:	2008953a 	slli	r4,r4,20
    b404:	30c03fcc 	andi	r3,r6,255
    b408:	04000434 	movhi	r16,16
    b40c:	180697fa 	slli	r3,r3,31
    b410:	843fffc4 	addi	r16,r16,-1
    b414:	2c20703a 	and	r16,r5,r16
    b418:	8120b03a 	or	r16,r16,r4
    b41c:	80c6b03a 	or	r3,r16,r3
    b420:	9805883a 	mov	r2,r19
    b424:	dfc00d17 	ldw	ra,52(sp)
    b428:	df000c17 	ldw	fp,48(sp)
    b42c:	ddc00b17 	ldw	r23,44(sp)
    b430:	dd800a17 	ldw	r22,40(sp)
    b434:	dd400917 	ldw	r21,36(sp)
    b438:	dd000817 	ldw	r20,32(sp)
    b43c:	dcc00717 	ldw	r19,28(sp)
    b440:	dc800617 	ldw	r18,24(sp)
    b444:	dc400517 	ldw	r17,20(sp)
    b448:	dc000417 	ldw	r16,16(sp)
    b44c:	dec00e04 	addi	sp,sp,56
    b450:	f800283a 	ret
    b454:	8904b03a 	or	r2,r17,r4
    b458:	10003726 	beq	r2,zero,b538 <__divdf3+0x2b0>
    b45c:	88011c26 	beq	r17,zero,b8d0 <__divdf3+0x648>
    b460:	8809883a 	mov	r4,r17
    b464:	d9800315 	stw	r6,12(sp)
    b468:	d9c00115 	stw	r7,4(sp)
    b46c:	000cf880 	call	cf88 <__clzsi2>
    b470:	d9800317 	ldw	r6,12(sp)
    b474:	d9c00117 	ldw	r7,4(sp)
    b478:	1007883a 	mov	r3,r2
    b47c:	01000a04 	movi	r4,40
    b480:	1cfffe04 	addi	r19,r3,-8
    b484:	20c9c83a 	sub	r4,r4,r3
    b488:	8cca983a 	sll	r5,r17,r19
    b48c:	9108d83a 	srl	r4,r18,r4
    b490:	94e6983a 	sll	r19,r18,r19
    b494:	2162b03a 	or	r17,r4,r5
    b498:	053f0344 	movi	r20,-1011
    b49c:	a0e9c83a 	sub	r20,r20,r3
    b4a0:	0025883a 	mov	r18,zero
    b4a4:	0011883a 	mov	r8,zero
    b4a8:	003f9606 	br	b304 <__divdf3+0x7c>
    b4ac:	8184b03a 	or	r2,r16,r6
    b4b0:	10001f1e 	bne	r2,zero,b530 <__divdf3+0x2a8>
    b4b4:	0021883a 	mov	r16,zero
    b4b8:	002b883a 	mov	r21,zero
    b4bc:	01c00084 	movi	r7,2
    b4c0:	003fa206 	br	b34c <__divdf3+0xc4>
    b4c4:	8184b03a 	or	r2,r16,r6
    b4c8:	10001526 	beq	r2,zero,b520 <__divdf3+0x298>
    b4cc:	80010c26 	beq	r16,zero,b900 <__divdf3+0x678>
    b4d0:	8009883a 	mov	r4,r16
    b4d4:	d9800315 	stw	r6,12(sp)
    b4d8:	da000215 	stw	r8,8(sp)
    b4dc:	da400015 	stw	r9,0(sp)
    b4e0:	000cf880 	call	cf88 <__clzsi2>
    b4e4:	d9800317 	ldw	r6,12(sp)
    b4e8:	da000217 	ldw	r8,8(sp)
    b4ec:	da400017 	ldw	r9,0(sp)
    b4f0:	1007883a 	mov	r3,r2
    b4f4:	01000a04 	movi	r4,40
    b4f8:	1d7ffe04 	addi	r21,r3,-8
    b4fc:	20c9c83a 	sub	r4,r4,r3
    b500:	8560983a 	sll	r16,r16,r21
    b504:	3108d83a 	srl	r4,r6,r4
    b508:	356a983a 	sll	r21,r6,r21
    b50c:	2420b03a 	or	r16,r4,r16
    b510:	017f0344 	movi	r5,-1011
    b514:	28cbc83a 	sub	r5,r5,r3
    b518:	000f883a 	mov	r7,zero
    b51c:	003f8b06 	br	b34c <__divdf3+0xc4>
    b520:	0021883a 	mov	r16,zero
    b524:	002b883a 	mov	r21,zero
    b528:	01c00044 	movi	r7,1
    b52c:	003f8706 	br	b34c <__divdf3+0xc4>
    b530:	01c000c4 	movi	r7,3
    b534:	003f8506 	br	b34c <__divdf3+0xc4>
    b538:	04800104 	movi	r18,4
    b53c:	0023883a 	mov	r17,zero
    b540:	0027883a 	mov	r19,zero
    b544:	02000044 	movi	r8,1
    b548:	003f6e06 	br	b304 <__divdf3+0x7c>
    b54c:	04800304 	movi	r18,12
    b550:	020000c4 	movi	r8,3
    b554:	003f6b06 	br	b304 <__divdf3+0x7c>
    b558:	01400434 	movhi	r5,16
    b55c:	000d883a 	mov	r6,zero
    b560:	297fffc4 	addi	r5,r5,-1
    b564:	04ffffc4 	movi	r19,-1
    b568:	0101ffc4 	movi	r4,2047
    b56c:	003fa406 	br	b400 <__divdf3+0x178>
    b570:	043f0084 	movi	r16,-1022
    b574:	8521c83a 	sub	r16,r16,r20
    b578:	00800e04 	movi	r2,56
    b57c:	1401200e 	bge	r2,r16,ba00 <__divdf3+0x778>
    b580:	9180004c 	andi	r6,r18,1
    b584:	0009883a 	mov	r4,zero
    b588:	000b883a 	mov	r5,zero
    b58c:	0027883a 	mov	r19,zero
    b590:	003f9b06 	br	b400 <__divdf3+0x178>
    b594:	8880022c 	andhi	r2,r17,8
    b598:	1000c726 	beq	r2,zero,b8b8 <__divdf3+0x630>
    b59c:	8080022c 	andhi	r2,r16,8
    b5a0:	1000c51e 	bne	r2,zero,b8b8 <__divdf3+0x630>
    b5a4:	00800434 	movhi	r2,16
    b5a8:	81400234 	orhi	r5,r16,8
    b5ac:	10bfffc4 	addi	r2,r2,-1
    b5b0:	b80d883a 	mov	r6,r23
    b5b4:	288a703a 	and	r5,r5,r2
    b5b8:	a827883a 	mov	r19,r21
    b5bc:	003fea06 	br	b568 <__divdf3+0x2e0>
    b5c0:	8440ea36 	bltu	r16,r17,b96c <__divdf3+0x6e4>
    b5c4:	8c00e826 	beq	r17,r16,b968 <__divdf3+0x6e0>
    b5c8:	a53fffc4 	addi	r20,r20,-1
    b5cc:	882d883a 	mov	r22,r17
    b5d0:	000d883a 	mov	r6,zero
    b5d4:	a804d63a 	srli	r2,r21,24
    b5d8:	8020923a 	slli	r16,r16,8
    b5dc:	b009883a 	mov	r4,r22
    b5e0:	d9800315 	stw	r6,12(sp)
    b5e4:	1420b03a 	or	r16,r2,r16
    b5e8:	802ed43a 	srli	r23,r16,16
    b5ec:	873fffcc 	andi	fp,r16,65535
    b5f0:	a82a923a 	slli	r21,r21,8
    b5f4:	b80b883a 	mov	r5,r23
    b5f8:	000a9dc0 	call	a9dc <__udivsi3>
    b5fc:	b009883a 	mov	r4,r22
    b600:	b80b883a 	mov	r5,r23
    b604:	1023883a 	mov	r17,r2
    b608:	000a9e40 	call	a9e4 <__umodsi3>
    b60c:	1004943a 	slli	r2,r2,16
    b610:	9808d43a 	srli	r4,r19,16
    b614:	8f2d383a 	mul	r22,r17,fp
    b618:	d9800317 	ldw	r6,12(sp)
    b61c:	1106b03a 	or	r3,r2,r4
    b620:	1d80062e 	bgeu	r3,r22,b63c <__divdf3+0x3b4>
    b624:	1c07883a 	add	r3,r3,r16
    b628:	88bfffc4 	addi	r2,r17,-1
    b62c:	1c00dc36 	bltu	r3,r16,b9a0 <__divdf3+0x718>
    b630:	1d80db2e 	bgeu	r3,r22,b9a0 <__divdf3+0x718>
    b634:	8c7fff84 	addi	r17,r17,-2
    b638:	1c07883a 	add	r3,r3,r16
    b63c:	1dadc83a 	sub	r22,r3,r22
    b640:	b009883a 	mov	r4,r22
    b644:	b80b883a 	mov	r5,r23
    b648:	d9800315 	stw	r6,12(sp)
    b64c:	000a9dc0 	call	a9dc <__udivsi3>
    b650:	b009883a 	mov	r4,r22
    b654:	b80b883a 	mov	r5,r23
    b658:	d8800015 	stw	r2,0(sp)
    b65c:	000a9e40 	call	a9e4 <__umodsi3>
    b660:	da400017 	ldw	r9,0(sp)
    b664:	1004943a 	slli	r2,r2,16
    b668:	9cffffcc 	andi	r19,r19,65535
    b66c:	4f07383a 	mul	r3,r9,fp
    b670:	14c8b03a 	or	r4,r2,r19
    b674:	d9800317 	ldw	r6,12(sp)
    b678:	20c0062e 	bgeu	r4,r3,b694 <__divdf3+0x40c>
    b67c:	2409883a 	add	r4,r4,r16
    b680:	48bfffc4 	addi	r2,r9,-1
    b684:	2400c436 	bltu	r4,r16,b998 <__divdf3+0x710>
    b688:	20c0c32e 	bgeu	r4,r3,b998 <__divdf3+0x710>
    b68c:	4a7fff84 	addi	r9,r9,-2
    b690:	2409883a 	add	r4,r4,r16
    b694:	8822943a 	slli	r17,r17,16
    b698:	a80ed43a 	srli	r7,r21,16
    b69c:	aa3fffcc 	andi	r8,r21,65535
    b6a0:	4c62b03a 	or	r17,r9,r17
    b6a4:	8816d43a 	srli	r11,r17,16
    b6a8:	897fffcc 	andi	r5,r17,65535
    b6ac:	2a15383a 	mul	r10,r5,r8
    b6b0:	5a19383a 	mul	r12,r11,r8
    b6b4:	29cb383a 	mul	r5,r5,r7
    b6b8:	5012d43a 	srli	r9,r10,16
    b6bc:	20c5c83a 	sub	r2,r4,r3
    b6c0:	614b883a 	add	r5,r12,r5
    b6c4:	2a4b883a 	add	r5,r5,r9
    b6c8:	59c7383a 	mul	r3,r11,r7
    b6cc:	2b00022e 	bgeu	r5,r12,b6d8 <__divdf3+0x450>
    b6d0:	01000074 	movhi	r4,1
    b6d4:	1907883a 	add	r3,r3,r4
    b6d8:	2808d43a 	srli	r4,r5,16
    b6dc:	280a943a 	slli	r5,r5,16
    b6e0:	54ffffcc 	andi	r19,r10,65535
    b6e4:	1907883a 	add	r3,r3,r4
    b6e8:	2ccb883a 	add	r5,r5,r19
    b6ec:	10c09336 	bltu	r2,r3,b93c <__divdf3+0x6b4>
    b6f0:	10c0ad26 	beq	r2,r3,b9a8 <__divdf3+0x720>
    b6f4:	10c7c83a 	sub	r3,r2,r3
    b6f8:	3167c83a 	sub	r19,r6,r5
    b6fc:	34ed803a 	cmpltu	r22,r6,r19
    b700:	1dadc83a 	sub	r22,r3,r22
    b704:	b400b226 	beq	r22,r16,b9d0 <__divdf3+0x748>
    b708:	b009883a 	mov	r4,r22
    b70c:	b80b883a 	mov	r5,r23
    b710:	d9c00115 	stw	r7,4(sp)
    b714:	da000215 	stw	r8,8(sp)
    b718:	000a9dc0 	call	a9dc <__udivsi3>
    b71c:	b009883a 	mov	r4,r22
    b720:	b80b883a 	mov	r5,r23
    b724:	d8800315 	stw	r2,12(sp)
    b728:	000a9e40 	call	a9e4 <__umodsi3>
    b72c:	d9800317 	ldw	r6,12(sp)
    b730:	1004943a 	slli	r2,r2,16
    b734:	9808d43a 	srli	r4,r19,16
    b738:	372d383a 	mul	r22,r6,fp
    b73c:	d9c00117 	ldw	r7,4(sp)
    b740:	1106b03a 	or	r3,r2,r4
    b744:	da000217 	ldw	r8,8(sp)
    b748:	1d80062e 	bgeu	r3,r22,b764 <__divdf3+0x4dc>
    b74c:	1c07883a 	add	r3,r3,r16
    b750:	30bfffc4 	addi	r2,r6,-1
    b754:	1c00a036 	bltu	r3,r16,b9d8 <__divdf3+0x750>
    b758:	1d809f2e 	bgeu	r3,r22,b9d8 <__divdf3+0x750>
    b75c:	31bfff84 	addi	r6,r6,-2
    b760:	1c07883a 	add	r3,r3,r16
    b764:	1dadc83a 	sub	r22,r3,r22
    b768:	b009883a 	mov	r4,r22
    b76c:	b80b883a 	mov	r5,r23
    b770:	d9800315 	stw	r6,12(sp)
    b774:	d9c00115 	stw	r7,4(sp)
    b778:	da000215 	stw	r8,8(sp)
    b77c:	000a9dc0 	call	a9dc <__udivsi3>
    b780:	b009883a 	mov	r4,r22
    b784:	b80b883a 	mov	r5,r23
    b788:	d8800015 	stw	r2,0(sp)
    b78c:	000a9e40 	call	a9e4 <__umodsi3>
    b790:	da400017 	ldw	r9,0(sp)
    b794:	1004943a 	slli	r2,r2,16
    b798:	993fffcc 	andi	r4,r19,65535
    b79c:	4f39383a 	mul	fp,r9,fp
    b7a0:	1106b03a 	or	r3,r2,r4
    b7a4:	d9800317 	ldw	r6,12(sp)
    b7a8:	d9c00117 	ldw	r7,4(sp)
    b7ac:	da000217 	ldw	r8,8(sp)
    b7b0:	1f00062e 	bgeu	r3,fp,b7cc <__divdf3+0x544>
    b7b4:	1c07883a 	add	r3,r3,r16
    b7b8:	48bfffc4 	addi	r2,r9,-1
    b7bc:	1c008836 	bltu	r3,r16,b9e0 <__divdf3+0x758>
    b7c0:	1f00872e 	bgeu	r3,fp,b9e0 <__divdf3+0x758>
    b7c4:	4a7fff84 	addi	r9,r9,-2
    b7c8:	1c07883a 	add	r3,r3,r16
    b7cc:	3008943a 	slli	r4,r6,16
    b7d0:	1f07c83a 	sub	r3,r3,fp
    b7d4:	4926b03a 	or	r19,r9,r4
    b7d8:	993fffcc 	andi	r4,r19,65535
    b7dc:	980cd43a 	srli	r6,r19,16
    b7e0:	220b383a 	mul	r5,r4,r8
    b7e4:	21c5383a 	mul	r2,r4,r7
    b7e8:	3211383a 	mul	r8,r6,r8
    b7ec:	2808d43a 	srli	r4,r5,16
    b7f0:	31cf383a 	mul	r7,r6,r7
    b7f4:	4085883a 	add	r2,r8,r2
    b7f8:	1105883a 	add	r2,r2,r4
    b7fc:	1200022e 	bgeu	r2,r8,b808 <__divdf3+0x580>
    b800:	01000074 	movhi	r4,1
    b804:	390f883a 	add	r7,r7,r4
    b808:	1008d43a 	srli	r4,r2,16
    b80c:	1004943a 	slli	r2,r2,16
    b810:	297fffcc 	andi	r5,r5,65535
    b814:	390f883a 	add	r7,r7,r4
    b818:	1145883a 	add	r2,r2,r5
    b81c:	19c06536 	bltu	r3,r7,b9b4 <__divdf3+0x72c>
    b820:	19c09f26 	beq	r3,r7,baa0 <__divdf3+0x818>
    b824:	9cc00054 	ori	r19,r19,1
    b828:	a100ffc4 	addi	r4,r20,1023
    b82c:	013f500e 	bge	zero,r4,b570 <__divdf3+0x2e8>
    b830:	988001cc 	andi	r2,r19,7
    b834:	10000726 	beq	r2,zero,b854 <__divdf3+0x5cc>
    b838:	98c003cc 	andi	r3,r19,15
    b83c:	00800104 	movi	r2,4
    b840:	18800426 	beq	r3,r2,b854 <__divdf3+0x5cc>
    b844:	9885883a 	add	r2,r19,r2
    b848:	14e1803a 	cmpltu	r16,r2,r19
    b84c:	8c23883a 	add	r17,r17,r16
    b850:	1027883a 	mov	r19,r2
    b854:	8880402c 	andhi	r2,r17,256
    b858:	10000426 	beq	r2,zero,b86c <__divdf3+0x5e4>
    b85c:	00bfc034 	movhi	r2,65280
    b860:	10bfffc4 	addi	r2,r2,-1
    b864:	a1010004 	addi	r4,r20,1024
    b868:	88a2703a 	and	r17,r17,r2
    b86c:	0081ff84 	movi	r2,2046
    b870:	113edf16 	blt	r2,r4,b3f0 <__divdf3+0x168>
    b874:	9826d0fa 	srli	r19,r19,3
    b878:	8804977a 	slli	r2,r17,29
    b87c:	8820927a 	slli	r16,r17,9
    b880:	2101ffcc 	andi	r4,r4,2047
    b884:	14e6b03a 	or	r19,r2,r19
    b888:	800ad33a 	srli	r5,r16,12
    b88c:	9180004c 	andi	r6,r18,1
    b890:	003edb06 	br	b400 <__divdf3+0x178>
    b894:	008000c4 	movi	r2,3
    b898:	4080a826 	beq	r8,r2,bb3c <__divdf3+0x8b4>
    b89c:	00800044 	movi	r2,1
    b8a0:	4080551e 	bne	r8,r2,b9f8 <__divdf3+0x770>
    b8a4:	e00d883a 	mov	r6,fp
    b8a8:	0009883a 	mov	r4,zero
    b8ac:	000b883a 	mov	r5,zero
    b8b0:	0027883a 	mov	r19,zero
    b8b4:	003ed206 	br	b400 <__divdf3+0x178>
    b8b8:	00800434 	movhi	r2,16
    b8bc:	89400234 	orhi	r5,r17,8
    b8c0:	10bfffc4 	addi	r2,r2,-1
    b8c4:	b00d883a 	mov	r6,r22
    b8c8:	288a703a 	and	r5,r5,r2
    b8cc:	003f2606 	br	b568 <__divdf3+0x2e0>
    b8d0:	d9800315 	stw	r6,12(sp)
    b8d4:	d9c00115 	stw	r7,4(sp)
    b8d8:	000cf880 	call	cf88 <__clzsi2>
    b8dc:	10c00804 	addi	r3,r2,32
    b8e0:	010009c4 	movi	r4,39
    b8e4:	d9800317 	ldw	r6,12(sp)
    b8e8:	d9c00117 	ldw	r7,4(sp)
    b8ec:	20fee30e 	bge	r4,r3,b47c <__divdf3+0x1f4>
    b8f0:	117ffe04 	addi	r5,r2,-8
    b8f4:	9162983a 	sll	r17,r18,r5
    b8f8:	0027883a 	mov	r19,zero
    b8fc:	003ee606 	br	b498 <__divdf3+0x210>
    b900:	3009883a 	mov	r4,r6
    b904:	d9800315 	stw	r6,12(sp)
    b908:	da000215 	stw	r8,8(sp)
    b90c:	da400015 	stw	r9,0(sp)
    b910:	000cf880 	call	cf88 <__clzsi2>
    b914:	10c00804 	addi	r3,r2,32
    b918:	010009c4 	movi	r4,39
    b91c:	d9800317 	ldw	r6,12(sp)
    b920:	da000217 	ldw	r8,8(sp)
    b924:	da400017 	ldw	r9,0(sp)
    b928:	20fef20e 	bge	r4,r3,b4f4 <__divdf3+0x26c>
    b92c:	10bffe04 	addi	r2,r2,-8
    b930:	a8a0983a 	sll	r16,r21,r2
    b934:	002b883a 	mov	r21,zero
    b938:	003ef506 	br	b510 <__divdf3+0x288>
    b93c:	354d883a 	add	r6,r6,r21
    b940:	3549803a 	cmpltu	r4,r6,r21
    b944:	2409883a 	add	r4,r4,r16
    b948:	2089883a 	add	r4,r4,r2
    b94c:	88bfffc4 	addi	r2,r17,-1
    b950:	81000c2e 	bgeu	r16,r4,b984 <__divdf3+0x6fc>
    b954:	20c04436 	bltu	r4,r3,ba68 <__divdf3+0x7e0>
    b958:	19006f26 	beq	r3,r4,bb18 <__divdf3+0x890>
    b95c:	20c7c83a 	sub	r3,r4,r3
    b960:	1023883a 	mov	r17,r2
    b964:	003f6406 	br	b6f8 <__divdf3+0x470>
    b968:	9d7f1736 	bltu	r19,r21,b5c8 <__divdf3+0x340>
    b96c:	9806d07a 	srli	r3,r19,1
    b970:	880497fa 	slli	r2,r17,31
    b974:	980c97fa 	slli	r6,r19,31
    b978:	882cd07a 	srli	r22,r17,1
    b97c:	18a6b03a 	or	r19,r3,r2
    b980:	003f1406 	br	b5d4 <__divdf3+0x34c>
    b984:	243ff51e 	bne	r4,r16,b95c <__divdf3+0x6d4>
    b988:	357ff22e 	bgeu	r6,r21,b954 <__divdf3+0x6cc>
    b98c:	80c7c83a 	sub	r3,r16,r3
    b990:	1023883a 	mov	r17,r2
    b994:	003f5806 	br	b6f8 <__divdf3+0x470>
    b998:	1013883a 	mov	r9,r2
    b99c:	003f3d06 	br	b694 <__divdf3+0x40c>
    b9a0:	1023883a 	mov	r17,r2
    b9a4:	003f2506 	br	b63c <__divdf3+0x3b4>
    b9a8:	317fe436 	bltu	r6,r5,b93c <__divdf3+0x6b4>
    b9ac:	0007883a 	mov	r3,zero
    b9b0:	003f5106 	br	b6f8 <__divdf3+0x470>
    b9b4:	1c07883a 	add	r3,r3,r16
    b9b8:	993fffc4 	addi	r4,r19,-1
    b9bc:	1c000a2e 	bgeu	r3,r16,b9e8 <__divdf3+0x760>
    b9c0:	2027883a 	mov	r19,r4
    b9c4:	19ff971e 	bne	r3,r7,b824 <__divdf3+0x59c>
    b9c8:	a8bf961e 	bne	r21,r2,b824 <__divdf3+0x59c>
    b9cc:	003f9606 	br	b828 <__divdf3+0x5a0>
    b9d0:	04ffffc4 	movi	r19,-1
    b9d4:	003f9406 	br	b828 <__divdf3+0x5a0>
    b9d8:	100d883a 	mov	r6,r2
    b9dc:	003f6106 	br	b764 <__divdf3+0x4dc>
    b9e0:	1013883a 	mov	r9,r2
    b9e4:	003f7906 	br	b7cc <__divdf3+0x544>
    b9e8:	19c02636 	bltu	r3,r7,ba84 <__divdf3+0x7fc>
    b9ec:	38c04d26 	beq	r7,r3,bb24 <__divdf3+0x89c>
    b9f0:	2027883a 	mov	r19,r4
    b9f4:	003f8b06 	br	b824 <__divdf3+0x59c>
    b9f8:	e025883a 	mov	r18,fp
    b9fc:	003f8a06 	br	b828 <__divdf3+0x5a0>
    ba00:	008007c4 	movi	r2,31
    ba04:	14002a16 	blt	r2,r16,bab0 <__divdf3+0x828>
    ba08:	a5010784 	addi	r20,r20,1054
    ba0c:	8d04983a 	sll	r2,r17,r20
    ba10:	9c06d83a 	srl	r3,r19,r16
    ba14:	9d28983a 	sll	r20,r19,r20
    ba18:	8c20d83a 	srl	r16,r17,r16
    ba1c:	1886b03a 	or	r3,r3,r2
    ba20:	a004c03a 	cmpne	r2,r20,zero
    ba24:	1884b03a 	or	r2,r3,r2
    ba28:	10c001cc 	andi	r3,r2,7
    ba2c:	18000726 	beq	r3,zero,ba4c <__divdf3+0x7c4>
    ba30:	110003cc 	andi	r4,r2,15
    ba34:	00c00104 	movi	r3,4
    ba38:	20c00426 	beq	r4,r3,ba4c <__divdf3+0x7c4>
    ba3c:	10c00104 	addi	r3,r2,4
    ba40:	1885803a 	cmpltu	r2,r3,r2
    ba44:	80a1883a 	add	r16,r16,r2
    ba48:	1805883a 	mov	r2,r3
    ba4c:	80c0202c 	andhi	r3,r16,128
    ba50:	18002d26 	beq	r3,zero,bb08 <__divdf3+0x880>
    ba54:	9180004c 	andi	r6,r18,1
    ba58:	01000044 	movi	r4,1
    ba5c:	000b883a 	mov	r5,zero
    ba60:	0027883a 	mov	r19,zero
    ba64:	003e6606 	br	b400 <__divdf3+0x178>
    ba68:	354d883a 	add	r6,r6,r21
    ba6c:	356d803a 	cmpltu	r22,r6,r21
    ba70:	b42d883a 	add	r22,r22,r16
    ba74:	b12d883a 	add	r22,r22,r4
    ba78:	8c7fff84 	addi	r17,r17,-2
    ba7c:	b0c7c83a 	sub	r3,r22,r3
    ba80:	003f1d06 	br	b6f8 <__divdf3+0x470>
    ba84:	ad4b883a 	add	r5,r21,r21
    ba88:	2d6b803a 	cmpltu	r21,r5,r21
    ba8c:	ac2b883a 	add	r21,r21,r16
    ba90:	1d47883a 	add	r3,r3,r21
    ba94:	993fff84 	addi	r4,r19,-2
    ba98:	282b883a 	mov	r21,r5
    ba9c:	003fc806 	br	b9c0 <__divdf3+0x738>
    baa0:	103fc41e 	bne	r2,zero,b9b4 <__divdf3+0x72c>
    baa4:	002b883a 	mov	r21,zero
    baa8:	a8bf5e1e 	bne	r21,r2,b824 <__divdf3+0x59c>
    baac:	003f5e06 	br	b828 <__divdf3+0x5a0>
    bab0:	00bef884 	movi	r2,-1054
    bab4:	1505c83a 	sub	r2,r2,r20
    bab8:	00c00804 	movi	r3,32
    babc:	8884d83a 	srl	r2,r17,r2
    bac0:	80c01c26 	beq	r16,r3,bb34 <__divdf3+0x8ac>
    bac4:	a0c10f84 	addi	r3,r20,1086
    bac8:	88c6983a 	sll	r3,r17,r3
    bacc:	1cc6b03a 	or	r3,r3,r19
    bad0:	1806c03a 	cmpne	r3,r3,zero
    bad4:	1884b03a 	or	r2,r3,r2
    bad8:	140001cc 	andi	r16,r2,7
    badc:	8000061e 	bne	r16,zero,baf8 <__divdf3+0x870>
    bae0:	000b883a 	mov	r5,zero
    bae4:	1004d0fa 	srli	r2,r2,3
    bae8:	9180004c 	andi	r6,r18,1
    baec:	0009883a 	mov	r4,zero
    baf0:	1426b03a 	or	r19,r2,r16
    baf4:	003e4206 	br	b400 <__divdf3+0x178>
    baf8:	110003cc 	andi	r4,r2,15
    bafc:	00c00104 	movi	r3,4
    bb00:	0021883a 	mov	r16,zero
    bb04:	20ffcd1e 	bne	r4,r3,ba3c <__divdf3+0x7b4>
    bb08:	800a927a 	slli	r5,r16,9
    bb0c:	8020977a 	slli	r16,r16,29
    bb10:	280ad33a 	srli	r5,r5,12
    bb14:	003ff306 	br	bae4 <__divdf3+0x85c>
    bb18:	317fd336 	bltu	r6,r5,ba68 <__divdf3+0x7e0>
    bb1c:	1023883a 	mov	r17,r2
    bb20:	003fa206 	br	b9ac <__divdf3+0x724>
    bb24:	a8bfd736 	bltu	r21,r2,ba84 <__divdf3+0x7fc>
    bb28:	2027883a 	mov	r19,r4
    bb2c:	a8bf3d1e 	bne	r21,r2,b824 <__divdf3+0x59c>
    bb30:	003f3d06 	br	b828 <__divdf3+0x5a0>
    bb34:	0007883a 	mov	r3,zero
    bb38:	003fe406 	br	bacc <__divdf3+0x844>
    bb3c:	00800434 	movhi	r2,16
    bb40:	89400234 	orhi	r5,r17,8
    bb44:	10bfffc4 	addi	r2,r2,-1
    bb48:	e00d883a 	mov	r6,fp
    bb4c:	288a703a 	and	r5,r5,r2
    bb50:	003e8506 	br	b568 <__divdf3+0x2e0>

0000bb54 <__eqdf2>:
    bb54:	2804d53a 	srli	r2,r5,20
    bb58:	3806d53a 	srli	r3,r7,20
    bb5c:	02000434 	movhi	r8,16
    bb60:	423fffc4 	addi	r8,r8,-1
    bb64:	1081ffcc 	andi	r2,r2,2047
    bb68:	0241ffc4 	movi	r9,2047
    bb6c:	2a14703a 	and	r10,r5,r8
    bb70:	18c1ffcc 	andi	r3,r3,2047
    bb74:	3a10703a 	and	r8,r7,r8
    bb78:	280ad7fa 	srli	r5,r5,31
    bb7c:	380ed7fa 	srli	r7,r7,31
    bb80:	12400f26 	beq	r2,r9,bbc0 <__eqdf2+0x6c>
    bb84:	0241ffc4 	movi	r9,2047
    bb88:	1a400326 	beq	r3,r9,bb98 <__eqdf2+0x44>
    bb8c:	10c00526 	beq	r2,r3,bba4 <__eqdf2+0x50>
    bb90:	00800044 	movi	r2,1
    bb94:	f800283a 	ret
    bb98:	4192b03a 	or	r9,r8,r6
    bb9c:	483ffc1e 	bne	r9,zero,bb90 <__eqdf2+0x3c>
    bba0:	10fffb1e 	bne	r2,r3,bb90 <__eqdf2+0x3c>
    bba4:	523ffa1e 	bne	r10,r8,bb90 <__eqdf2+0x3c>
    bba8:	21bff91e 	bne	r4,r6,bb90 <__eqdf2+0x3c>
    bbac:	29c00826 	beq	r5,r7,bbd0 <__eqdf2+0x7c>
    bbb0:	103ff71e 	bne	r2,zero,bb90 <__eqdf2+0x3c>
    bbb4:	5104b03a 	or	r2,r10,r4
    bbb8:	1004c03a 	cmpne	r2,r2,zero
    bbbc:	f800283a 	ret
    bbc0:	5112b03a 	or	r9,r10,r4
    bbc4:	483fef26 	beq	r9,zero,bb84 <__eqdf2+0x30>
    bbc8:	00800044 	movi	r2,1
    bbcc:	f800283a 	ret
    bbd0:	0005883a 	mov	r2,zero
    bbd4:	f800283a 	ret

0000bbd8 <__gedf2>:
    bbd8:	2804d53a 	srli	r2,r5,20
    bbdc:	3806d53a 	srli	r3,r7,20
    bbe0:	02000434 	movhi	r8,16
    bbe4:	423fffc4 	addi	r8,r8,-1
    bbe8:	0241ffc4 	movi	r9,2047
    bbec:	1081ffcc 	andi	r2,r2,2047
    bbf0:	2a14703a 	and	r10,r5,r8
    bbf4:	1a46703a 	and	r3,r3,r9
    bbf8:	3a10703a 	and	r8,r7,r8
    bbfc:	280ad7fa 	srli	r5,r5,31
    bc00:	380ed7fa 	srli	r7,r7,31
    bc04:	12400b26 	beq	r2,r9,bc34 <__gedf2+0x5c>
    bc08:	1a401626 	beq	r3,r9,bc64 <__gedf2+0x8c>
    bc0c:	10000c1e 	bne	r2,zero,bc40 <__gedf2+0x68>
    bc10:	5112b03a 	or	r9,r10,r4
    bc14:	4813003a 	cmpeq	r9,r9,zero
    bc18:	4817883a 	mov	r11,r9
    bc1c:	18000c1e 	bne	r3,zero,bc50 <__gedf2+0x78>
    bc20:	4198b03a 	or	r12,r8,r6
    bc24:	60000a1e 	bne	r12,zero,bc50 <__gedf2+0x78>
    bc28:	48001326 	beq	r9,zero,bc78 <__gedf2+0xa0>
    bc2c:	0005883a 	mov	r2,zero
    bc30:	f800283a 	ret
    bc34:	5112b03a 	or	r9,r10,r4
    bc38:	4800191e 	bne	r9,zero,bca0 <__gedf2+0xc8>
    bc3c:	18800926 	beq	r3,r2,bc64 <__gedf2+0x8c>
    bc40:	18000b1e 	bne	r3,zero,bc70 <__gedf2+0x98>
    bc44:	4192b03a 	or	r9,r8,r6
    bc48:	0017883a 	mov	r11,zero
    bc4c:	48000a26 	beq	r9,zero,bc78 <__gedf2+0xa0>
    bc50:	39c03fcc 	andi	r7,r7,255
    bc54:	58000726 	beq	r11,zero,bc74 <__gedf2+0x9c>
    bc58:	3800081e 	bne	r7,zero,bc7c <__gedf2+0xa4>
    bc5c:	00bfffc4 	movi	r2,-1
    bc60:	f800283a 	ret
    bc64:	4192b03a 	or	r9,r8,r6
    bc68:	48000d1e 	bne	r9,zero,bca0 <__gedf2+0xc8>
    bc6c:	103fe826 	beq	r2,zero,bc10 <__gedf2+0x38>
    bc70:	39c03fcc 	andi	r7,r7,255
    bc74:	29c00326 	beq	r5,r7,bc84 <__gedf2+0xac>
    bc78:	283ff81e 	bne	r5,zero,bc5c <__gedf2+0x84>
    bc7c:	00800044 	movi	r2,1
    bc80:	f800283a 	ret
    bc84:	18bffc16 	blt	r3,r2,bc78 <__gedf2+0xa0>
    bc88:	10c00316 	blt	r2,r3,bc98 <__gedf2+0xc0>
    bc8c:	42bffa36 	bltu	r8,r10,bc78 <__gedf2+0xa0>
    bc90:	52000526 	beq	r10,r8,bca8 <__gedf2+0xd0>
    bc94:	523fe52e 	bgeu	r10,r8,bc2c <__gedf2+0x54>
    bc98:	283ff026 	beq	r5,zero,bc5c <__gedf2+0x84>
    bc9c:	003ff706 	br	bc7c <__gedf2+0xa4>
    bca0:	00bfff84 	movi	r2,-2
    bca4:	f800283a 	ret
    bca8:	313ff336 	bltu	r6,r4,bc78 <__gedf2+0xa0>
    bcac:	21bfdf2e 	bgeu	r4,r6,bc2c <__gedf2+0x54>
    bcb0:	283fea26 	beq	r5,zero,bc5c <__gedf2+0x84>
    bcb4:	003ff106 	br	bc7c <__gedf2+0xa4>

0000bcb8 <__ledf2>:
    bcb8:	2804d53a 	srli	r2,r5,20
    bcbc:	3810d53a 	srli	r8,r7,20
    bcc0:	00c00434 	movhi	r3,16
    bcc4:	18ffffc4 	addi	r3,r3,-1
    bcc8:	0241ffc4 	movi	r9,2047
    bccc:	1081ffcc 	andi	r2,r2,2047
    bcd0:	28d4703a 	and	r10,r5,r3
    bcd4:	4250703a 	and	r8,r8,r9
    bcd8:	38c6703a 	and	r3,r7,r3
    bcdc:	280ad7fa 	srli	r5,r5,31
    bce0:	380ed7fa 	srli	r7,r7,31
    bce4:	12400b26 	beq	r2,r9,bd14 <__ledf2+0x5c>
    bce8:	42401926 	beq	r8,r9,bd50 <__ledf2+0x98>
    bcec:	10000c1e 	bne	r2,zero,bd20 <__ledf2+0x68>
    bcf0:	5112b03a 	or	r9,r10,r4
    bcf4:	4813003a 	cmpeq	r9,r9,zero
    bcf8:	4817883a 	mov	r11,r9
    bcfc:	40000f26 	beq	r8,zero,bd3c <__ledf2+0x84>
    bd00:	39c03fcc 	andi	r7,r7,255
    bd04:	58001826 	beq	r11,zero,bd68 <__ledf2+0xb0>
    bd08:	38000a1e 	bne	r7,zero,bd34 <__ledf2+0x7c>
    bd0c:	00bfffc4 	movi	r2,-1
    bd10:	f800283a 	ret
    bd14:	5112b03a 	or	r9,r10,r4
    bd18:	48000f1e 	bne	r9,zero,bd58 <__ledf2+0xa0>
    bd1c:	40800c26 	beq	r8,r2,bd50 <__ledf2+0x98>
    bd20:	4000101e 	bne	r8,zero,bd64 <__ledf2+0xac>
    bd24:	1992b03a 	or	r9,r3,r6
    bd28:	0017883a 	mov	r11,zero
    bd2c:	483ff41e 	bne	r9,zero,bd00 <__ledf2+0x48>
    bd30:	283ff61e 	bne	r5,zero,bd0c <__ledf2+0x54>
    bd34:	00800044 	movi	r2,1
    bd38:	f800283a 	ret
    bd3c:	1998b03a 	or	r12,r3,r6
    bd40:	603fef1e 	bne	r12,zero,bd00 <__ledf2+0x48>
    bd44:	483ffa26 	beq	r9,zero,bd30 <__ledf2+0x78>
    bd48:	0005883a 	mov	r2,zero
    bd4c:	f800283a 	ret
    bd50:	1992b03a 	or	r9,r3,r6
    bd54:	48000226 	beq	r9,zero,bd60 <__ledf2+0xa8>
    bd58:	00800084 	movi	r2,2
    bd5c:	f800283a 	ret
    bd60:	103fe326 	beq	r2,zero,bcf0 <__ledf2+0x38>
    bd64:	39c03fcc 	andi	r7,r7,255
    bd68:	29fff11e 	bne	r5,r7,bd30 <__ledf2+0x78>
    bd6c:	40bff016 	blt	r8,r2,bd30 <__ledf2+0x78>
    bd70:	12000316 	blt	r2,r8,bd80 <__ledf2+0xc8>
    bd74:	1abfee36 	bltu	r3,r10,bd30 <__ledf2+0x78>
    bd78:	50c00326 	beq	r10,r3,bd88 <__ledf2+0xd0>
    bd7c:	50fff22e 	bgeu	r10,r3,bd48 <__ledf2+0x90>
    bd80:	283fe226 	beq	r5,zero,bd0c <__ledf2+0x54>
    bd84:	003feb06 	br	bd34 <__ledf2+0x7c>
    bd88:	313fe936 	bltu	r6,r4,bd30 <__ledf2+0x78>
    bd8c:	21bfee2e 	bgeu	r4,r6,bd48 <__ledf2+0x90>
    bd90:	283fde26 	beq	r5,zero,bd0c <__ledf2+0x54>
    bd94:	003fe706 	br	bd34 <__ledf2+0x7c>

0000bd98 <__muldf3>:
    bd98:	defff204 	addi	sp,sp,-56
    bd9c:	2804d53a 	srli	r2,r5,20
    bda0:	dd800a15 	stw	r22,40(sp)
    bda4:	282cd7fa 	srli	r22,r5,31
    bda8:	dc000415 	stw	r16,16(sp)
    bdac:	04000434 	movhi	r16,16
    bdb0:	df000c15 	stw	fp,48(sp)
    bdb4:	dd000815 	stw	r20,32(sp)
    bdb8:	dcc00715 	stw	r19,28(sp)
    bdbc:	dc800615 	stw	r18,24(sp)
    bdc0:	dc400515 	stw	r17,20(sp)
    bdc4:	843fffc4 	addi	r16,r16,-1
    bdc8:	dfc00d15 	stw	ra,52(sp)
    bdcc:	ddc00b15 	stw	r23,44(sp)
    bdd0:	dd400915 	stw	r21,36(sp)
    bdd4:	1501ffcc 	andi	r20,r2,2047
    bdd8:	2023883a 	mov	r17,r4
    bddc:	2025883a 	mov	r18,r4
    bde0:	2c20703a 	and	r16,r5,r16
    bde4:	b027883a 	mov	r19,r22
    bde8:	b7003fcc 	andi	fp,r22,255
    bdec:	a0005926 	beq	r20,zero,bf54 <__muldf3+0x1bc>
    bdf0:	0081ffc4 	movi	r2,2047
    bdf4:	a0803426 	beq	r20,r2,bec8 <__muldf3+0x130>
    bdf8:	84000434 	orhi	r16,r16,16
    bdfc:	2004d77a 	srli	r2,r4,29
    be00:	802090fa 	slli	r16,r16,3
    be04:	202490fa 	slli	r18,r4,3
    be08:	a53f0044 	addi	r20,r20,-1023
    be0c:	80a0b03a 	or	r16,r16,r2
    be10:	002b883a 	mov	r21,zero
    be14:	0015883a 	mov	r10,zero
    be18:	3812d53a 	srli	r9,r7,20
    be1c:	3806d7fa 	srli	r3,r7,31
    be20:	02000434 	movhi	r8,16
    be24:	423fffc4 	addi	r8,r8,-1
    be28:	4941ffcc 	andi	r5,r9,2047
    be2c:	302f883a 	mov	r23,r6
    be30:	3a22703a 	and	r17,r7,r8
    be34:	1ac03fcc 	andi	r11,r3,255
    be38:	28006226 	beq	r5,zero,bfc4 <__muldf3+0x22c>
    be3c:	0081ffc4 	movi	r2,2047
    be40:	28805a26 	beq	r5,r2,bfac <__muldf3+0x214>
    be44:	8a000434 	orhi	r8,r17,16
    be48:	3004d77a 	srli	r2,r6,29
    be4c:	401090fa 	slli	r8,r8,3
    be50:	302e90fa 	slli	r23,r6,3
    be54:	297f0044 	addi	r5,r5,-1023
    be58:	40a2b03a 	or	r17,r8,r2
    be5c:	0013883a 	mov	r9,zero
    be60:	4d4cb03a 	or	r6,r9,r21
    be64:	300c90ba 	slli	r6,r6,2
    be68:	02000074 	movhi	r8,1
    be6c:	422fa204 	addi	r8,r8,-16760
    be70:	320d883a 	add	r6,r6,r8
    be74:	31800017 	ldw	r6,0(r6)
    be78:	a14b883a 	add	r5,r20,r5
    be7c:	1dacf03a 	xor	r22,r3,r22
    be80:	2b000044 	addi	r12,r5,1
    be84:	3000683a 	jmp	r6
    be88:	0000c0c4 	movi	zero,771
    be8c:	0000c0b0 	cmpltui	zero,zero,770
    be90:	0000c0b0 	cmpltui	zero,zero,770
    be94:	0000c09c 	xori	zero,zero,770
    be98:	0000bee4 	muli	zero,zero,763
    be9c:	0000bee4 	muli	zero,zero,763
    bea0:	0000c084 	movi	zero,770
    bea4:	0000c09c 	xori	zero,zero,770
    bea8:	0000bee4 	muli	zero,zero,763
    beac:	0000c084 	movi	zero,770
    beb0:	0000bee4 	muli	zero,zero,763
    beb4:	0000c09c 	xori	zero,zero,770
    beb8:	0000bee8 	cmpgeui	zero,zero,763
    bebc:	0000bee8 	cmpgeui	zero,zero,763
    bec0:	0000bee8 	cmpgeui	zero,zero,763
    bec4:	0000c2c0 	call	c2c <main+0x44>
    bec8:	8104b03a 	or	r2,r16,r4
    becc:	10006a1e 	bne	r2,zero,c078 <__muldf3+0x2e0>
    bed0:	05400204 	movi	r21,8
    bed4:	0021883a 	mov	r16,zero
    bed8:	0025883a 	mov	r18,zero
    bedc:	02800084 	movi	r10,2
    bee0:	003fcd06 	br	be18 <__muldf3+0x80>
    bee4:	b039883a 	mov	fp,r22
    bee8:	00800084 	movi	r2,2
    beec:	50804e1e 	bne	r10,r2,c028 <__muldf3+0x290>
    bef0:	e4c0004c 	andi	r19,fp,1
    bef4:	0101ffc4 	movi	r4,2047
    bef8:	0021883a 	mov	r16,zero
    befc:	0025883a 	mov	r18,zero
    bf00:	2008953a 	slli	r4,r4,20
    bf04:	98c03fcc 	andi	r3,r19,255
    bf08:	01400434 	movhi	r5,16
    bf0c:	297fffc4 	addi	r5,r5,-1
    bf10:	180697fa 	slli	r3,r3,31
    bf14:	8160703a 	and	r16,r16,r5
    bf18:	8120b03a 	or	r16,r16,r4
    bf1c:	80c6b03a 	or	r3,r16,r3
    bf20:	9005883a 	mov	r2,r18
    bf24:	dfc00d17 	ldw	ra,52(sp)
    bf28:	df000c17 	ldw	fp,48(sp)
    bf2c:	ddc00b17 	ldw	r23,44(sp)
    bf30:	dd800a17 	ldw	r22,40(sp)
    bf34:	dd400917 	ldw	r21,36(sp)
    bf38:	dd000817 	ldw	r20,32(sp)
    bf3c:	dcc00717 	ldw	r19,28(sp)
    bf40:	dc800617 	ldw	r18,24(sp)
    bf44:	dc400517 	ldw	r17,20(sp)
    bf48:	dc000417 	ldw	r16,16(sp)
    bf4c:	dec00e04 	addi	sp,sp,56
    bf50:	f800283a 	ret
    bf54:	8104b03a 	or	r2,r16,r4
    bf58:	10004226 	beq	r2,zero,c064 <__muldf3+0x2cc>
    bf5c:	8000f926 	beq	r16,zero,c344 <__muldf3+0x5ac>
    bf60:	8009883a 	mov	r4,r16
    bf64:	d9800315 	stw	r6,12(sp)
    bf68:	d9c00015 	stw	r7,0(sp)
    bf6c:	000cf880 	call	cf88 <__clzsi2>
    bf70:	d9800317 	ldw	r6,12(sp)
    bf74:	d9c00017 	ldw	r7,0(sp)
    bf78:	1007883a 	mov	r3,r2
    bf7c:	01000a04 	movi	r4,40
    bf80:	18bffe04 	addi	r2,r3,-8
    bf84:	20c9c83a 	sub	r4,r4,r3
    bf88:	80a0983a 	sll	r16,r16,r2
    bf8c:	8908d83a 	srl	r4,r17,r4
    bf90:	88a4983a 	sll	r18,r17,r2
    bf94:	2420b03a 	or	r16,r4,r16
    bf98:	017f0344 	movi	r5,-1011
    bf9c:	28e9c83a 	sub	r20,r5,r3
    bfa0:	002b883a 	mov	r21,zero
    bfa4:	0015883a 	mov	r10,zero
    bfa8:	003f9b06 	br	be18 <__muldf3+0x80>
    bfac:	8984b03a 	or	r2,r17,r6
    bfb0:	10002a1e 	bne	r2,zero,c05c <__muldf3+0x2c4>
    bfb4:	0023883a 	mov	r17,zero
    bfb8:	002f883a 	mov	r23,zero
    bfbc:	02400084 	movi	r9,2
    bfc0:	003fa706 	br	be60 <__muldf3+0xc8>
    bfc4:	8984b03a 	or	r2,r17,r6
    bfc8:	10002026 	beq	r2,zero,c04c <__muldf3+0x2b4>
    bfcc:	8800cc26 	beq	r17,zero,c300 <__muldf3+0x568>
    bfd0:	8809883a 	mov	r4,r17
    bfd4:	d8c00215 	stw	r3,8(sp)
    bfd8:	d9800315 	stw	r6,12(sp)
    bfdc:	da800015 	stw	r10,0(sp)
    bfe0:	dac00115 	stw	r11,4(sp)
    bfe4:	000cf880 	call	cf88 <__clzsi2>
    bfe8:	d8c00217 	ldw	r3,8(sp)
    bfec:	d9800317 	ldw	r6,12(sp)
    bff0:	da800017 	ldw	r10,0(sp)
    bff4:	dac00117 	ldw	r11,4(sp)
    bff8:	1009883a 	mov	r4,r2
    bffc:	01400a04 	movi	r5,40
    c000:	25fffe04 	addi	r23,r4,-8
    c004:	290bc83a 	sub	r5,r5,r4
    c008:	8dd0983a 	sll	r8,r17,r23
    c00c:	314ad83a 	srl	r5,r6,r5
    c010:	35ee983a 	sll	r23,r6,r23
    c014:	2a22b03a 	or	r17,r5,r8
    c018:	017f0344 	movi	r5,-1011
    c01c:	290bc83a 	sub	r5,r5,r4
    c020:	0013883a 	mov	r9,zero
    c024:	003f8e06 	br	be60 <__muldf3+0xc8>
    c028:	008000c4 	movi	r2,3
    c02c:	50811d26 	beq	r10,r2,c4a4 <__muldf3+0x70c>
    c030:	00800044 	movi	r2,1
    c034:	5080e01e 	bne	r10,r2,c3b8 <__muldf3+0x620>
    c038:	e0a6703a 	and	r19,fp,r2
    c03c:	0009883a 	mov	r4,zero
    c040:	0021883a 	mov	r16,zero
    c044:	0025883a 	mov	r18,zero
    c048:	003fad06 	br	bf00 <__muldf3+0x168>
    c04c:	0023883a 	mov	r17,zero
    c050:	002f883a 	mov	r23,zero
    c054:	02400044 	movi	r9,1
    c058:	003f8106 	br	be60 <__muldf3+0xc8>
    c05c:	024000c4 	movi	r9,3
    c060:	003f7f06 	br	be60 <__muldf3+0xc8>
    c064:	05400104 	movi	r21,4
    c068:	0021883a 	mov	r16,zero
    c06c:	0025883a 	mov	r18,zero
    c070:	02800044 	movi	r10,1
    c074:	003f6806 	br	be18 <__muldf3+0x80>
    c078:	05400304 	movi	r21,12
    c07c:	028000c4 	movi	r10,3
    c080:	003f6506 	br	be18 <__muldf3+0x80>
    c084:	04000434 	movhi	r16,16
    c088:	0027883a 	mov	r19,zero
    c08c:	843fffc4 	addi	r16,r16,-1
    c090:	04bfffc4 	movi	r18,-1
    c094:	0101ffc4 	movi	r4,2047
    c098:	003f9906 	br	bf00 <__muldf3+0x168>
    c09c:	8821883a 	mov	r16,r17
    c0a0:	b825883a 	mov	r18,r23
    c0a4:	5839883a 	mov	fp,r11
    c0a8:	4815883a 	mov	r10,r9
    c0ac:	003f8e06 	br	bee8 <__muldf3+0x150>
    c0b0:	8821883a 	mov	r16,r17
    c0b4:	b825883a 	mov	r18,r23
    c0b8:	b039883a 	mov	fp,r22
    c0bc:	4815883a 	mov	r10,r9
    c0c0:	003f8906 	br	bee8 <__muldf3+0x150>
    c0c4:	b80cd43a 	srli	r6,r23,16
    c0c8:	9006d43a 	srli	r3,r18,16
    c0cc:	90bfffcc 	andi	r2,r18,65535
    c0d0:	bdffffcc 	andi	r23,r23,65535
    c0d4:	b891383a 	mul	r8,r23,r2
    c0d8:	b8c9383a 	mul	r4,r23,r3
    c0dc:	309b383a 	mul	r13,r6,r2
    c0e0:	400ed43a 	srli	r7,r8,16
    c0e4:	30df383a 	mul	r15,r6,r3
    c0e8:	235b883a 	add	r13,r4,r13
    c0ec:	69db883a 	add	r13,r13,r7
    c0f0:	6900022e 	bgeu	r13,r4,c0fc <__muldf3+0x364>
    c0f4:	01000074 	movhi	r4,1
    c0f8:	791f883a 	add	r15,r15,r4
    c0fc:	8828d43a 	srli	r20,r17,16
    c100:	8c7fffcc 	andi	r17,r17,65535
    c104:	888f383a 	mul	r7,r17,r2
    c108:	88d3383a 	mul	r9,r17,r3
    c10c:	a0a5383a 	mul	r18,r20,r2
    c110:	3816d43a 	srli	r11,r7,16
    c114:	6814943a 	slli	r10,r13,16
    c118:	4ca5883a 	add	r18,r9,r18
    c11c:	423fffcc 	andi	r8,r8,65535
    c120:	92e5883a 	add	r18,r18,r11
    c124:	6808d43a 	srli	r4,r13,16
    c128:	5215883a 	add	r10,r10,r8
    c12c:	a0c7383a 	mul	r3,r20,r3
    c130:	9240022e 	bgeu	r18,r9,c13c <__muldf3+0x3a4>
    c134:	00800074 	movhi	r2,1
    c138:	1887883a 	add	r3,r3,r2
    c13c:	802ad43a 	srli	r21,r16,16
    c140:	80bfffcc 	andi	r2,r16,65535
    c144:	b893383a 	mul	r9,r23,r2
    c148:	3091383a 	mul	r8,r6,r2
    c14c:	bd6f383a 	mul	r23,r23,r21
    c150:	9026943a 	slli	r19,r18,16
    c154:	481ad43a 	srli	r13,r9,16
    c158:	9024d43a 	srli	r18,r18,16
    c15c:	39ffffcc 	andi	r7,r7,65535
    c160:	ba11883a 	add	r8,r23,r8
    c164:	99e7883a 	add	r19,r19,r7
    c168:	4351883a 	add	r8,r8,r13
    c16c:	1c97883a 	add	r11,r3,r18
    c170:	354d383a 	mul	r6,r6,r21
    c174:	9925883a 	add	r18,r19,r4
    c178:	45c0022e 	bgeu	r8,r23,c184 <__muldf3+0x3ec>
    c17c:	00c00074 	movhi	r3,1
    c180:	30cd883a 	add	r6,r6,r3
    c184:	8889383a 	mul	r4,r17,r2
    c188:	8d63383a 	mul	r17,r17,r21
    c18c:	a085383a 	mul	r2,r20,r2
    c190:	200ed43a 	srli	r7,r4,16
    c194:	401cd43a 	srli	r14,r8,16
    c198:	401a943a 	slli	r13,r8,16
    c19c:	8885883a 	add	r2,r17,r2
    c1a0:	4a3fffcc 	andi	r8,r9,65535
    c1a4:	11c5883a 	add	r2,r2,r7
    c1a8:	339d883a 	add	r14,r6,r14
    c1ac:	6a11883a 	add	r8,r13,r8
    c1b0:	a561383a 	mul	r16,r20,r21
    c1b4:	1440022e 	bgeu	r2,r17,c1c0 <__muldf3+0x428>
    c1b8:	00c00074 	movhi	r3,1
    c1bc:	80e1883a 	add	r16,r16,r3
    c1c0:	1006943a 	slli	r3,r2,16
    c1c4:	213fffcc 	andi	r4,r4,65535
    c1c8:	93db883a 	add	r13,r18,r15
    c1cc:	1909883a 	add	r4,r3,r4
    c1d0:	22c7883a 	add	r3,r4,r11
    c1d4:	6cd3803a 	cmpltu	r9,r13,r19
    c1d8:	6a09883a 	add	r4,r13,r8
    c1dc:	1a5b883a 	add	r13,r3,r9
    c1e0:	2211803a 	cmpltu	r8,r4,r8
    c1e4:	734d883a 	add	r6,r14,r13
    c1e8:	100ed43a 	srli	r7,r2,16
    c1ec:	6a53803a 	cmpltu	r9,r13,r9
    c1f0:	3205883a 	add	r2,r6,r8
    c1f4:	1ac7803a 	cmpltu	r3,r3,r11
    c1f8:	1211803a 	cmpltu	r8,r2,r8
    c1fc:	48c6b03a 	or	r3,r9,r3
    c200:	338d803a 	cmpltu	r6,r6,r14
    c204:	19c7883a 	add	r3,r3,r7
    c208:	418cb03a 	or	r6,r8,r6
    c20c:	1987883a 	add	r3,r3,r6
    c210:	2024927a 	slli	r18,r4,9
    c214:	1c07883a 	add	r3,r3,r16
    c218:	1806927a 	slli	r3,r3,9
    c21c:	1020d5fa 	srli	r16,r2,23
    c220:	2008d5fa 	srli	r4,r4,23
    c224:	9294b03a 	or	r10,r18,r10
    c228:	1004927a 	slli	r2,r2,9
    c22c:	5024c03a 	cmpne	r18,r10,zero
    c230:	1c20b03a 	or	r16,r3,r16
    c234:	9108b03a 	or	r4,r18,r4
    c238:	80c0402c 	andhi	r3,r16,256
    c23c:	20a4b03a 	or	r18,r4,r2
    c240:	18000726 	beq	r3,zero,c260 <__muldf3+0x4c8>
    c244:	9006d07a 	srli	r3,r18,1
    c248:	800897fa 	slli	r4,r16,31
    c24c:	9080004c 	andi	r2,r18,1
    c250:	8020d07a 	srli	r16,r16,1
    c254:	10c4b03a 	or	r2,r2,r3
    c258:	1124b03a 	or	r18,r2,r4
    c25c:	600b883a 	mov	r5,r12
    c260:	2900ffc4 	addi	r4,r5,1023
    c264:	01004b0e 	bge	zero,r4,c394 <__muldf3+0x5fc>
    c268:	908001cc 	andi	r2,r18,7
    c26c:	10000726 	beq	r2,zero,c28c <__muldf3+0x4f4>
    c270:	90c003cc 	andi	r3,r18,15
    c274:	00800104 	movi	r2,4
    c278:	18800426 	beq	r3,r2,c28c <__muldf3+0x4f4>
    c27c:	9087883a 	add	r3,r18,r2
    c280:	1c85803a 	cmpltu	r2,r3,r18
    c284:	80a1883a 	add	r16,r16,r2
    c288:	1825883a 	mov	r18,r3
    c28c:	8080402c 	andhi	r2,r16,256
    c290:	10000426 	beq	r2,zero,c2a4 <__muldf3+0x50c>
    c294:	00bfc034 	movhi	r2,65280
    c298:	10bfffc4 	addi	r2,r2,-1
    c29c:	29010004 	addi	r4,r5,1024
    c2a0:	80a0703a 	and	r16,r16,r2
    c2a4:	0081ff84 	movi	r2,2046
    c2a8:	1100320e 	bge	r2,r4,c374 <__muldf3+0x5dc>
    c2ac:	b4c0004c 	andi	r19,r22,1
    c2b0:	0101ffc4 	movi	r4,2047
    c2b4:	0021883a 	mov	r16,zero
    c2b8:	0025883a 	mov	r18,zero
    c2bc:	003f1006 	br	bf00 <__muldf3+0x168>
    c2c0:	8080022c 	andhi	r2,r16,8
    c2c4:	10000926 	beq	r2,zero,c2ec <__muldf3+0x554>
    c2c8:	8880022c 	andhi	r2,r17,8
    c2cc:	1000071e 	bne	r2,zero,c2ec <__muldf3+0x554>
    c2d0:	00800434 	movhi	r2,16
    c2d4:	8c000234 	orhi	r16,r17,8
    c2d8:	10bfffc4 	addi	r2,r2,-1
    c2dc:	1827883a 	mov	r19,r3
    c2e0:	80a0703a 	and	r16,r16,r2
    c2e4:	b825883a 	mov	r18,r23
    c2e8:	003f6a06 	br	c094 <__muldf3+0x2fc>
    c2ec:	00800434 	movhi	r2,16
    c2f0:	84000234 	orhi	r16,r16,8
    c2f4:	10bfffc4 	addi	r2,r2,-1
    c2f8:	80a0703a 	and	r16,r16,r2
    c2fc:	003f6506 	br	c094 <__muldf3+0x2fc>
    c300:	3009883a 	mov	r4,r6
    c304:	d8c00215 	stw	r3,8(sp)
    c308:	d9800315 	stw	r6,12(sp)
    c30c:	da800015 	stw	r10,0(sp)
    c310:	dac00115 	stw	r11,4(sp)
    c314:	000cf880 	call	cf88 <__clzsi2>
    c318:	11000804 	addi	r4,r2,32
    c31c:	014009c4 	movi	r5,39
    c320:	d8c00217 	ldw	r3,8(sp)
    c324:	d9800317 	ldw	r6,12(sp)
    c328:	da800017 	ldw	r10,0(sp)
    c32c:	dac00117 	ldw	r11,4(sp)
    c330:	293f320e 	bge	r5,r4,bffc <__muldf3+0x264>
    c334:	10bffe04 	addi	r2,r2,-8
    c338:	b8a2983a 	sll	r17,r23,r2
    c33c:	002f883a 	mov	r23,zero
    c340:	003f3506 	br	c018 <__muldf3+0x280>
    c344:	d9800315 	stw	r6,12(sp)
    c348:	d9c00015 	stw	r7,0(sp)
    c34c:	000cf880 	call	cf88 <__clzsi2>
    c350:	10c00804 	addi	r3,r2,32
    c354:	010009c4 	movi	r4,39
    c358:	d9800317 	ldw	r6,12(sp)
    c35c:	d9c00017 	ldw	r7,0(sp)
    c360:	20ff060e 	bge	r4,r3,bf7c <__muldf3+0x1e4>
    c364:	10bffe04 	addi	r2,r2,-8
    c368:	88a0983a 	sll	r16,r17,r2
    c36c:	0025883a 	mov	r18,zero
    c370:	003f0906 	br	bf98 <__muldf3+0x200>
    c374:	9004d0fa 	srli	r2,r18,3
    c378:	8024977a 	slli	r18,r16,29
    c37c:	8020927a 	slli	r16,r16,9
    c380:	2101ffcc 	andi	r4,r4,2047
    c384:	90a4b03a 	or	r18,r18,r2
    c388:	8020d33a 	srli	r16,r16,12
    c38c:	b4c0004c 	andi	r19,r22,1
    c390:	003edb06 	br	bf00 <__muldf3+0x168>
    c394:	00ff0084 	movi	r3,-1022
    c398:	1947c83a 	sub	r3,r3,r5
    c39c:	00800e04 	movi	r2,56
    c3a0:	10c0080e 	bge	r2,r3,c3c4 <__muldf3+0x62c>
    c3a4:	b4c0004c 	andi	r19,r22,1
    c3a8:	0009883a 	mov	r4,zero
    c3ac:	0021883a 	mov	r16,zero
    c3b0:	0025883a 	mov	r18,zero
    c3b4:	003ed206 	br	bf00 <__muldf3+0x168>
    c3b8:	600b883a 	mov	r5,r12
    c3bc:	e02d883a 	mov	r22,fp
    c3c0:	003fa706 	br	c260 <__muldf3+0x4c8>
    c3c4:	008007c4 	movi	r2,31
    c3c8:	10c01816 	blt	r2,r3,c42c <__muldf3+0x694>
    c3cc:	29410784 	addi	r5,r5,1054
    c3d0:	8144983a 	sll	r2,r16,r5
    c3d4:	90c8d83a 	srl	r4,r18,r3
    c3d8:	914a983a 	sll	r5,r18,r5
    c3dc:	80c6d83a 	srl	r3,r16,r3
    c3e0:	2088b03a 	or	r4,r4,r2
    c3e4:	2804c03a 	cmpne	r2,r5,zero
    c3e8:	2084b03a 	or	r2,r4,r2
    c3ec:	110001cc 	andi	r4,r2,7
    c3f0:	20000726 	beq	r4,zero,c410 <__muldf3+0x678>
    c3f4:	114003cc 	andi	r5,r2,15
    c3f8:	01000104 	movi	r4,4
    c3fc:	29000426 	beq	r5,r4,c410 <__muldf3+0x678>
    c400:	11000104 	addi	r4,r2,4
    c404:	2085803a 	cmpltu	r2,r4,r2
    c408:	1887883a 	add	r3,r3,r2
    c40c:	2005883a 	mov	r2,r4
    c410:	1900202c 	andhi	r4,r3,128
    c414:	20001826 	beq	r4,zero,c478 <__muldf3+0x6e0>
    c418:	b4c0004c 	andi	r19,r22,1
    c41c:	01000044 	movi	r4,1
    c420:	0021883a 	mov	r16,zero
    c424:	0025883a 	mov	r18,zero
    c428:	003eb506 	br	bf00 <__muldf3+0x168>
    c42c:	00bef884 	movi	r2,-1054
    c430:	1145c83a 	sub	r2,r2,r5
    c434:	8088d83a 	srl	r4,r16,r2
    c438:	00800804 	movi	r2,32
    c43c:	18801726 	beq	r3,r2,c49c <__muldf3+0x704>
    c440:	28810f84 	addi	r2,r5,1086
    c444:	8084983a 	sll	r2,r16,r2
    c448:	1484b03a 	or	r2,r2,r18
    c44c:	1004c03a 	cmpne	r2,r2,zero
    c450:	1104b03a 	or	r2,r2,r4
    c454:	10c001cc 	andi	r3,r2,7
    c458:	18000b1e 	bne	r3,zero,c488 <__muldf3+0x6f0>
    c45c:	0021883a 	mov	r16,zero
    c460:	1004d0fa 	srli	r2,r2,3
    c464:	b4c0004c 	andi	r19,r22,1
    c468:	0009883a 	mov	r4,zero
    c46c:	10e4b03a 	or	r18,r2,r3
    c470:	003ea306 	br	bf00 <__muldf3+0x168>
    c474:	0007883a 	mov	r3,zero
    c478:	1820927a 	slli	r16,r3,9
    c47c:	1806977a 	slli	r3,r3,29
    c480:	8020d33a 	srli	r16,r16,12
    c484:	003ff606 	br	c460 <__muldf3+0x6c8>
    c488:	110003cc 	andi	r4,r2,15
    c48c:	00c00104 	movi	r3,4
    c490:	20fff826 	beq	r4,r3,c474 <__muldf3+0x6dc>
    c494:	0007883a 	mov	r3,zero
    c498:	003fd906 	br	c400 <__muldf3+0x668>
    c49c:	0005883a 	mov	r2,zero
    c4a0:	003fe906 	br	c448 <__muldf3+0x6b0>
    c4a4:	00800434 	movhi	r2,16
    c4a8:	84000234 	orhi	r16,r16,8
    c4ac:	10bfffc4 	addi	r2,r2,-1
    c4b0:	e4c0004c 	andi	r19,fp,1
    c4b4:	80a0703a 	and	r16,r16,r2
    c4b8:	003ef606 	br	c094 <__muldf3+0x2fc>

0000c4bc <__subdf3>:
    c4bc:	00c00434 	movhi	r3,16
    c4c0:	18ffffc4 	addi	r3,r3,-1
    c4c4:	defffb04 	addi	sp,sp,-20
    c4c8:	28d2703a 	and	r9,r5,r3
    c4cc:	3814d53a 	srli	r10,r7,20
    c4d0:	38c6703a 	and	r3,r7,r3
    c4d4:	3004d77a 	srli	r2,r6,29
    c4d8:	dc800215 	stw	r18,8(sp)
    c4dc:	dc000015 	stw	r16,0(sp)
    c4e0:	2824d7fa 	srli	r18,r5,31
    c4e4:	2820d53a 	srli	r16,r5,20
    c4e8:	481290fa 	slli	r9,r9,3
    c4ec:	200ad77a 	srli	r5,r4,29
    c4f0:	180690fa 	slli	r3,r3,3
    c4f4:	dc400115 	stw	r17,4(sp)
    c4f8:	dfc00415 	stw	ra,16(sp)
    c4fc:	202290fa 	slli	r17,r4,3
    c500:	dcc00315 	stw	r19,12(sp)
    c504:	5281ffcc 	andi	r10,r10,2047
    c508:	0101ffc4 	movi	r4,2047
    c50c:	9011883a 	mov	r8,r18
    c510:	8401ffcc 	andi	r16,r16,2047
    c514:	94803fcc 	andi	r18,r18,255
    c518:	494ab03a 	or	r5,r9,r5
    c51c:	380ed7fa 	srli	r7,r7,31
    c520:	1886b03a 	or	r3,r3,r2
    c524:	300c90fa 	slli	r6,r6,3
    c528:	51009026 	beq	r10,r4,c76c <__subdf3+0x2b0>
    c52c:	39c0005c 	xori	r7,r7,1
    c530:	8285c83a 	sub	r2,r16,r10
    c534:	91c06f26 	beq	r18,r7,c6f4 <__subdf3+0x238>
    c538:	0080b10e 	bge	zero,r2,c800 <__subdf3+0x344>
    c53c:	50002a1e 	bne	r10,zero,c5e8 <__subdf3+0x12c>
    c540:	1988b03a 	or	r4,r3,r6
    c544:	2000941e 	bne	r4,zero,c798 <__subdf3+0x2dc>
    c548:	888001cc 	andi	r2,r17,7
    c54c:	10005b26 	beq	r2,zero,c6bc <__subdf3+0x200>
    c550:	88c003cc 	andi	r3,r17,15
    c554:	00800104 	movi	r2,4
    c558:	18805826 	beq	r3,r2,c6bc <__subdf3+0x200>
    c55c:	88c00104 	addi	r3,r17,4
    c560:	1c63803a 	cmpltu	r17,r3,r17
    c564:	2c4b883a 	add	r5,r5,r17
    c568:	2880202c 	andhi	r2,r5,128
    c56c:	9200004c 	andi	r8,r18,1
    c570:	1823883a 	mov	r17,r3
    c574:	10005426 	beq	r2,zero,c6c8 <__subdf3+0x20c>
    c578:	84000044 	addi	r16,r16,1
    c57c:	0081ffc4 	movi	r2,2047
    c580:	8080bf26 	beq	r16,r2,c880 <__subdf3+0x3c4>
    c584:	013fe034 	movhi	r4,65408
    c588:	213fffc4 	addi	r4,r4,-1
    c58c:	290a703a 	and	r5,r5,r4
    c590:	2804977a 	slli	r2,r5,29
    c594:	280a927a 	slli	r5,r5,9
    c598:	8822d0fa 	srli	r17,r17,3
    c59c:	8401ffcc 	andi	r16,r16,2047
    c5a0:	2808d33a 	srli	r4,r5,12
    c5a4:	1444b03a 	or	r2,r2,r17
    c5a8:	8401ffcc 	andi	r16,r16,2047
    c5ac:	800a953a 	slli	r5,r16,20
    c5b0:	40c03fcc 	andi	r3,r8,255
    c5b4:	04000434 	movhi	r16,16
    c5b8:	180697fa 	slli	r3,r3,31
    c5bc:	843fffc4 	addi	r16,r16,-1
    c5c0:	2420703a 	and	r16,r4,r16
    c5c4:	8160b03a 	or	r16,r16,r5
    c5c8:	80c6b03a 	or	r3,r16,r3
    c5cc:	dfc00417 	ldw	ra,16(sp)
    c5d0:	dcc00317 	ldw	r19,12(sp)
    c5d4:	dc800217 	ldw	r18,8(sp)
    c5d8:	dc400117 	ldw	r17,4(sp)
    c5dc:	dc000017 	ldw	r16,0(sp)
    c5e0:	dec00504 	addi	sp,sp,20
    c5e4:	f800283a 	ret
    c5e8:	0101ffc4 	movi	r4,2047
    c5ec:	813fd626 	beq	r16,r4,c548 <__subdf3+0x8c>
    c5f0:	18c02034 	orhi	r3,r3,128
    c5f4:	01000e04 	movi	r4,56
    c5f8:	2080a416 	blt	r4,r2,c88c <__subdf3+0x3d0>
    c5fc:	010007c4 	movi	r4,31
    c600:	2080c716 	blt	r4,r2,c920 <__subdf3+0x464>
    c604:	01000804 	movi	r4,32
    c608:	2089c83a 	sub	r4,r4,r2
    c60c:	1910983a 	sll	r8,r3,r4
    c610:	308ed83a 	srl	r7,r6,r2
    c614:	3108983a 	sll	r4,r6,r4
    c618:	1884d83a 	srl	r2,r3,r2
    c61c:	41ccb03a 	or	r6,r8,r7
    c620:	2008c03a 	cmpne	r4,r4,zero
    c624:	310cb03a 	or	r6,r6,r4
    c628:	898dc83a 	sub	r6,r17,r6
    c62c:	89a3803a 	cmpltu	r17,r17,r6
    c630:	288bc83a 	sub	r5,r5,r2
    c634:	2c4bc83a 	sub	r5,r5,r17
    c638:	3023883a 	mov	r17,r6
    c63c:	2880202c 	andhi	r2,r5,128
    c640:	10006b26 	beq	r2,zero,c7f0 <__subdf3+0x334>
    c644:	04c02034 	movhi	r19,128
    c648:	9cffffc4 	addi	r19,r19,-1
    c64c:	2ce6703a 	and	r19,r5,r19
    c650:	98007c26 	beq	r19,zero,c844 <__subdf3+0x388>
    c654:	9809883a 	mov	r4,r19
    c658:	000cf880 	call	cf88 <__clzsi2>
    c65c:	10fffe04 	addi	r3,r2,-8
    c660:	010007c4 	movi	r4,31
    c664:	20c07d16 	blt	r4,r3,c85c <__subdf3+0x3a0>
    c668:	01400a04 	movi	r5,40
    c66c:	2885c83a 	sub	r2,r5,r2
    c670:	888ad83a 	srl	r5,r17,r2
    c674:	98e6983a 	sll	r19,r19,r3
    c678:	88e2983a 	sll	r17,r17,r3
    c67c:	2ce6b03a 	or	r19,r5,r19
    c680:	1c007a16 	blt	r3,r16,c86c <__subdf3+0x3b0>
    c684:	1c21c83a 	sub	r16,r3,r16
    c688:	81400044 	addi	r5,r16,1
    c68c:	00c007c4 	movi	r3,31
    c690:	19409616 	blt	r3,r5,c8ec <__subdf3+0x430>
    c694:	1c21c83a 	sub	r16,r3,r16
    c698:	8c08983a 	sll	r4,r17,r16
    c69c:	8946d83a 	srl	r3,r17,r5
    c6a0:	9c20983a 	sll	r16,r19,r16
    c6a4:	2008c03a 	cmpne	r4,r4,zero
    c6a8:	994ad83a 	srl	r5,r19,r5
    c6ac:	1c06b03a 	or	r3,r3,r16
    c6b0:	1922b03a 	or	r17,r3,r4
    c6b4:	0021883a 	mov	r16,zero
    c6b8:	003fa306 	br	c548 <__subdf3+0x8c>
    c6bc:	2880202c 	andhi	r2,r5,128
    c6c0:	9200004c 	andi	r8,r18,1
    c6c4:	103fac1e 	bne	r2,zero,c578 <__subdf3+0xbc>
    c6c8:	2804977a 	slli	r2,r5,29
    c6cc:	8822d0fa 	srli	r17,r17,3
    c6d0:	00c1ffc4 	movi	r3,2047
    c6d4:	280ad0fa 	srli	r5,r5,3
    c6d8:	1444b03a 	or	r2,r2,r17
    c6dc:	80c02726 	beq	r16,r3,c77c <__subdf3+0x2c0>
    c6e0:	01000434 	movhi	r4,16
    c6e4:	213fffc4 	addi	r4,r4,-1
    c6e8:	80e0703a 	and	r16,r16,r3
    c6ec:	2908703a 	and	r4,r5,r4
    c6f0:	003fad06 	br	c5a8 <__subdf3+0xec>
    c6f4:	0080690e 	bge	zero,r2,c89c <__subdf3+0x3e0>
    c6f8:	50002f26 	beq	r10,zero,c7b8 <__subdf3+0x2fc>
    c6fc:	0101ffc4 	movi	r4,2047
    c700:	813f9126 	beq	r16,r4,c548 <__subdf3+0x8c>
    c704:	18c02034 	orhi	r3,r3,128
    c708:	01000e04 	movi	r4,56
    c70c:	2080b00e 	bge	r4,r2,c9d0 <__subdf3+0x514>
    c710:	198cb03a 	or	r6,r3,r6
    c714:	300ec03a 	cmpne	r7,r6,zero
    c718:	0005883a 	mov	r2,zero
    c71c:	3c4f883a 	add	r7,r7,r17
    c720:	3c63803a 	cmpltu	r17,r7,r17
    c724:	114b883a 	add	r5,r2,r5
    c728:	2c4b883a 	add	r5,r5,r17
    c72c:	3823883a 	mov	r17,r7
    c730:	2880202c 	andhi	r2,r5,128
    c734:	10002e26 	beq	r2,zero,c7f0 <__subdf3+0x334>
    c738:	84000044 	addi	r16,r16,1
    c73c:	0081ffc4 	movi	r2,2047
    c740:	8080de26 	beq	r16,r2,cabc <__subdf3+0x600>
    c744:	00bfe034 	movhi	r2,65408
    c748:	10bfffc4 	addi	r2,r2,-1
    c74c:	288a703a 	and	r5,r5,r2
    c750:	880cd07a 	srli	r6,r17,1
    c754:	280897fa 	slli	r4,r5,31
    c758:	88c0004c 	andi	r3,r17,1
    c75c:	30e2b03a 	or	r17,r6,r3
    c760:	280ad07a 	srli	r5,r5,1
    c764:	8922b03a 	or	r17,r17,r4
    c768:	003f7706 	br	c548 <__subdf3+0x8c>
    c76c:	1984b03a 	or	r2,r3,r6
    c770:	103f6e26 	beq	r2,zero,c52c <__subdf3+0x70>
    c774:	39c03fcc 	andi	r7,r7,255
    c778:	003f6d06 	br	c530 <__subdf3+0x74>
    c77c:	1146b03a 	or	r3,r2,r5
    c780:	18003f26 	beq	r3,zero,c880 <__subdf3+0x3c4>
    c784:	00c00434 	movhi	r3,16
    c788:	29000234 	orhi	r4,r5,8
    c78c:	18ffffc4 	addi	r3,r3,-1
    c790:	20c8703a 	and	r4,r4,r3
    c794:	003f8406 	br	c5a8 <__subdf3+0xec>
    c798:	10bfffc4 	addi	r2,r2,-1
    c79c:	1000501e 	bne	r2,zero,c8e0 <__subdf3+0x424>
    c7a0:	898fc83a 	sub	r7,r17,r6
    c7a4:	89e3803a 	cmpltu	r17,r17,r7
    c7a8:	28cbc83a 	sub	r5,r5,r3
    c7ac:	2c4bc83a 	sub	r5,r5,r17
    c7b0:	3823883a 	mov	r17,r7
    c7b4:	003fa106 	br	c63c <__subdf3+0x180>
    c7b8:	1988b03a 	or	r4,r3,r6
    c7bc:	203f6226 	beq	r4,zero,c548 <__subdf3+0x8c>
    c7c0:	10bfffc4 	addi	r2,r2,-1
    c7c4:	10009b1e 	bne	r2,zero,ca34 <__subdf3+0x578>
    c7c8:	344d883a 	add	r6,r6,r17
    c7cc:	3463803a 	cmpltu	r17,r6,r17
    c7d0:	194b883a 	add	r5,r3,r5
    c7d4:	2c4b883a 	add	r5,r5,r17
    c7d8:	3023883a 	mov	r17,r6
    c7dc:	003fd406 	br	c730 <__subdf3+0x274>
    c7e0:	1106b03a 	or	r3,r2,r4
    c7e4:	1800b426 	beq	r3,zero,cab8 <__subdf3+0x5fc>
    c7e8:	100b883a 	mov	r5,r2
    c7ec:	2023883a 	mov	r17,r4
    c7f0:	888001cc 	andi	r2,r17,7
    c7f4:	103f561e 	bne	r2,zero,c550 <__subdf3+0x94>
    c7f8:	9200004c 	andi	r8,r18,1
    c7fc:	003fb206 	br	c6c8 <__subdf3+0x20c>
    c800:	1000531e 	bne	r2,zero,c950 <__subdf3+0x494>
    c804:	80800044 	addi	r2,r16,1
    c808:	1081ffcc 	andi	r2,r2,2047
    c80c:	01000044 	movi	r4,1
    c810:	2080a00e 	bge	r4,r2,ca94 <__subdf3+0x5d8>
    c814:	8985c83a 	sub	r2,r17,r6
    c818:	8889803a 	cmpltu	r4,r17,r2
    c81c:	28e7c83a 	sub	r19,r5,r3
    c820:	9927c83a 	sub	r19,r19,r4
    c824:	9900202c 	andhi	r4,r19,128
    c828:	20006226 	beq	r4,zero,c9b4 <__subdf3+0x4f8>
    c82c:	3463c83a 	sub	r17,r6,r17
    c830:	194bc83a 	sub	r5,r3,r5
    c834:	344d803a 	cmpltu	r6,r6,r17
    c838:	29a7c83a 	sub	r19,r5,r6
    c83c:	3825883a 	mov	r18,r7
    c840:	983f841e 	bne	r19,zero,c654 <__subdf3+0x198>
    c844:	8809883a 	mov	r4,r17
    c848:	000cf880 	call	cf88 <__clzsi2>
    c84c:	10800804 	addi	r2,r2,32
    c850:	10fffe04 	addi	r3,r2,-8
    c854:	010007c4 	movi	r4,31
    c858:	20ff830e 	bge	r4,r3,c668 <__subdf3+0x1ac>
    c85c:	14fff604 	addi	r19,r2,-40
    c860:	8ce6983a 	sll	r19,r17,r19
    c864:	0023883a 	mov	r17,zero
    c868:	1c3f860e 	bge	r3,r16,c684 <__subdf3+0x1c8>
    c86c:	017fe034 	movhi	r5,65408
    c870:	297fffc4 	addi	r5,r5,-1
    c874:	80e1c83a 	sub	r16,r16,r3
    c878:	994a703a 	and	r5,r19,r5
    c87c:	003f3206 	br	c548 <__subdf3+0x8c>
    c880:	0009883a 	mov	r4,zero
    c884:	0005883a 	mov	r2,zero
    c888:	003f4706 	br	c5a8 <__subdf3+0xec>
    c88c:	198cb03a 	or	r6,r3,r6
    c890:	300cc03a 	cmpne	r6,r6,zero
    c894:	0005883a 	mov	r2,zero
    c898:	003f6306 	br	c628 <__subdf3+0x16c>
    c89c:	10009d1e 	bne	r2,zero,cb14 <__subdf3+0x658>
    c8a0:	81c00044 	addi	r7,r16,1
    c8a4:	3881ffcc 	andi	r2,r7,2047
    c8a8:	02400044 	movi	r9,1
    c8ac:	4880680e 	bge	r9,r2,ca50 <__subdf3+0x594>
    c8b0:	0081ffc4 	movi	r2,2047
    c8b4:	3880ae26 	beq	r7,r2,cb70 <__subdf3+0x6b4>
    c8b8:	344d883a 	add	r6,r6,r17
    c8bc:	3463803a 	cmpltu	r17,r6,r17
    c8c0:	194b883a 	add	r5,r3,r5
    c8c4:	2c4b883a 	add	r5,r5,r17
    c8c8:	282297fa 	slli	r17,r5,31
    c8cc:	300cd07a 	srli	r6,r6,1
    c8d0:	280ad07a 	srli	r5,r5,1
    c8d4:	3821883a 	mov	r16,r7
    c8d8:	89a2b03a 	or	r17,r17,r6
    c8dc:	003f1a06 	br	c548 <__subdf3+0x8c>
    c8e0:	0101ffc4 	movi	r4,2047
    c8e4:	813f431e 	bne	r16,r4,c5f4 <__subdf3+0x138>
    c8e8:	003f1706 	br	c548 <__subdf3+0x8c>
    c8ec:	80bff844 	addi	r2,r16,-31
    c8f0:	00c00804 	movi	r3,32
    c8f4:	9884d83a 	srl	r2,r19,r2
    c8f8:	28c05126 	beq	r5,r3,ca40 <__subdf3+0x584>
    c8fc:	00c00fc4 	movi	r3,63
    c900:	1c21c83a 	sub	r16,r3,r16
    c904:	9c26983a 	sll	r19,r19,r16
    c908:	9c62b03a 	or	r17,r19,r17
    c90c:	8822c03a 	cmpne	r17,r17,zero
    c910:	88a2b03a 	or	r17,r17,r2
    c914:	000b883a 	mov	r5,zero
    c918:	0021883a 	mov	r16,zero
    c91c:	003fb406 	br	c7f0 <__subdf3+0x334>
    c920:	113ff804 	addi	r4,r2,-32
    c924:	01c00804 	movi	r7,32
    c928:	1908d83a 	srl	r4,r3,r4
    c92c:	11c04626 	beq	r2,r7,ca48 <__subdf3+0x58c>
    c930:	01c01004 	movi	r7,64
    c934:	3885c83a 	sub	r2,r7,r2
    c938:	1884983a 	sll	r2,r3,r2
    c93c:	118cb03a 	or	r6,r2,r6
    c940:	300cc03a 	cmpne	r6,r6,zero
    c944:	310cb03a 	or	r6,r6,r4
    c948:	0005883a 	mov	r2,zero
    c94c:	003f3606 	br	c628 <__subdf3+0x16c>
    c950:	80002b26 	beq	r16,zero,ca00 <__subdf3+0x544>
    c954:	0101ffc4 	movi	r4,2047
    c958:	51006926 	beq	r10,r4,cb00 <__subdf3+0x644>
    c95c:	0085c83a 	sub	r2,zero,r2
    c960:	29402034 	orhi	r5,r5,128
    c964:	01000e04 	movi	r4,56
    c968:	20807d16 	blt	r4,r2,cb60 <__subdf3+0x6a4>
    c96c:	010007c4 	movi	r4,31
    c970:	2080d916 	blt	r4,r2,ccd8 <__subdf3+0x81c>
    c974:	01000804 	movi	r4,32
    c978:	2089c83a 	sub	r4,r4,r2
    c97c:	2912983a 	sll	r9,r5,r4
    c980:	8890d83a 	srl	r8,r17,r2
    c984:	8908983a 	sll	r4,r17,r4
    c988:	2884d83a 	srl	r2,r5,r2
    c98c:	4a22b03a 	or	r17,r9,r8
    c990:	2008c03a 	cmpne	r4,r4,zero
    c994:	8922b03a 	or	r17,r17,r4
    c998:	3463c83a 	sub	r17,r6,r17
    c99c:	1885c83a 	sub	r2,r3,r2
    c9a0:	344d803a 	cmpltu	r6,r6,r17
    c9a4:	118bc83a 	sub	r5,r2,r6
    c9a8:	5021883a 	mov	r16,r10
    c9ac:	3825883a 	mov	r18,r7
    c9b0:	003f2206 	br	c63c <__subdf3+0x180>
    c9b4:	9886b03a 	or	r3,r19,r2
    c9b8:	18001c1e 	bne	r3,zero,ca2c <__subdf3+0x570>
    c9bc:	0011883a 	mov	r8,zero
    c9c0:	000b883a 	mov	r5,zero
    c9c4:	0023883a 	mov	r17,zero
    c9c8:	0021883a 	mov	r16,zero
    c9cc:	003f3e06 	br	c6c8 <__subdf3+0x20c>
    c9d0:	010007c4 	movi	r4,31
    c9d4:	20803c16 	blt	r4,r2,cac8 <__subdf3+0x60c>
    c9d8:	01000804 	movi	r4,32
    c9dc:	2089c83a 	sub	r4,r4,r2
    c9e0:	1912983a 	sll	r9,r3,r4
    c9e4:	308ed83a 	srl	r7,r6,r2
    c9e8:	3108983a 	sll	r4,r6,r4
    c9ec:	1884d83a 	srl	r2,r3,r2
    c9f0:	49ceb03a 	or	r7,r9,r7
    c9f4:	2008c03a 	cmpne	r4,r4,zero
    c9f8:	390eb03a 	or	r7,r7,r4
    c9fc:	003f4706 	br	c71c <__subdf3+0x260>
    ca00:	2c48b03a 	or	r4,r5,r17
    ca04:	20003e26 	beq	r4,zero,cb00 <__subdf3+0x644>
    ca08:	0084303a 	nor	r2,zero,r2
    ca0c:	10003a1e 	bne	r2,zero,caf8 <__subdf3+0x63c>
    ca10:	3463c83a 	sub	r17,r6,r17
    ca14:	194bc83a 	sub	r5,r3,r5
    ca18:	344d803a 	cmpltu	r6,r6,r17
    ca1c:	298bc83a 	sub	r5,r5,r6
    ca20:	5021883a 	mov	r16,r10
    ca24:	3825883a 	mov	r18,r7
    ca28:	003f0406 	br	c63c <__subdf3+0x180>
    ca2c:	1023883a 	mov	r17,r2
    ca30:	003f0706 	br	c650 <__subdf3+0x194>
    ca34:	0101ffc4 	movi	r4,2047
    ca38:	813f331e 	bne	r16,r4,c708 <__subdf3+0x24c>
    ca3c:	003ec206 	br	c548 <__subdf3+0x8c>
    ca40:	0027883a 	mov	r19,zero
    ca44:	003fb006 	br	c908 <__subdf3+0x44c>
    ca48:	0005883a 	mov	r2,zero
    ca4c:	003fbb06 	br	c93c <__subdf3+0x480>
    ca50:	2c44b03a 	or	r2,r5,r17
    ca54:	80008b1e 	bne	r16,zero,cc84 <__subdf3+0x7c8>
    ca58:	1000b526 	beq	r2,zero,cd30 <__subdf3+0x874>
    ca5c:	1984b03a 	or	r2,r3,r6
    ca60:	103eb926 	beq	r2,zero,c548 <__subdf3+0x8c>
    ca64:	3449883a 	add	r4,r6,r17
    ca68:	2463803a 	cmpltu	r17,r4,r17
    ca6c:	194b883a 	add	r5,r3,r5
    ca70:	2c4b883a 	add	r5,r5,r17
    ca74:	2880202c 	andhi	r2,r5,128
    ca78:	2023883a 	mov	r17,r4
    ca7c:	103f5c26 	beq	r2,zero,c7f0 <__subdf3+0x334>
    ca80:	00bfe034 	movhi	r2,65408
    ca84:	10bfffc4 	addi	r2,r2,-1
    ca88:	4821883a 	mov	r16,r9
    ca8c:	288a703a 	and	r5,r5,r2
    ca90:	003ead06 	br	c548 <__subdf3+0x8c>
    ca94:	2c44b03a 	or	r2,r5,r17
    ca98:	8000291e 	bne	r16,zero,cb40 <__subdf3+0x684>
    ca9c:	10004f1e 	bne	r2,zero,cbdc <__subdf3+0x720>
    caa0:	1984b03a 	or	r2,r3,r6
    caa4:	10000426 	beq	r2,zero,cab8 <__subdf3+0x5fc>
    caa8:	180b883a 	mov	r5,r3
    caac:	3023883a 	mov	r17,r6
    cab0:	3825883a 	mov	r18,r7
    cab4:	003ea406 	br	c548 <__subdf3+0x8c>
    cab8:	0011883a 	mov	r8,zero
    cabc:	000b883a 	mov	r5,zero
    cac0:	0023883a 	mov	r17,zero
    cac4:	003f0006 	br	c6c8 <__subdf3+0x20c>
    cac8:	11fff804 	addi	r7,r2,-32
    cacc:	19c8d83a 	srl	r4,r3,r7
    cad0:	01c00804 	movi	r7,32
    cad4:	11c07e26 	beq	r2,r7,ccd0 <__subdf3+0x814>
    cad8:	01c01004 	movi	r7,64
    cadc:	3885c83a 	sub	r2,r7,r2
    cae0:	1884983a 	sll	r2,r3,r2
    cae4:	118cb03a 	or	r6,r2,r6
    cae8:	300ec03a 	cmpne	r7,r6,zero
    caec:	390eb03a 	or	r7,r7,r4
    caf0:	0005883a 	mov	r2,zero
    caf4:	003f0906 	br	c71c <__subdf3+0x260>
    caf8:	0101ffc4 	movi	r4,2047
    cafc:	513f991e 	bne	r10,r4,c964 <__subdf3+0x4a8>
    cb00:	180b883a 	mov	r5,r3
    cb04:	3023883a 	mov	r17,r6
    cb08:	5021883a 	mov	r16,r10
    cb0c:	3825883a 	mov	r18,r7
    cb10:	003e8d06 	br	c548 <__subdf3+0x8c>
    cb14:	80001a1e 	bne	r16,zero,cb80 <__subdf3+0x6c4>
    cb18:	2c48b03a 	or	r4,r5,r17
    cb1c:	20005526 	beq	r4,zero,cc74 <__subdf3+0x7b8>
    cb20:	0084303a 	nor	r2,zero,r2
    cb24:	1000511e 	bne	r2,zero,cc6c <__subdf3+0x7b0>
    cb28:	89a3883a 	add	r17,r17,r6
    cb2c:	194b883a 	add	r5,r3,r5
    cb30:	898d803a 	cmpltu	r6,r17,r6
    cb34:	298b883a 	add	r5,r5,r6
    cb38:	5021883a 	mov	r16,r10
    cb3c:	003efc06 	br	c730 <__subdf3+0x274>
    cb40:	1000341e 	bne	r2,zero,cc14 <__subdf3+0x758>
    cb44:	1984b03a 	or	r2,r3,r6
    cb48:	10006f26 	beq	r2,zero,cd08 <__subdf3+0x84c>
    cb4c:	180b883a 	mov	r5,r3
    cb50:	3023883a 	mov	r17,r6
    cb54:	3825883a 	mov	r18,r7
    cb58:	0401ffc4 	movi	r16,2047
    cb5c:	003e7a06 	br	c548 <__subdf3+0x8c>
    cb60:	2c62b03a 	or	r17,r5,r17
    cb64:	8822c03a 	cmpne	r17,r17,zero
    cb68:	0005883a 	mov	r2,zero
    cb6c:	003f8a06 	br	c998 <__subdf3+0x4dc>
    cb70:	3821883a 	mov	r16,r7
    cb74:	000b883a 	mov	r5,zero
    cb78:	0023883a 	mov	r17,zero
    cb7c:	003ed206 	br	c6c8 <__subdf3+0x20c>
    cb80:	0101ffc4 	movi	r4,2047
    cb84:	51003b26 	beq	r10,r4,cc74 <__subdf3+0x7b8>
    cb88:	0085c83a 	sub	r2,zero,r2
    cb8c:	29402034 	orhi	r5,r5,128
    cb90:	01000e04 	movi	r4,56
    cb94:	20806216 	blt	r4,r2,cd20 <__subdf3+0x864>
    cb98:	010007c4 	movi	r4,31
    cb9c:	20806b16 	blt	r4,r2,cd4c <__subdf3+0x890>
    cba0:	01000804 	movi	r4,32
    cba4:	2089c83a 	sub	r4,r4,r2
    cba8:	2912983a 	sll	r9,r5,r4
    cbac:	888ed83a 	srl	r7,r17,r2
    cbb0:	8908983a 	sll	r4,r17,r4
    cbb4:	2884d83a 	srl	r2,r5,r2
    cbb8:	49e2b03a 	or	r17,r9,r7
    cbbc:	2008c03a 	cmpne	r4,r4,zero
    cbc0:	8922b03a 	or	r17,r17,r4
    cbc4:	89a3883a 	add	r17,r17,r6
    cbc8:	10c5883a 	add	r2,r2,r3
    cbcc:	898d803a 	cmpltu	r6,r17,r6
    cbd0:	118b883a 	add	r5,r2,r6
    cbd4:	5021883a 	mov	r16,r10
    cbd8:	003ed506 	br	c730 <__subdf3+0x274>
    cbdc:	1984b03a 	or	r2,r3,r6
    cbe0:	103e5926 	beq	r2,zero,c548 <__subdf3+0x8c>
    cbe4:	8989c83a 	sub	r4,r17,r6
    cbe8:	8911803a 	cmpltu	r8,r17,r4
    cbec:	28c5c83a 	sub	r2,r5,r3
    cbf0:	1205c83a 	sub	r2,r2,r8
    cbf4:	1200202c 	andhi	r8,r2,128
    cbf8:	403ef926 	beq	r8,zero,c7e0 <__subdf3+0x324>
    cbfc:	3463c83a 	sub	r17,r6,r17
    cc00:	194bc83a 	sub	r5,r3,r5
    cc04:	344d803a 	cmpltu	r6,r6,r17
    cc08:	298bc83a 	sub	r5,r5,r6
    cc0c:	3825883a 	mov	r18,r7
    cc10:	003e4d06 	br	c548 <__subdf3+0x8c>
    cc14:	1984b03a 	or	r2,r3,r6
    cc18:	10002b26 	beq	r2,zero,ccc8 <__subdf3+0x80c>
    cc1c:	2808d0fa 	srli	r4,r5,3
    cc20:	8822d0fa 	srli	r17,r17,3
    cc24:	280a977a 	slli	r5,r5,29
    cc28:	2080022c 	andhi	r2,r4,8
    cc2c:	2c62b03a 	or	r17,r5,r17
    cc30:	10000826 	beq	r2,zero,cc54 <__subdf3+0x798>
    cc34:	1810d0fa 	srli	r8,r3,3
    cc38:	4080022c 	andhi	r2,r8,8
    cc3c:	1000051e 	bne	r2,zero,cc54 <__subdf3+0x798>
    cc40:	300cd0fa 	srli	r6,r6,3
    cc44:	1804977a 	slli	r2,r3,29
    cc48:	4009883a 	mov	r4,r8
    cc4c:	3825883a 	mov	r18,r7
    cc50:	11a2b03a 	or	r17,r2,r6
    cc54:	880ad77a 	srli	r5,r17,29
    cc58:	200890fa 	slli	r4,r4,3
    cc5c:	882290fa 	slli	r17,r17,3
    cc60:	0401ffc4 	movi	r16,2047
    cc64:	290ab03a 	or	r5,r5,r4
    cc68:	003e3706 	br	c548 <__subdf3+0x8c>
    cc6c:	0101ffc4 	movi	r4,2047
    cc70:	513fc71e 	bne	r10,r4,cb90 <__subdf3+0x6d4>
    cc74:	180b883a 	mov	r5,r3
    cc78:	3023883a 	mov	r17,r6
    cc7c:	5021883a 	mov	r16,r10
    cc80:	003e3106 	br	c548 <__subdf3+0x8c>
    cc84:	10002d26 	beq	r2,zero,cd3c <__subdf3+0x880>
    cc88:	1984b03a 	or	r2,r3,r6
    cc8c:	10000e26 	beq	r2,zero,ccc8 <__subdf3+0x80c>
    cc90:	2808d0fa 	srli	r4,r5,3
    cc94:	8822d0fa 	srli	r17,r17,3
    cc98:	280a977a 	slli	r5,r5,29
    cc9c:	2080022c 	andhi	r2,r4,8
    cca0:	2c62b03a 	or	r17,r5,r17
    cca4:	103feb26 	beq	r2,zero,cc54 <__subdf3+0x798>
    cca8:	180ed0fa 	srli	r7,r3,3
    ccac:	3880022c 	andhi	r2,r7,8
    ccb0:	103fe81e 	bne	r2,zero,cc54 <__subdf3+0x798>
    ccb4:	300cd0fa 	srli	r6,r6,3
    ccb8:	1804977a 	slli	r2,r3,29
    ccbc:	3809883a 	mov	r4,r7
    ccc0:	11a2b03a 	or	r17,r2,r6
    ccc4:	003fe306 	br	cc54 <__subdf3+0x798>
    ccc8:	0401ffc4 	movi	r16,2047
    cccc:	003e1e06 	br	c548 <__subdf3+0x8c>
    ccd0:	0005883a 	mov	r2,zero
    ccd4:	003f8306 	br	cae4 <__subdf3+0x628>
    ccd8:	113ff804 	addi	r4,r2,-32
    ccdc:	02000804 	movi	r8,32
    cce0:	2908d83a 	srl	r4,r5,r4
    cce4:	12002526 	beq	r2,r8,cd7c <__subdf3+0x8c0>
    cce8:	02001004 	movi	r8,64
    ccec:	4085c83a 	sub	r2,r8,r2
    ccf0:	288a983a 	sll	r5,r5,r2
    ccf4:	2c62b03a 	or	r17,r5,r17
    ccf8:	8822c03a 	cmpne	r17,r17,zero
    ccfc:	8922b03a 	or	r17,r17,r4
    cd00:	0005883a 	mov	r2,zero
    cd04:	003f2406 	br	c998 <__subdf3+0x4dc>
    cd08:	01402034 	movhi	r5,128
    cd0c:	0011883a 	mov	r8,zero
    cd10:	297fffc4 	addi	r5,r5,-1
    cd14:	047ffe04 	movi	r17,-8
    cd18:	0401ffc4 	movi	r16,2047
    cd1c:	003e6a06 	br	c6c8 <__subdf3+0x20c>
    cd20:	2c62b03a 	or	r17,r5,r17
    cd24:	8822c03a 	cmpne	r17,r17,zero
    cd28:	0005883a 	mov	r2,zero
    cd2c:	003fa506 	br	cbc4 <__subdf3+0x708>
    cd30:	180b883a 	mov	r5,r3
    cd34:	3023883a 	mov	r17,r6
    cd38:	003e0306 	br	c548 <__subdf3+0x8c>
    cd3c:	180b883a 	mov	r5,r3
    cd40:	3023883a 	mov	r17,r6
    cd44:	0401ffc4 	movi	r16,2047
    cd48:	003dff06 	br	c548 <__subdf3+0x8c>
    cd4c:	113ff804 	addi	r4,r2,-32
    cd50:	01c00804 	movi	r7,32
    cd54:	2908d83a 	srl	r4,r5,r4
    cd58:	11c00a26 	beq	r2,r7,cd84 <__subdf3+0x8c8>
    cd5c:	01c01004 	movi	r7,64
    cd60:	3885c83a 	sub	r2,r7,r2
    cd64:	288a983a 	sll	r5,r5,r2
    cd68:	2c62b03a 	or	r17,r5,r17
    cd6c:	8822c03a 	cmpne	r17,r17,zero
    cd70:	8922b03a 	or	r17,r17,r4
    cd74:	0005883a 	mov	r2,zero
    cd78:	003f9206 	br	cbc4 <__subdf3+0x708>
    cd7c:	000b883a 	mov	r5,zero
    cd80:	003fdc06 	br	ccf4 <__subdf3+0x838>
    cd84:	000b883a 	mov	r5,zero
    cd88:	003ff706 	br	cd68 <__subdf3+0x8ac>

0000cd8c <__fixdfsi>:
    cd8c:	2806d53a 	srli	r3,r5,20
    cd90:	00800434 	movhi	r2,16
    cd94:	10bfffc4 	addi	r2,r2,-1
    cd98:	18c1ffcc 	andi	r3,r3,2047
    cd9c:	0180ff84 	movi	r6,1022
    cda0:	2884703a 	and	r2,r5,r2
    cda4:	280ad7fa 	srli	r5,r5,31
    cda8:	30c0130e 	bge	r6,r3,cdf8 <__fixdfsi+0x6c>
    cdac:	01810744 	movi	r6,1053
    cdb0:	30c00d16 	blt	r6,r3,cde8 <__fixdfsi+0x5c>
    cdb4:	01810cc4 	movi	r6,1075
    cdb8:	30cdc83a 	sub	r6,r6,r3
    cdbc:	01c007c4 	movi	r7,31
    cdc0:	10800434 	orhi	r2,r2,16
    cdc4:	39800e0e 	bge	r7,r6,ce00 <__fixdfsi+0x74>
    cdc8:	010104c4 	movi	r4,1043
    cdcc:	20c7c83a 	sub	r3,r4,r3
    cdd0:	10c6d83a 	srl	r3,r2,r3
    cdd4:	29403fcc 	andi	r5,r5,255
    cdd8:	0145c83a 	sub	r2,zero,r5
    cddc:	1884f03a 	xor	r2,r3,r2
    cde0:	1145883a 	add	r2,r2,r5
    cde4:	f800283a 	ret
    cde8:	00a00034 	movhi	r2,32768
    cdec:	10bfffc4 	addi	r2,r2,-1
    cdf0:	2885883a 	add	r2,r5,r2
    cdf4:	f800283a 	ret
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	f800283a 	ret
    ce00:	18fefb44 	addi	r3,r3,-1043
    ce04:	2188d83a 	srl	r4,r4,r6
    ce08:	10c6983a 	sll	r3,r2,r3
    ce0c:	20c6b03a 	or	r3,r4,r3
    ce10:	003ff006 	br	cdd4 <__fixdfsi+0x48>

0000ce14 <__floatsidf>:
    ce14:	defffd04 	addi	sp,sp,-12
    ce18:	dc400115 	stw	r17,4(sp)
    ce1c:	dfc00215 	stw	ra,8(sp)
    ce20:	dc000015 	stw	r16,0(sp)
    ce24:	2023883a 	mov	r17,r4
    ce28:	20001426 	beq	r4,zero,ce7c <__floatsidf+0x68>
    ce2c:	2020d7fa 	srli	r16,r4,31
    ce30:	80000126 	beq	r16,zero,ce38 <__floatsidf+0x24>
    ce34:	0123c83a 	sub	r17,zero,r4
    ce38:	8809883a 	mov	r4,r17
    ce3c:	000cf880 	call	cf88 <__clzsi2>
    ce40:	01410784 	movi	r5,1054
    ce44:	00c00284 	movi	r3,10
    ce48:	288bc83a 	sub	r5,r5,r2
    ce4c:	18801c16 	blt	r3,r2,cec0 <__floatsidf+0xac>
    ce50:	00c002c4 	movi	r3,11
    ce54:	1887c83a 	sub	r3,r3,r2
    ce58:	88c8d83a 	srl	r4,r17,r3
    ce5c:	00c00434 	movhi	r3,16
    ce60:	18ffffc4 	addi	r3,r3,-1
    ce64:	10800544 	addi	r2,r2,21
    ce68:	20c8703a 	and	r4,r4,r3
    ce6c:	8884983a 	sll	r2,r17,r2
    ce70:	28c1ffcc 	andi	r3,r5,2047
    ce74:	800d883a 	mov	r6,r16
    ce78:	00000406 	br	ce8c <__floatsidf+0x78>
    ce7c:	000d883a 	mov	r6,zero
    ce80:	0007883a 	mov	r3,zero
    ce84:	0009883a 	mov	r4,zero
    ce88:	0005883a 	mov	r2,zero
    ce8c:	180a953a 	slli	r5,r3,20
    ce90:	31803fcc 	andi	r6,r6,255
    ce94:	00c00434 	movhi	r3,16
    ce98:	300c97fa 	slli	r6,r6,31
    ce9c:	18ffffc4 	addi	r3,r3,-1
    cea0:	20c6703a 	and	r3,r4,r3
    cea4:	1946b03a 	or	r3,r3,r5
    cea8:	1986b03a 	or	r3,r3,r6
    ceac:	dfc00217 	ldw	ra,8(sp)
    ceb0:	dc400117 	ldw	r17,4(sp)
    ceb4:	dc000017 	ldw	r16,0(sp)
    ceb8:	dec00304 	addi	sp,sp,12
    cebc:	f800283a 	ret
    cec0:	10fffd44 	addi	r3,r2,-11
    cec4:	88c8983a 	sll	r4,r17,r3
    cec8:	00800434 	movhi	r2,16
    cecc:	10bfffc4 	addi	r2,r2,-1
    ced0:	2088703a 	and	r4,r4,r2
    ced4:	28c1ffcc 	andi	r3,r5,2047
    ced8:	800d883a 	mov	r6,r16
    cedc:	0005883a 	mov	r2,zero
    cee0:	003fea06 	br	ce8c <__floatsidf+0x78>

0000cee4 <__floatunsidf>:
    cee4:	defffe04 	addi	sp,sp,-8
    cee8:	dc000015 	stw	r16,0(sp)
    ceec:	dfc00115 	stw	ra,4(sp)
    cef0:	2021883a 	mov	r16,r4
    cef4:	20001026 	beq	r4,zero,cf38 <__floatunsidf+0x54>
    cef8:	000cf880 	call	cf88 <__clzsi2>
    cefc:	01410784 	movi	r5,1054
    cf00:	100d883a 	mov	r6,r2
    cf04:	288bc83a 	sub	r5,r5,r2
    cf08:	00800284 	movi	r2,10
    cf0c:	11801616 	blt	r2,r6,cf68 <__floatunsidf+0x84>
    cf10:	008002c4 	movi	r2,11
    cf14:	1185c83a 	sub	r2,r2,r6
    cf18:	8084d83a 	srl	r2,r16,r2
    cf1c:	00c00434 	movhi	r3,16
    cf20:	31c00544 	addi	r7,r6,21
    cf24:	18ffffc4 	addi	r3,r3,-1
    cf28:	81e0983a 	sll	r16,r16,r7
    cf2c:	10cc703a 	and	r6,r2,r3
    cf30:	2941ffcc 	andi	r5,r5,2047
    cf34:	00000206 	br	cf40 <__floatunsidf+0x5c>
    cf38:	000b883a 	mov	r5,zero
    cf3c:	000d883a 	mov	r6,zero
    cf40:	280a953a 	slli	r5,r5,20
    cf44:	00c00434 	movhi	r3,16
    cf48:	18ffffc4 	addi	r3,r3,-1
    cf4c:	30c6703a 	and	r3,r6,r3
    cf50:	8005883a 	mov	r2,r16
    cf54:	1946b03a 	or	r3,r3,r5
    cf58:	dfc00117 	ldw	ra,4(sp)
    cf5c:	dc000017 	ldw	r16,0(sp)
    cf60:	dec00204 	addi	sp,sp,8
    cf64:	f800283a 	ret
    cf68:	31bffd44 	addi	r6,r6,-11
    cf6c:	818c983a 	sll	r6,r16,r6
    cf70:	00800434 	movhi	r2,16
    cf74:	10bfffc4 	addi	r2,r2,-1
    cf78:	2941ffcc 	andi	r5,r5,2047
    cf7c:	0021883a 	mov	r16,zero
    cf80:	308c703a 	and	r6,r6,r2
    cf84:	003fee06 	br	cf40 <__floatunsidf+0x5c>

0000cf88 <__clzsi2>:
    cf88:	00bfffd4 	movui	r2,65535
    cf8c:	11000b36 	bltu	r2,r4,cfbc <__clzsi2+0x34>
    cf90:	00803fc4 	movi	r2,255
    cf94:	1100122e 	bgeu	r2,r4,cfe0 <__clzsi2+0x58>
    cf98:	00c00204 	movi	r3,8
    cf9c:	01400604 	movi	r5,24
    cfa0:	20c8d83a 	srl	r4,r4,r3
    cfa4:	00800074 	movhi	r2,1
    cfa8:	10becb04 	addi	r2,r2,-1236
    cfac:	1109883a 	add	r4,r2,r4
    cfb0:	20800003 	ldbu	r2,0(r4)
    cfb4:	2885c83a 	sub	r2,r5,r2
    cfb8:	f800283a 	ret
    cfbc:	00804034 	movhi	r2,256
    cfc0:	10bfffc4 	addi	r2,r2,-1
    cfc4:	11000336 	bltu	r2,r4,cfd4 <__clzsi2+0x4c>
    cfc8:	00c00404 	movi	r3,16
    cfcc:	180b883a 	mov	r5,r3
    cfd0:	003ff306 	br	cfa0 <__clzsi2+0x18>
    cfd4:	00c00604 	movi	r3,24
    cfd8:	01400204 	movi	r5,8
    cfdc:	003ff006 	br	cfa0 <__clzsi2+0x18>
    cfe0:	0007883a 	mov	r3,zero
    cfe4:	01400804 	movi	r5,32
    cfe8:	003fed06 	br	cfa0 <__clzsi2+0x18>

0000cfec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cfec:	defffe04 	addi	sp,sp,-8
    cff0:	dfc00115 	stw	ra,4(sp)
    cff4:	df000015 	stw	fp,0(sp)
    cff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cffc:	00800074 	movhi	r2,1
    d000:	1085cc04 	addi	r2,r2,5936
    d004:	10800017 	ldw	r2,0(r2)
    d008:	10000526 	beq	r2,zero,d020 <alt_get_errno+0x34>
    d00c:	00800074 	movhi	r2,1
    d010:	1085cc04 	addi	r2,r2,5936
    d014:	10800017 	ldw	r2,0(r2)
    d018:	103ee83a 	callr	r2
    d01c:	00000206 	br	d028 <alt_get_errno+0x3c>
    d020:	00800074 	movhi	r2,1
    d024:	108c9304 	addi	r2,r2,12876
}
    d028:	e037883a 	mov	sp,fp
    d02c:	dfc00117 	ldw	ra,4(sp)
    d030:	df000017 	ldw	fp,0(sp)
    d034:	dec00204 	addi	sp,sp,8
    d038:	f800283a 	ret

0000d03c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d03c:	defffb04 	addi	sp,sp,-20
    d040:	dfc00415 	stw	ra,16(sp)
    d044:	df000315 	stw	fp,12(sp)
    d048:	df000304 	addi	fp,sp,12
    d04c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d050:	e0bfff17 	ldw	r2,-4(fp)
    d054:	10000616 	blt	r2,zero,d070 <close+0x34>
    d058:	e0bfff17 	ldw	r2,-4(fp)
    d05c:	10c00324 	muli	r3,r2,12
    d060:	00800074 	movhi	r2,1
    d064:	10814904 	addi	r2,r2,1316
    d068:	1885883a 	add	r2,r3,r2
    d06c:	00000106 	br	d074 <close+0x38>
    d070:	0005883a 	mov	r2,zero
    d074:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d078:	e0bffd17 	ldw	r2,-12(fp)
    d07c:	10001926 	beq	r2,zero,d0e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d080:	e0bffd17 	ldw	r2,-12(fp)
    d084:	10800017 	ldw	r2,0(r2)
    d088:	10800417 	ldw	r2,16(r2)
    d08c:	10000626 	beq	r2,zero,d0a8 <close+0x6c>
    d090:	e0bffd17 	ldw	r2,-12(fp)
    d094:	10800017 	ldw	r2,0(r2)
    d098:	10800417 	ldw	r2,16(r2)
    d09c:	e13ffd17 	ldw	r4,-12(fp)
    d0a0:	103ee83a 	callr	r2
    d0a4:	00000106 	br	d0ac <close+0x70>
    d0a8:	0005883a 	mov	r2,zero
    d0ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d0b0:	e13fff17 	ldw	r4,-4(fp)
    d0b4:	000d7380 	call	d738 <alt_release_fd>
    if (rval < 0)
    d0b8:	e0bffe17 	ldw	r2,-8(fp)
    d0bc:	1000070e 	bge	r2,zero,d0dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d0c0:	000cfec0 	call	cfec <alt_get_errno>
    d0c4:	1007883a 	mov	r3,r2
    d0c8:	e0bffe17 	ldw	r2,-8(fp)
    d0cc:	0085c83a 	sub	r2,zero,r2
    d0d0:	18800015 	stw	r2,0(r3)
      return -1;
    d0d4:	00bfffc4 	movi	r2,-1
    d0d8:	00000706 	br	d0f8 <close+0xbc>
    }
    return 0;
    d0dc:	0005883a 	mov	r2,zero
    d0e0:	00000506 	br	d0f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d0e4:	000cfec0 	call	cfec <alt_get_errno>
    d0e8:	1007883a 	mov	r3,r2
    d0ec:	00801444 	movi	r2,81
    d0f0:	18800015 	stw	r2,0(r3)
    return -1;
    d0f4:	00bfffc4 	movi	r2,-1
  }
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d10c:	defffc04 	addi	sp,sp,-16
    d110:	df000315 	stw	fp,12(sp)
    d114:	df000304 	addi	fp,sp,12
    d118:	e13ffd15 	stw	r4,-12(fp)
    d11c:	e17ffe15 	stw	r5,-8(fp)
    d120:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d124:	e0bfff17 	ldw	r2,-4(fp)
}
    d128:	e037883a 	mov	sp,fp
    d12c:	df000017 	ldw	fp,0(sp)
    d130:	dec00104 	addi	sp,sp,4
    d134:	f800283a 	ret

0000d138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d138:	defffe04 	addi	sp,sp,-8
    d13c:	dfc00115 	stw	ra,4(sp)
    d140:	df000015 	stw	fp,0(sp)
    d144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d148:	00800074 	movhi	r2,1
    d14c:	1085cc04 	addi	r2,r2,5936
    d150:	10800017 	ldw	r2,0(r2)
    d154:	10000526 	beq	r2,zero,d16c <alt_get_errno+0x34>
    d158:	00800074 	movhi	r2,1
    d15c:	1085cc04 	addi	r2,r2,5936
    d160:	10800017 	ldw	r2,0(r2)
    d164:	103ee83a 	callr	r2
    d168:	00000206 	br	d174 <alt_get_errno+0x3c>
    d16c:	00800074 	movhi	r2,1
    d170:	108c9304 	addi	r2,r2,12876
}
    d174:	e037883a 	mov	sp,fp
    d178:	dfc00117 	ldw	ra,4(sp)
    d17c:	df000017 	ldw	fp,0(sp)
    d180:	dec00204 	addi	sp,sp,8
    d184:	f800283a 	ret

0000d188 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d188:	defffb04 	addi	sp,sp,-20
    d18c:	dfc00415 	stw	ra,16(sp)
    d190:	df000315 	stw	fp,12(sp)
    d194:	df000304 	addi	fp,sp,12
    d198:	e13ffe15 	stw	r4,-8(fp)
    d19c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d1a0:	e0bffe17 	ldw	r2,-8(fp)
    d1a4:	10000616 	blt	r2,zero,d1c0 <fstat+0x38>
    d1a8:	e0bffe17 	ldw	r2,-8(fp)
    d1ac:	10c00324 	muli	r3,r2,12
    d1b0:	00800074 	movhi	r2,1
    d1b4:	10814904 	addi	r2,r2,1316
    d1b8:	1885883a 	add	r2,r3,r2
    d1bc:	00000106 	br	d1c4 <fstat+0x3c>
    d1c0:	0005883a 	mov	r2,zero
    d1c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d1c8:	e0bffd17 	ldw	r2,-12(fp)
    d1cc:	10001026 	beq	r2,zero,d210 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d1d0:	e0bffd17 	ldw	r2,-12(fp)
    d1d4:	10800017 	ldw	r2,0(r2)
    d1d8:	10800817 	ldw	r2,32(r2)
    d1dc:	10000726 	beq	r2,zero,d1fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d1e0:	e0bffd17 	ldw	r2,-12(fp)
    d1e4:	10800017 	ldw	r2,0(r2)
    d1e8:	10800817 	ldw	r2,32(r2)
    d1ec:	e13ffd17 	ldw	r4,-12(fp)
    d1f0:	e17fff17 	ldw	r5,-4(fp)
    d1f4:	103ee83a 	callr	r2
    d1f8:	00000a06 	br	d224 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d1fc:	e0bfff17 	ldw	r2,-4(fp)
    d200:	00c80004 	movi	r3,8192
    d204:	10c00115 	stw	r3,4(r2)
      return 0;
    d208:	0005883a 	mov	r2,zero
    d20c:	00000506 	br	d224 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d210:	000d1380 	call	d138 <alt_get_errno>
    d214:	1007883a 	mov	r3,r2
    d218:	00801444 	movi	r2,81
    d21c:	18800015 	stw	r2,0(r3)
    return -1;
    d220:	00bfffc4 	movi	r2,-1
  }
}
    d224:	e037883a 	mov	sp,fp
    d228:	dfc00117 	ldw	ra,4(sp)
    d22c:	df000017 	ldw	fp,0(sp)
    d230:	dec00204 	addi	sp,sp,8
    d234:	f800283a 	ret

0000d238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d238:	defffe04 	addi	sp,sp,-8
    d23c:	dfc00115 	stw	ra,4(sp)
    d240:	df000015 	stw	fp,0(sp)
    d244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d248:	00800074 	movhi	r2,1
    d24c:	1085cc04 	addi	r2,r2,5936
    d250:	10800017 	ldw	r2,0(r2)
    d254:	10000526 	beq	r2,zero,d26c <alt_get_errno+0x34>
    d258:	00800074 	movhi	r2,1
    d25c:	1085cc04 	addi	r2,r2,5936
    d260:	10800017 	ldw	r2,0(r2)
    d264:	103ee83a 	callr	r2
    d268:	00000206 	br	d274 <alt_get_errno+0x3c>
    d26c:	00800074 	movhi	r2,1
    d270:	108c9304 	addi	r2,r2,12876
}
    d274:	e037883a 	mov	sp,fp
    d278:	dfc00117 	ldw	ra,4(sp)
    d27c:	df000017 	ldw	fp,0(sp)
    d280:	dec00204 	addi	sp,sp,8
    d284:	f800283a 	ret

0000d288 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d288:	deffed04 	addi	sp,sp,-76
    d28c:	dfc01215 	stw	ra,72(sp)
    d290:	df001115 	stw	fp,68(sp)
    d294:	df001104 	addi	fp,sp,68
    d298:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d29c:	e0bfff17 	ldw	r2,-4(fp)
    d2a0:	10000616 	blt	r2,zero,d2bc <isatty+0x34>
    d2a4:	e0bfff17 	ldw	r2,-4(fp)
    d2a8:	10c00324 	muli	r3,r2,12
    d2ac:	00800074 	movhi	r2,1
    d2b0:	10814904 	addi	r2,r2,1316
    d2b4:	1885883a 	add	r2,r3,r2
    d2b8:	00000106 	br	d2c0 <isatty+0x38>
    d2bc:	0005883a 	mov	r2,zero
    d2c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d2c4:	e0bfef17 	ldw	r2,-68(fp)
    d2c8:	10000e26 	beq	r2,zero,d304 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d2cc:	e0bfef17 	ldw	r2,-68(fp)
    d2d0:	10800017 	ldw	r2,0(r2)
    d2d4:	10800817 	ldw	r2,32(r2)
    d2d8:	1000021e 	bne	r2,zero,d2e4 <isatty+0x5c>
    {
      return 1;
    d2dc:	00800044 	movi	r2,1
    d2e0:	00000d06 	br	d318 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d2e4:	e0bff004 	addi	r2,fp,-64
    d2e8:	e13fff17 	ldw	r4,-4(fp)
    d2ec:	100b883a 	mov	r5,r2
    d2f0:	000d1880 	call	d188 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d2f4:	e0bff117 	ldw	r2,-60(fp)
    d2f8:	10880020 	cmpeqi	r2,r2,8192
    d2fc:	10803fcc 	andi	r2,r2,255
    d300:	00000506 	br	d318 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d304:	000d2380 	call	d238 <alt_get_errno>
    d308:	1007883a 	mov	r3,r2
    d30c:	00801444 	movi	r2,81
    d310:	18800015 	stw	r2,0(r3)
    return 0;
    d314:	0005883a 	mov	r2,zero
  }
}
    d318:	e037883a 	mov	sp,fp
    d31c:	dfc00117 	ldw	ra,4(sp)
    d320:	df000017 	ldw	fp,0(sp)
    d324:	dec00204 	addi	sp,sp,8
    d328:	f800283a 	ret

0000d32c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d32c:	defffc04 	addi	sp,sp,-16
    d330:	df000315 	stw	fp,12(sp)
    d334:	df000304 	addi	fp,sp,12
    d338:	e13ffd15 	stw	r4,-12(fp)
    d33c:	e17ffe15 	stw	r5,-8(fp)
    d340:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d344:	e0fffe17 	ldw	r3,-8(fp)
    d348:	e0bffd17 	ldw	r2,-12(fp)
    d34c:	18800c26 	beq	r3,r2,d380 <alt_load_section+0x54>
  {
    while( to != end )
    d350:	00000806 	br	d374 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d354:	e0bffe17 	ldw	r2,-8(fp)
    d358:	10c00104 	addi	r3,r2,4
    d35c:	e0fffe15 	stw	r3,-8(fp)
    d360:	e0fffd17 	ldw	r3,-12(fp)
    d364:	19000104 	addi	r4,r3,4
    d368:	e13ffd15 	stw	r4,-12(fp)
    d36c:	18c00017 	ldw	r3,0(r3)
    d370:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d374:	e0fffe17 	ldw	r3,-8(fp)
    d378:	e0bfff17 	ldw	r2,-4(fp)
    d37c:	18bff51e 	bne	r3,r2,d354 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d380:	e037883a 	mov	sp,fp
    d384:	df000017 	ldw	fp,0(sp)
    d388:	dec00104 	addi	sp,sp,4
    d38c:	f800283a 	ret

0000d390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d390:	defffe04 	addi	sp,sp,-8
    d394:	dfc00115 	stw	ra,4(sp)
    d398:	df000015 	stw	fp,0(sp)
    d39c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d3a0:	01000074 	movhi	r4,1
    d3a4:	2105d104 	addi	r4,r4,5956
    d3a8:	01400074 	movhi	r5,1
    d3ac:	297f1604 	addi	r5,r5,-936
    d3b0:	01800074 	movhi	r6,1
    d3b4:	3185d104 	addi	r6,r6,5956
    d3b8:	000d32c0 	call	d32c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d3bc:	01000034 	movhi	r4,0
    d3c0:	21000804 	addi	r4,r4,32
    d3c4:	01400034 	movhi	r5,0
    d3c8:	29400804 	addi	r5,r5,32
    d3cc:	01800034 	movhi	r6,0
    d3d0:	31806f04 	addi	r6,r6,444
    d3d4:	000d32c0 	call	d32c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d3d8:	01000074 	movhi	r4,1
    d3dc:	213e5104 	addi	r4,r4,-1724
    d3e0:	01400074 	movhi	r5,1
    d3e4:	297e5104 	addi	r5,r5,-1724
    d3e8:	01800074 	movhi	r6,1
    d3ec:	31bf1604 	addi	r6,r6,-936
    d3f0:	000d32c0 	call	d32c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d3f4:	000e8640 	call	e864 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d3f8:	000ea540 	call	ea54 <alt_icache_flush_all>
}
    d3fc:	e037883a 	mov	sp,fp
    d400:	dfc00117 	ldw	ra,4(sp)
    d404:	df000017 	ldw	fp,0(sp)
    d408:	dec00204 	addi	sp,sp,8
    d40c:	f800283a 	ret

0000d410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d410:	defffe04 	addi	sp,sp,-8
    d414:	dfc00115 	stw	ra,4(sp)
    d418:	df000015 	stw	fp,0(sp)
    d41c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d420:	00800074 	movhi	r2,1
    d424:	1085cc04 	addi	r2,r2,5936
    d428:	10800017 	ldw	r2,0(r2)
    d42c:	10000526 	beq	r2,zero,d444 <alt_get_errno+0x34>
    d430:	00800074 	movhi	r2,1
    d434:	1085cc04 	addi	r2,r2,5936
    d438:	10800017 	ldw	r2,0(r2)
    d43c:	103ee83a 	callr	r2
    d440:	00000206 	br	d44c <alt_get_errno+0x3c>
    d444:	00800074 	movhi	r2,1
    d448:	108c9304 	addi	r2,r2,12876
}
    d44c:	e037883a 	mov	sp,fp
    d450:	dfc00117 	ldw	ra,4(sp)
    d454:	df000017 	ldw	fp,0(sp)
    d458:	dec00204 	addi	sp,sp,8
    d45c:	f800283a 	ret

0000d460 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d460:	defff904 	addi	sp,sp,-28
    d464:	dfc00615 	stw	ra,24(sp)
    d468:	df000515 	stw	fp,20(sp)
    d46c:	df000504 	addi	fp,sp,20
    d470:	e13ffd15 	stw	r4,-12(fp)
    d474:	e17ffe15 	stw	r5,-8(fp)
    d478:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d47c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d480:	e0bffd17 	ldw	r2,-12(fp)
    d484:	10000616 	blt	r2,zero,d4a0 <lseek+0x40>
    d488:	e0bffd17 	ldw	r2,-12(fp)
    d48c:	10c00324 	muli	r3,r2,12
    d490:	00800074 	movhi	r2,1
    d494:	10814904 	addi	r2,r2,1316
    d498:	1885883a 	add	r2,r3,r2
    d49c:	00000106 	br	d4a4 <lseek+0x44>
    d4a0:	0005883a 	mov	r2,zero
    d4a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d4a8:	e0bffc17 	ldw	r2,-16(fp)
    d4ac:	10001026 	beq	r2,zero,d4f0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d4b0:	e0bffc17 	ldw	r2,-16(fp)
    d4b4:	10800017 	ldw	r2,0(r2)
    d4b8:	10800717 	ldw	r2,28(r2)
    d4bc:	10000926 	beq	r2,zero,d4e4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d4c0:	e0bffc17 	ldw	r2,-16(fp)
    d4c4:	10800017 	ldw	r2,0(r2)
    d4c8:	10800717 	ldw	r2,28(r2)
    d4cc:	e13ffc17 	ldw	r4,-16(fp)
    d4d0:	e17ffe17 	ldw	r5,-8(fp)
    d4d4:	e1bfff17 	ldw	r6,-4(fp)
    d4d8:	103ee83a 	callr	r2
    d4dc:	e0bffb15 	stw	r2,-20(fp)
    d4e0:	00000506 	br	d4f8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d4e4:	00bfde84 	movi	r2,-134
    d4e8:	e0bffb15 	stw	r2,-20(fp)
    d4ec:	00000206 	br	d4f8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d4f0:	00bfebc4 	movi	r2,-81
    d4f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d4f8:	e0bffb17 	ldw	r2,-20(fp)
    d4fc:	1000070e 	bge	r2,zero,d51c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d500:	000d4100 	call	d410 <alt_get_errno>
    d504:	1007883a 	mov	r3,r2
    d508:	e0bffb17 	ldw	r2,-20(fp)
    d50c:	0085c83a 	sub	r2,zero,r2
    d510:	18800015 	stw	r2,0(r3)
    rc = -1;
    d514:	00bfffc4 	movi	r2,-1
    d518:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d51c:	e0bffb17 	ldw	r2,-20(fp)
}
    d520:	e037883a 	mov	sp,fp
    d524:	dfc00117 	ldw	ra,4(sp)
    d528:	df000017 	ldw	fp,0(sp)
    d52c:	dec00204 	addi	sp,sp,8
    d530:	f800283a 	ret

0000d534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d534:	defffd04 	addi	sp,sp,-12
    d538:	dfc00215 	stw	ra,8(sp)
    d53c:	df000115 	stw	fp,4(sp)
    d540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d544:	0009883a 	mov	r4,zero
    d548:	000d9f80 	call	d9f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d54c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d550:	000da2c0 	call	da2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d554:	01000074 	movhi	r4,1
    d558:	213f0e04 	addi	r4,r4,-968
    d55c:	01400074 	movhi	r5,1
    d560:	297f0e04 	addi	r5,r5,-968
    d564:	01800074 	movhi	r6,1
    d568:	31bf0e04 	addi	r6,r6,-968
    d56c:	000ee140 	call	ee14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d570:	000e99c0 	call	e99c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d574:	01000074 	movhi	r4,1
    d578:	213a7e04 	addi	r4,r4,-5640
    d57c:	000f5a00 	call	f5a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d580:	d126d317 	ldw	r4,-25780(gp)
    d584:	d0e6d417 	ldw	r3,-25776(gp)
    d588:	d0a6d517 	ldw	r2,-25772(gp)
    d58c:	180b883a 	mov	r5,r3
    d590:	100d883a 	mov	r6,r2
    d594:	0000be80 	call	be8 <main>
    d598:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d59c:	01000044 	movi	r4,1
    d5a0:	000d03c0 	call	d03c <close>
  exit (result);
    d5a4:	e13fff17 	ldw	r4,-4(fp)
    d5a8:	000f5b40 	call	f5b4 <exit>

0000d5ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d5ac:	defffe04 	addi	sp,sp,-8
    d5b0:	df000115 	stw	fp,4(sp)
    d5b4:	df000104 	addi	fp,sp,4
    d5b8:	e13fff15 	stw	r4,-4(fp)
}
    d5bc:	e037883a 	mov	sp,fp
    d5c0:	df000017 	ldw	fp,0(sp)
    d5c4:	dec00104 	addi	sp,sp,4
    d5c8:	f800283a 	ret

0000d5cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d5cc:	defffe04 	addi	sp,sp,-8
    d5d0:	df000115 	stw	fp,4(sp)
    d5d4:	df000104 	addi	fp,sp,4
    d5d8:	e13fff15 	stw	r4,-4(fp)
}
    d5dc:	e037883a 	mov	sp,fp
    d5e0:	df000017 	ldw	fp,0(sp)
    d5e4:	dec00104 	addi	sp,sp,4
    d5e8:	f800283a 	ret

0000d5ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5ec:	defffe04 	addi	sp,sp,-8
    d5f0:	dfc00115 	stw	ra,4(sp)
    d5f4:	df000015 	stw	fp,0(sp)
    d5f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5fc:	00800074 	movhi	r2,1
    d600:	1085cc04 	addi	r2,r2,5936
    d604:	10800017 	ldw	r2,0(r2)
    d608:	10000526 	beq	r2,zero,d620 <alt_get_errno+0x34>
    d60c:	00800074 	movhi	r2,1
    d610:	1085cc04 	addi	r2,r2,5936
    d614:	10800017 	ldw	r2,0(r2)
    d618:	103ee83a 	callr	r2
    d61c:	00000206 	br	d628 <alt_get_errno+0x3c>
    d620:	00800074 	movhi	r2,1
    d624:	108c9304 	addi	r2,r2,12876
}
    d628:	e037883a 	mov	sp,fp
    d62c:	dfc00117 	ldw	ra,4(sp)
    d630:	df000017 	ldw	fp,0(sp)
    d634:	dec00204 	addi	sp,sp,8
    d638:	f800283a 	ret

0000d63c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d63c:	defff904 	addi	sp,sp,-28
    d640:	dfc00615 	stw	ra,24(sp)
    d644:	df000515 	stw	fp,20(sp)
    d648:	df000504 	addi	fp,sp,20
    d64c:	e13ffd15 	stw	r4,-12(fp)
    d650:	e17ffe15 	stw	r5,-8(fp)
    d654:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d658:	e0bffd17 	ldw	r2,-12(fp)
    d65c:	10000616 	blt	r2,zero,d678 <read+0x3c>
    d660:	e0bffd17 	ldw	r2,-12(fp)
    d664:	10c00324 	muli	r3,r2,12
    d668:	00800074 	movhi	r2,1
    d66c:	10814904 	addi	r2,r2,1316
    d670:	1885883a 	add	r2,r3,r2
    d674:	00000106 	br	d67c <read+0x40>
    d678:	0005883a 	mov	r2,zero
    d67c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d680:	e0bffb17 	ldw	r2,-20(fp)
    d684:	10002226 	beq	r2,zero,d710 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d688:	e0bffb17 	ldw	r2,-20(fp)
    d68c:	10800217 	ldw	r2,8(r2)
    d690:	108000cc 	andi	r2,r2,3
    d694:	10800060 	cmpeqi	r2,r2,1
    d698:	1000181e 	bne	r2,zero,d6fc <read+0xc0>
        (fd->dev->read))
    d69c:	e0bffb17 	ldw	r2,-20(fp)
    d6a0:	10800017 	ldw	r2,0(r2)
    d6a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d6a8:	10001426 	beq	r2,zero,d6fc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d6ac:	e0bffb17 	ldw	r2,-20(fp)
    d6b0:	10800017 	ldw	r2,0(r2)
    d6b4:	10800517 	ldw	r2,20(r2)
    d6b8:	e0ffff17 	ldw	r3,-4(fp)
    d6bc:	e13ffb17 	ldw	r4,-20(fp)
    d6c0:	e17ffe17 	ldw	r5,-8(fp)
    d6c4:	180d883a 	mov	r6,r3
    d6c8:	103ee83a 	callr	r2
    d6cc:	e0bffc15 	stw	r2,-16(fp)
    d6d0:	e0bffc17 	ldw	r2,-16(fp)
    d6d4:	1000070e 	bge	r2,zero,d6f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d6d8:	000d5ec0 	call	d5ec <alt_get_errno>
    d6dc:	1007883a 	mov	r3,r2
    d6e0:	e0bffc17 	ldw	r2,-16(fp)
    d6e4:	0085c83a 	sub	r2,zero,r2
    d6e8:	18800015 	stw	r2,0(r3)
          return -1;
    d6ec:	00bfffc4 	movi	r2,-1
    d6f0:	00000c06 	br	d724 <read+0xe8>
        }
        return rval;
    d6f4:	e0bffc17 	ldw	r2,-16(fp)
    d6f8:	00000a06 	br	d724 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d6fc:	000d5ec0 	call	d5ec <alt_get_errno>
    d700:	1007883a 	mov	r3,r2
    d704:	00800344 	movi	r2,13
    d708:	18800015 	stw	r2,0(r3)
    d70c:	00000406 	br	d720 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d710:	000d5ec0 	call	d5ec <alt_get_errno>
    d714:	1007883a 	mov	r3,r2
    d718:	00801444 	movi	r2,81
    d71c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d720:	00bfffc4 	movi	r2,-1
}
    d724:	e037883a 	mov	sp,fp
    d728:	dfc00117 	ldw	ra,4(sp)
    d72c:	df000017 	ldw	fp,0(sp)
    d730:	dec00204 	addi	sp,sp,8
    d734:	f800283a 	ret

0000d738 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d738:	defffe04 	addi	sp,sp,-8
    d73c:	df000115 	stw	fp,4(sp)
    d740:	df000104 	addi	fp,sp,4
    d744:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d748:	e0bfff17 	ldw	r2,-4(fp)
    d74c:	108000d0 	cmplti	r2,r2,3
    d750:	10000d1e 	bne	r2,zero,d788 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d754:	00800074 	movhi	r2,1
    d758:	10814904 	addi	r2,r2,1316
    d75c:	e0ffff17 	ldw	r3,-4(fp)
    d760:	18c00324 	muli	r3,r3,12
    d764:	10c5883a 	add	r2,r2,r3
    d768:	10800204 	addi	r2,r2,8
    d76c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d770:	00800074 	movhi	r2,1
    d774:	10814904 	addi	r2,r2,1316
    d778:	e0ffff17 	ldw	r3,-4(fp)
    d77c:	18c00324 	muli	r3,r3,12
    d780:	10c5883a 	add	r2,r2,r3
    d784:	10000015 	stw	zero,0(r2)
  }
}
    d788:	e037883a 	mov	sp,fp
    d78c:	df000017 	ldw	fp,0(sp)
    d790:	dec00104 	addi	sp,sp,4
    d794:	f800283a 	ret

0000d798 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d798:	defff904 	addi	sp,sp,-28
    d79c:	df000615 	stw	fp,24(sp)
    d7a0:	df000604 	addi	fp,sp,24
    d7a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7a8:	0005303a 	rdctl	r2,status
    d7ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7b0:	e0fffc17 	ldw	r3,-16(fp)
    d7b4:	00bfff84 	movi	r2,-2
    d7b8:	1884703a 	and	r2,r3,r2
    d7bc:	1001703a 	wrctl	status,r2
  
  return context;
    d7c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d7c4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d7c8:	d0a00c17 	ldw	r2,-32720(gp)
    d7cc:	10c000c4 	addi	r3,r2,3
    d7d0:	00bfff04 	movi	r2,-4
    d7d4:	1884703a 	and	r2,r3,r2
    d7d8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d7dc:	d0e00c17 	ldw	r3,-32720(gp)
    d7e0:	e0bfff17 	ldw	r2,-4(fp)
    d7e4:	1887883a 	add	r3,r3,r2
    d7e8:	00808034 	movhi	r2,512
    d7ec:	10800004 	addi	r2,r2,0
    d7f0:	10c0062e 	bgeu	r2,r3,d80c <sbrk+0x74>
    d7f4:	e0bffa17 	ldw	r2,-24(fp)
    d7f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7fc:	e0bffd17 	ldw	r2,-12(fp)
    d800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d804:	00bfffc4 	movi	r2,-1
    d808:	00000b06 	br	d838 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d80c:	d0a00c17 	ldw	r2,-32720(gp)
    d810:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d814:	d0e00c17 	ldw	r3,-32720(gp)
    d818:	e0bfff17 	ldw	r2,-4(fp)
    d81c:	1885883a 	add	r2,r3,r2
    d820:	d0a00c15 	stw	r2,-32720(gp)
    d824:	e0bffa17 	ldw	r2,-24(fp)
    d828:	e0bffe15 	stw	r2,-8(fp)
    d82c:	e0bffe17 	ldw	r2,-8(fp)
    d830:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d834:	e0bffb17 	ldw	r2,-20(fp)
} 
    d838:	e037883a 	mov	sp,fp
    d83c:	df000017 	ldw	fp,0(sp)
    d840:	dec00104 	addi	sp,sp,4
    d844:	f800283a 	ret

0000d848 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    d848:	defffd04 	addi	sp,sp,-12
    d84c:	dfc00215 	stw	ra,8(sp)
    d850:	df000115 	stw	fp,4(sp)
    d854:	df000104 	addi	fp,sp,4
    d858:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    d85c:	e13fff17 	ldw	r4,-4(fp)
    d860:	000e70c0 	call	e70c <alt_busy_sleep>
}
    d864:	e037883a 	mov	sp,fp
    d868:	dfc00117 	ldw	ra,4(sp)
    d86c:	df000017 	ldw	fp,0(sp)
    d870:	dec00204 	addi	sp,sp,8
    d874:	f800283a 	ret

0000d878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d878:	defffe04 	addi	sp,sp,-8
    d87c:	dfc00115 	stw	ra,4(sp)
    d880:	df000015 	stw	fp,0(sp)
    d884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d888:	00800074 	movhi	r2,1
    d88c:	1085cc04 	addi	r2,r2,5936
    d890:	10800017 	ldw	r2,0(r2)
    d894:	10000526 	beq	r2,zero,d8ac <alt_get_errno+0x34>
    d898:	00800074 	movhi	r2,1
    d89c:	1085cc04 	addi	r2,r2,5936
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	103ee83a 	callr	r2
    d8a8:	00000206 	br	d8b4 <alt_get_errno+0x3c>
    d8ac:	00800074 	movhi	r2,1
    d8b0:	108c9304 	addi	r2,r2,12876
}
    d8b4:	e037883a 	mov	sp,fp
    d8b8:	dfc00117 	ldw	ra,4(sp)
    d8bc:	df000017 	ldw	fp,0(sp)
    d8c0:	dec00204 	addi	sp,sp,8
    d8c4:	f800283a 	ret

0000d8c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d8c8:	defff904 	addi	sp,sp,-28
    d8cc:	dfc00615 	stw	ra,24(sp)
    d8d0:	df000515 	stw	fp,20(sp)
    d8d4:	df000504 	addi	fp,sp,20
    d8d8:	e13ffd15 	stw	r4,-12(fp)
    d8dc:	e17ffe15 	stw	r5,-8(fp)
    d8e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	10000616 	blt	r2,zero,d904 <write+0x3c>
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	10c00324 	muli	r3,r2,12
    d8f4:	00800074 	movhi	r2,1
    d8f8:	10814904 	addi	r2,r2,1316
    d8fc:	1885883a 	add	r2,r3,r2
    d900:	00000106 	br	d908 <write+0x40>
    d904:	0005883a 	mov	r2,zero
    d908:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d90c:	e0bffb17 	ldw	r2,-20(fp)
    d910:	10002126 	beq	r2,zero,d998 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d914:	e0bffb17 	ldw	r2,-20(fp)
    d918:	10800217 	ldw	r2,8(r2)
    d91c:	108000cc 	andi	r2,r2,3
    d920:	10001826 	beq	r2,zero,d984 <write+0xbc>
    d924:	e0bffb17 	ldw	r2,-20(fp)
    d928:	10800017 	ldw	r2,0(r2)
    d92c:	10800617 	ldw	r2,24(r2)
    d930:	10001426 	beq	r2,zero,d984 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d934:	e0bffb17 	ldw	r2,-20(fp)
    d938:	10800017 	ldw	r2,0(r2)
    d93c:	10800617 	ldw	r2,24(r2)
    d940:	e0ffff17 	ldw	r3,-4(fp)
    d944:	e13ffb17 	ldw	r4,-20(fp)
    d948:	e17ffe17 	ldw	r5,-8(fp)
    d94c:	180d883a 	mov	r6,r3
    d950:	103ee83a 	callr	r2
    d954:	e0bffc15 	stw	r2,-16(fp)
    d958:	e0bffc17 	ldw	r2,-16(fp)
    d95c:	1000070e 	bge	r2,zero,d97c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d960:	000d8780 	call	d878 <alt_get_errno>
    d964:	1007883a 	mov	r3,r2
    d968:	e0bffc17 	ldw	r2,-16(fp)
    d96c:	0085c83a 	sub	r2,zero,r2
    d970:	18800015 	stw	r2,0(r3)
        return -1;
    d974:	00bfffc4 	movi	r2,-1
    d978:	00000c06 	br	d9ac <write+0xe4>
      }
      return rval;
    d97c:	e0bffc17 	ldw	r2,-16(fp)
    d980:	00000a06 	br	d9ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d984:	000d8780 	call	d878 <alt_get_errno>
    d988:	1007883a 	mov	r3,r2
    d98c:	00800344 	movi	r2,13
    d990:	18800015 	stw	r2,0(r3)
    d994:	00000406 	br	d9a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d998:	000d8780 	call	d878 <alt_get_errno>
    d99c:	1007883a 	mov	r3,r2
    d9a0:	00801444 	movi	r2,81
    d9a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d9a8:	00bfffc4 	movi	r2,-1
}
    d9ac:	e037883a 	mov	sp,fp
    d9b0:	dfc00117 	ldw	ra,4(sp)
    d9b4:	df000017 	ldw	fp,0(sp)
    d9b8:	dec00204 	addi	sp,sp,8
    d9bc:	f800283a 	ret

0000d9c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d9c0:	defffd04 	addi	sp,sp,-12
    d9c4:	dfc00215 	stw	ra,8(sp)
    d9c8:	df000115 	stw	fp,4(sp)
    d9cc:	df000104 	addi	fp,sp,4
    d9d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d9d4:	e13fff17 	ldw	r4,-4(fp)
    d9d8:	01400074 	movhi	r5,1
    d9dc:	2945c904 	addi	r5,r5,5924
    d9e0:	000e8f80 	call	e8f8 <alt_dev_llist_insert>
}
    d9e4:	e037883a 	mov	sp,fp
    d9e8:	dfc00117 	ldw	ra,4(sp)
    d9ec:	df000017 	ldw	fp,0(sp)
    d9f0:	dec00204 	addi	sp,sp,8
    d9f4:	f800283a 	ret

0000d9f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d9f8:	defffd04 	addi	sp,sp,-12
    d9fc:	dfc00215 	stw	ra,8(sp)
    da00:	df000115 	stw	fp,4(sp)
    da04:	df000104 	addi	fp,sp,4
    da08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
    da0c:	000f29c0 	call	f29c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    da10:	00800044 	movi	r2,1
    da14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    da18:	e037883a 	mov	sp,fp
    da1c:	dfc00117 	ldw	ra,4(sp)
    da20:	df000017 	ldw	fp,0(sp)
    da24:	dec00204 	addi	sp,sp,8
    da28:	f800283a 	ret

0000da2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    da2c:	defffe04 	addi	sp,sp,-8
    da30:	dfc00115 	stw	ra,4(sp)
    da34:	df000015 	stw	fp,0(sp)
    da38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    da3c:	01008034 	movhi	r4,512
    da40:	000b883a 	mov	r5,zero
    da44:	01800144 	movi	r6,5
    da48:	01c0fa04 	movi	r7,1000
    da4c:	000e5440 	call	e544 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    da50:	01000074 	movhi	r4,1
    da54:	2101b304 	addi	r4,r4,1740
    da58:	000b883a 	mov	r5,zero
    da5c:	000d883a 	mov	r6,zero
    da60:	000dbe80 	call	dbe8 <altera_avalon_jtag_uart_init>
    da64:	01000074 	movhi	r4,1
    da68:	2101a904 	addi	r4,r4,1700
    da6c:	000d9c00 	call	d9c0 <alt_dev_reg>
}
    da70:	e037883a 	mov	sp,fp
    da74:	dfc00117 	ldw	ra,4(sp)
    da78:	df000017 	ldw	fp,0(sp)
    da7c:	dec00204 	addi	sp,sp,8
    da80:	f800283a 	ret

0000da84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    da84:	defffa04 	addi	sp,sp,-24
    da88:	dfc00515 	stw	ra,20(sp)
    da8c:	df000415 	stw	fp,16(sp)
    da90:	df000404 	addi	fp,sp,16
    da94:	e13ffd15 	stw	r4,-12(fp)
    da98:	e17ffe15 	stw	r5,-8(fp)
    da9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    daa0:	e0bffd17 	ldw	r2,-12(fp)
    daa4:	10800017 	ldw	r2,0(r2)
    daa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    daac:	e0bffc17 	ldw	r2,-16(fp)
    dab0:	10c00a04 	addi	r3,r2,40
    dab4:	e0bffd17 	ldw	r2,-12(fp)
    dab8:	10800217 	ldw	r2,8(r2)
    dabc:	1809883a 	mov	r4,r3
    dac0:	e17ffe17 	ldw	r5,-8(fp)
    dac4:	e1bfff17 	ldw	r6,-4(fp)
    dac8:	100f883a 	mov	r7,r2
    dacc:	000e0ac0 	call	e0ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    dad0:	e037883a 	mov	sp,fp
    dad4:	dfc00117 	ldw	ra,4(sp)
    dad8:	df000017 	ldw	fp,0(sp)
    dadc:	dec00204 	addi	sp,sp,8
    dae0:	f800283a 	ret

0000dae4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    dae4:	defffa04 	addi	sp,sp,-24
    dae8:	dfc00515 	stw	ra,20(sp)
    daec:	df000415 	stw	fp,16(sp)
    daf0:	df000404 	addi	fp,sp,16
    daf4:	e13ffd15 	stw	r4,-12(fp)
    daf8:	e17ffe15 	stw	r5,-8(fp)
    dafc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    db00:	e0bffd17 	ldw	r2,-12(fp)
    db04:	10800017 	ldw	r2,0(r2)
    db08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    db0c:	e0bffc17 	ldw	r2,-16(fp)
    db10:	10c00a04 	addi	r3,r2,40
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	10800217 	ldw	r2,8(r2)
    db1c:	1809883a 	mov	r4,r3
    db20:	e17ffe17 	ldw	r5,-8(fp)
    db24:	e1bfff17 	ldw	r6,-4(fp)
    db28:	100f883a 	mov	r7,r2
    db2c:	000e2b80 	call	e2b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    db30:	e037883a 	mov	sp,fp
    db34:	dfc00117 	ldw	ra,4(sp)
    db38:	df000017 	ldw	fp,0(sp)
    db3c:	dec00204 	addi	sp,sp,8
    db40:	f800283a 	ret

0000db44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    db44:	defffc04 	addi	sp,sp,-16
    db48:	dfc00315 	stw	ra,12(sp)
    db4c:	df000215 	stw	fp,8(sp)
    db50:	df000204 	addi	fp,sp,8
    db54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    db58:	e0bfff17 	ldw	r2,-4(fp)
    db5c:	10800017 	ldw	r2,0(r2)
    db60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    db64:	e0bffe17 	ldw	r2,-8(fp)
    db68:	10c00a04 	addi	r3,r2,40
    db6c:	e0bfff17 	ldw	r2,-4(fp)
    db70:	10800217 	ldw	r2,8(r2)
    db74:	1809883a 	mov	r4,r3
    db78:	100b883a 	mov	r5,r2
    db7c:	000df580 	call	df58 <altera_avalon_jtag_uart_close>
}
    db80:	e037883a 	mov	sp,fp
    db84:	dfc00117 	ldw	ra,4(sp)
    db88:	df000017 	ldw	fp,0(sp)
    db8c:	dec00204 	addi	sp,sp,8
    db90:	f800283a 	ret

0000db94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    db94:	defffa04 	addi	sp,sp,-24
    db98:	dfc00515 	stw	ra,20(sp)
    db9c:	df000415 	stw	fp,16(sp)
    dba0:	df000404 	addi	fp,sp,16
    dba4:	e13ffd15 	stw	r4,-12(fp)
    dba8:	e17ffe15 	stw	r5,-8(fp)
    dbac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    dbb0:	e0bffd17 	ldw	r2,-12(fp)
    dbb4:	10800017 	ldw	r2,0(r2)
    dbb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dbbc:	e0bffc17 	ldw	r2,-16(fp)
    dbc0:	10800a04 	addi	r2,r2,40
    dbc4:	1009883a 	mov	r4,r2
    dbc8:	e17ffe17 	ldw	r5,-8(fp)
    dbcc:	e1bfff17 	ldw	r6,-4(fp)
    dbd0:	000dfc00 	call	dfc0 <altera_avalon_jtag_uart_ioctl>
}
    dbd4:	e037883a 	mov	sp,fp
    dbd8:	dfc00117 	ldw	ra,4(sp)
    dbdc:	df000017 	ldw	fp,0(sp)
    dbe0:	dec00204 	addi	sp,sp,8
    dbe4:	f800283a 	ret

0000dbe8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    dbe8:	defffa04 	addi	sp,sp,-24
    dbec:	dfc00515 	stw	ra,20(sp)
    dbf0:	df000415 	stw	fp,16(sp)
    dbf4:	df000404 	addi	fp,sp,16
    dbf8:	e13ffd15 	stw	r4,-12(fp)
    dbfc:	e17ffe15 	stw	r5,-8(fp)
    dc00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dc04:	e0bffd17 	ldw	r2,-12(fp)
    dc08:	00c00044 	movi	r3,1
    dc0c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    dc10:	e0bffd17 	ldw	r2,-12(fp)
    dc14:	10800017 	ldw	r2,0(r2)
    dc18:	10800104 	addi	r2,r2,4
    dc1c:	1007883a 	mov	r3,r2
    dc20:	e0bffd17 	ldw	r2,-12(fp)
    dc24:	10800817 	ldw	r2,32(r2)
    dc28:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    dc2c:	e0fffe17 	ldw	r3,-8(fp)
    dc30:	e0bfff17 	ldw	r2,-4(fp)
    dc34:	d8000015 	stw	zero,0(sp)
    dc38:	1809883a 	mov	r4,r3
    dc3c:	100b883a 	mov	r5,r2
    dc40:	01800074 	movhi	r6,1
    dc44:	31b72b04 	addi	r6,r6,-9044
    dc48:	e1fffd17 	ldw	r7,-12(fp)
    dc4c:	000ea840 	call	ea84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    dc58:	e0bffd17 	ldw	r2,-12(fp)
    dc5c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    dc60:	00800074 	movhi	r2,1
    dc64:	108c9804 	addi	r2,r2,12896
    dc68:	10800017 	ldw	r2,0(r2)
    dc6c:	1809883a 	mov	r4,r3
    dc70:	100b883a 	mov	r5,r2
    dc74:	01800074 	movhi	r6,1
    dc78:	31b7ac04 	addi	r6,r6,-8528
    dc7c:	e1fffd17 	ldw	r7,-12(fp)
    dc80:	000e5cc0 	call	e5cc <alt_alarm_start>
    dc84:	1000040e 	bge	r2,zero,dc98 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    dc88:	e0fffd17 	ldw	r3,-12(fp)
    dc8c:	00a00034 	movhi	r2,32768
    dc90:	10bfffc4 	addi	r2,r2,-1
    dc94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    dc98:	e037883a 	mov	sp,fp
    dc9c:	dfc00117 	ldw	ra,4(sp)
    dca0:	df000017 	ldw	fp,0(sp)
    dca4:	dec00204 	addi	sp,sp,8
    dca8:	f800283a 	ret

0000dcac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dcac:	defff804 	addi	sp,sp,-32
    dcb0:	df000715 	stw	fp,28(sp)
    dcb4:	df000704 	addi	fp,sp,28
    dcb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dcbc:	e0bfff17 	ldw	r2,-4(fp)
    dcc0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    dcc4:	e0bffb17 	ldw	r2,-20(fp)
    dcc8:	10800017 	ldw	r2,0(r2)
    dccc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dcd0:	e0bffc17 	ldw	r2,-16(fp)
    dcd4:	10800104 	addi	r2,r2,4
    dcd8:	10800037 	ldwio	r2,0(r2)
    dcdc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dce0:	e0bffd17 	ldw	r2,-12(fp)
    dce4:	1080c00c 	andi	r2,r2,768
    dce8:	1000011e 	bne	r2,zero,dcf0 <altera_avalon_jtag_uart_irq+0x44>
      break;
    dcec:	00006c06 	br	dea0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dcf0:	e0bffd17 	ldw	r2,-12(fp)
    dcf4:	1080400c 	andi	r2,r2,256
    dcf8:	10003426 	beq	r2,zero,ddcc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dcfc:	00800074 	movhi	r2,1
    dd00:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd04:	e0bffb17 	ldw	r2,-20(fp)
    dd08:	10800a17 	ldw	r2,40(r2)
    dd0c:	10800044 	addi	r2,r2,1
    dd10:	1081ffcc 	andi	r2,r2,2047
    dd14:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    dd18:	e0bffb17 	ldw	r2,-20(fp)
    dd1c:	10c00b17 	ldw	r3,44(r2)
    dd20:	e0bffe17 	ldw	r2,-8(fp)
    dd24:	1880011e 	bne	r3,r2,dd2c <altera_avalon_jtag_uart_irq+0x80>
          break;
    dd28:	00001606 	br	dd84 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    dd2c:	e0bffc17 	ldw	r2,-16(fp)
    dd30:	10800037 	ldwio	r2,0(r2)
    dd34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    dd38:	e0bff917 	ldw	r2,-28(fp)
    dd3c:	10a0000c 	andi	r2,r2,32768
    dd40:	1000011e 	bne	r2,zero,dd48 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    dd44:	00000f06 	br	dd84 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    dd48:	e0bffb17 	ldw	r2,-20(fp)
    dd4c:	10800a17 	ldw	r2,40(r2)
    dd50:	e0fff917 	ldw	r3,-28(fp)
    dd54:	1809883a 	mov	r4,r3
    dd58:	e0fffb17 	ldw	r3,-20(fp)
    dd5c:	1885883a 	add	r2,r3,r2
    dd60:	10800e04 	addi	r2,r2,56
    dd64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd68:	e0bffb17 	ldw	r2,-20(fp)
    dd6c:	10800a17 	ldw	r2,40(r2)
    dd70:	10800044 	addi	r2,r2,1
    dd74:	10c1ffcc 	andi	r3,r2,2047
    dd78:	e0bffb17 	ldw	r2,-20(fp)
    dd7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    dd80:	003fe006 	br	dd04 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    dd84:	e0bff917 	ldw	r2,-28(fp)
    dd88:	10bfffec 	andhi	r2,r2,65535
    dd8c:	10000f26 	beq	r2,zero,ddcc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dd90:	e0bffb17 	ldw	r2,-20(fp)
    dd94:	10c00817 	ldw	r3,32(r2)
    dd98:	00bfff84 	movi	r2,-2
    dd9c:	1886703a 	and	r3,r3,r2
    dda0:	e0bffb17 	ldw	r2,-20(fp)
    dda4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dda8:	e0bffc17 	ldw	r2,-16(fp)
    ddac:	10800104 	addi	r2,r2,4
    ddb0:	1007883a 	mov	r3,r2
    ddb4:	e0bffb17 	ldw	r2,-20(fp)
    ddb8:	10800817 	ldw	r2,32(r2)
    ddbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ddc0:	e0bffc17 	ldw	r2,-16(fp)
    ddc4:	10800104 	addi	r2,r2,4
    ddc8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ddcc:	e0bffd17 	ldw	r2,-12(fp)
    ddd0:	1080800c 	andi	r2,r2,512
    ddd4:	10003126 	beq	r2,zero,de9c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ddd8:	e0bffd17 	ldw	r2,-12(fp)
    dddc:	1004d43a 	srli	r2,r2,16
    dde0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dde4:	00001406 	br	de38 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dde8:	e0bffc17 	ldw	r2,-16(fp)
    ddec:	e0fffb17 	ldw	r3,-20(fp)
    ddf0:	18c00d17 	ldw	r3,52(r3)
    ddf4:	e13ffb17 	ldw	r4,-20(fp)
    ddf8:	20c7883a 	add	r3,r4,r3
    ddfc:	18c20e04 	addi	r3,r3,2104
    de00:	18c00003 	ldbu	r3,0(r3)
    de04:	18c03fcc 	andi	r3,r3,255
    de08:	18c0201c 	xori	r3,r3,128
    de0c:	18ffe004 	addi	r3,r3,-128
    de10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de14:	e0bffb17 	ldw	r2,-20(fp)
    de18:	10800d17 	ldw	r2,52(r2)
    de1c:	10800044 	addi	r2,r2,1
    de20:	10c1ffcc 	andi	r3,r2,2047
    de24:	e0bffb17 	ldw	r2,-20(fp)
    de28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    de2c:	e0bffa17 	ldw	r2,-24(fp)
    de30:	10bfffc4 	addi	r2,r2,-1
    de34:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    de38:	e0bffa17 	ldw	r2,-24(fp)
    de3c:	10000526 	beq	r2,zero,de54 <altera_avalon_jtag_uart_irq+0x1a8>
    de40:	e0bffb17 	ldw	r2,-20(fp)
    de44:	10c00d17 	ldw	r3,52(r2)
    de48:	e0bffb17 	ldw	r2,-20(fp)
    de4c:	10800c17 	ldw	r2,48(r2)
    de50:	18bfe51e 	bne	r3,r2,dde8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    de54:	e0bffa17 	ldw	r2,-24(fp)
    de58:	10001026 	beq	r2,zero,de9c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    de5c:	e0bffb17 	ldw	r2,-20(fp)
    de60:	10c00817 	ldw	r3,32(r2)
    de64:	00bfff44 	movi	r2,-3
    de68:	1886703a 	and	r3,r3,r2
    de6c:	e0bffb17 	ldw	r2,-20(fp)
    de70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    de74:	e0bffb17 	ldw	r2,-20(fp)
    de78:	10800017 	ldw	r2,0(r2)
    de7c:	10800104 	addi	r2,r2,4
    de80:	1007883a 	mov	r3,r2
    de84:	e0bffb17 	ldw	r2,-20(fp)
    de88:	10800817 	ldw	r2,32(r2)
    de8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    de90:	e0bffc17 	ldw	r2,-16(fp)
    de94:	10800104 	addi	r2,r2,4
    de98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    de9c:	003f8c06 	br	dcd0 <altera_avalon_jtag_uart_irq+0x24>
}
    dea0:	e037883a 	mov	sp,fp
    dea4:	df000017 	ldw	fp,0(sp)
    dea8:	dec00104 	addi	sp,sp,4
    deac:	f800283a 	ret

0000deb0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    deb0:	defff804 	addi	sp,sp,-32
    deb4:	df000715 	stw	fp,28(sp)
    deb8:	df000704 	addi	fp,sp,28
    debc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dec0:	e0bffb17 	ldw	r2,-20(fp)
    dec4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dec8:	e0bff917 	ldw	r2,-28(fp)
    decc:	10800017 	ldw	r2,0(r2)
    ded0:	10800104 	addi	r2,r2,4
    ded4:	10800037 	ldwio	r2,0(r2)
    ded8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dedc:	e0bffa17 	ldw	r2,-24(fp)
    dee0:	1081000c 	andi	r2,r2,1024
    dee4:	10000b26 	beq	r2,zero,df14 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dee8:	e0bff917 	ldw	r2,-28(fp)
    deec:	10800017 	ldw	r2,0(r2)
    def0:	10800104 	addi	r2,r2,4
    def4:	1007883a 	mov	r3,r2
    def8:	e0bff917 	ldw	r2,-28(fp)
    defc:	10800817 	ldw	r2,32(r2)
    df00:	10810014 	ori	r2,r2,1024
    df04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    df08:	e0bff917 	ldw	r2,-28(fp)
    df0c:	10000915 	stw	zero,36(r2)
    df10:	00000a06 	br	df3c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    df14:	e0bff917 	ldw	r2,-28(fp)
    df18:	10c00917 	ldw	r3,36(r2)
    df1c:	00a00034 	movhi	r2,32768
    df20:	10bfff04 	addi	r2,r2,-4
    df24:	10c00536 	bltu	r2,r3,df3c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    df28:	e0bff917 	ldw	r2,-28(fp)
    df2c:	10800917 	ldw	r2,36(r2)
    df30:	10c00044 	addi	r3,r2,1
    df34:	e0bff917 	ldw	r2,-28(fp)
    df38:	10c00915 	stw	r3,36(r2)
    df3c:	00800074 	movhi	r2,1
    df40:	108c9804 	addi	r2,r2,12896
    df44:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    df48:	e037883a 	mov	sp,fp
    df4c:	df000017 	ldw	fp,0(sp)
    df50:	dec00104 	addi	sp,sp,4
    df54:	f800283a 	ret

0000df58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    df58:	defffd04 	addi	sp,sp,-12
    df5c:	df000215 	stw	fp,8(sp)
    df60:	df000204 	addi	fp,sp,8
    df64:	e13ffe15 	stw	r4,-8(fp)
    df68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df6c:	00000506 	br	df84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    df70:	e0bfff17 	ldw	r2,-4(fp)
    df74:	1090000c 	andi	r2,r2,16384
    df78:	10000226 	beq	r2,zero,df84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    df7c:	00bffd44 	movi	r2,-11
    df80:	00000b06 	br	dfb0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df84:	e0bffe17 	ldw	r2,-8(fp)
    df88:	10c00d17 	ldw	r3,52(r2)
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	10800c17 	ldw	r2,48(r2)
    df94:	18800526 	beq	r3,r2,dfac <altera_avalon_jtag_uart_close+0x54>
    df98:	e0bffe17 	ldw	r2,-8(fp)
    df9c:	10c00917 	ldw	r3,36(r2)
    dfa0:	e0bffe17 	ldw	r2,-8(fp)
    dfa4:	10800117 	ldw	r2,4(r2)
    dfa8:	18bff136 	bltu	r3,r2,df70 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dfac:	0005883a 	mov	r2,zero
}
    dfb0:	e037883a 	mov	sp,fp
    dfb4:	df000017 	ldw	fp,0(sp)
    dfb8:	dec00104 	addi	sp,sp,4
    dfbc:	f800283a 	ret

0000dfc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dfc0:	defffa04 	addi	sp,sp,-24
    dfc4:	df000515 	stw	fp,20(sp)
    dfc8:	df000504 	addi	fp,sp,20
    dfcc:	e13ffd15 	stw	r4,-12(fp)
    dfd0:	e17ffe15 	stw	r5,-8(fp)
    dfd4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dfd8:	00bff9c4 	movi	r2,-25
    dfdc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dfe0:	e0bffe17 	ldw	r2,-8(fp)
    dfe4:	10da8060 	cmpeqi	r3,r2,27137
    dfe8:	1800031e 	bne	r3,zero,dff8 <altera_avalon_jtag_uart_ioctl+0x38>
    dfec:	109a80a0 	cmpeqi	r2,r2,27138
    dff0:	1000191e 	bne	r2,zero,e058 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    dff4:	00002806 	br	e098 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	10c00117 	ldw	r3,4(r2)
    e000:	00a00034 	movhi	r2,32768
    e004:	10bfffc4 	addi	r2,r2,-1
    e008:	18801226 	beq	r3,r2,e054 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    e00c:	e0bfff17 	ldw	r2,-4(fp)
    e010:	10800017 	ldw	r2,0(r2)
    e014:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e018:	e0bffc17 	ldw	r2,-16(fp)
    e01c:	10800090 	cmplti	r2,r2,2
    e020:	1000061e 	bne	r2,zero,e03c <altera_avalon_jtag_uart_ioctl+0x7c>
    e024:	e0fffc17 	ldw	r3,-16(fp)
    e028:	00a00034 	movhi	r2,32768
    e02c:	10bfffc4 	addi	r2,r2,-1
    e030:	18800226 	beq	r3,r2,e03c <altera_avalon_jtag_uart_ioctl+0x7c>
    e034:	e0bffc17 	ldw	r2,-16(fp)
    e038:	00000206 	br	e044 <altera_avalon_jtag_uart_ioctl+0x84>
    e03c:	00a00034 	movhi	r2,32768
    e040:	10bfff84 	addi	r2,r2,-2
    e044:	e0fffd17 	ldw	r3,-12(fp)
    e048:	18800115 	stw	r2,4(r3)
      rc = 0;
    e04c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e050:	00001106 	br	e098 <altera_avalon_jtag_uart_ioctl+0xd8>
    e054:	00001006 	br	e098 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e058:	e0bffd17 	ldw	r2,-12(fp)
    e05c:	10c00117 	ldw	r3,4(r2)
    e060:	00a00034 	movhi	r2,32768
    e064:	10bfffc4 	addi	r2,r2,-1
    e068:	18800a26 	beq	r3,r2,e094 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	10c00917 	ldw	r3,36(r2)
    e074:	e0bffd17 	ldw	r2,-12(fp)
    e078:	10800117 	ldw	r2,4(r2)
    e07c:	1885803a 	cmpltu	r2,r3,r2
    e080:	10c03fcc 	andi	r3,r2,255
    e084:	e0bfff17 	ldw	r2,-4(fp)
    e088:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e08c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e090:	00000006 	br	e094 <altera_avalon_jtag_uart_ioctl+0xd4>
    e094:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e098:	e0bffb17 	ldw	r2,-20(fp)
}
    e09c:	e037883a 	mov	sp,fp
    e0a0:	df000017 	ldw	fp,0(sp)
    e0a4:	dec00104 	addi	sp,sp,4
    e0a8:	f800283a 	ret

0000e0ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e0ac:	defff304 	addi	sp,sp,-52
    e0b0:	dfc00c15 	stw	ra,48(sp)
    e0b4:	df000b15 	stw	fp,44(sp)
    e0b8:	df000b04 	addi	fp,sp,44
    e0bc:	e13ffc15 	stw	r4,-16(fp)
    e0c0:	e17ffd15 	stw	r5,-12(fp)
    e0c4:	e1bffe15 	stw	r6,-8(fp)
    e0c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e0cc:	e0bffd17 	ldw	r2,-12(fp)
    e0d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e0d4:	00004906 	br	e1fc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e0d8:	e0bffc17 	ldw	r2,-16(fp)
    e0dc:	10800a17 	ldw	r2,40(r2)
    e0e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e0e4:	e0bffc17 	ldw	r2,-16(fp)
    e0e8:	10800b17 	ldw	r2,44(r2)
    e0ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e0f0:	e0fff717 	ldw	r3,-36(fp)
    e0f4:	e0bff817 	ldw	r2,-32(fp)
    e0f8:	18800536 	bltu	r3,r2,e110 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e0fc:	e0fff717 	ldw	r3,-36(fp)
    e100:	e0bff817 	ldw	r2,-32(fp)
    e104:	1885c83a 	sub	r2,r3,r2
    e108:	e0bff615 	stw	r2,-40(fp)
    e10c:	00000406 	br	e120 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e110:	00c20004 	movi	r3,2048
    e114:	e0bff817 	ldw	r2,-32(fp)
    e118:	1885c83a 	sub	r2,r3,r2
    e11c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e120:	e0bff617 	ldw	r2,-40(fp)
    e124:	1000011e 	bne	r2,zero,e12c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    e128:	00001d06 	br	e1a0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    e12c:	e0fffe17 	ldw	r3,-8(fp)
    e130:	e0bff617 	ldw	r2,-40(fp)
    e134:	1880022e 	bgeu	r3,r2,e140 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    e138:	e0bffe17 	ldw	r2,-8(fp)
    e13c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e140:	e0bff817 	ldw	r2,-32(fp)
    e144:	10800e04 	addi	r2,r2,56
    e148:	e0fffc17 	ldw	r3,-16(fp)
    e14c:	1885883a 	add	r2,r3,r2
    e150:	e13ff517 	ldw	r4,-44(fp)
    e154:	100b883a 	mov	r5,r2
    e158:	e1bff617 	ldw	r6,-40(fp)
    e15c:	0005edc0 	call	5edc <memcpy>
      ptr   += n;
    e160:	e0fff517 	ldw	r3,-44(fp)
    e164:	e0bff617 	ldw	r2,-40(fp)
    e168:	1885883a 	add	r2,r3,r2
    e16c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e170:	e0fffe17 	ldw	r3,-8(fp)
    e174:	e0bff617 	ldw	r2,-40(fp)
    e178:	1885c83a 	sub	r2,r3,r2
    e17c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e180:	e0fff817 	ldw	r3,-32(fp)
    e184:	e0bff617 	ldw	r2,-40(fp)
    e188:	1885883a 	add	r2,r3,r2
    e18c:	10c1ffcc 	andi	r3,r2,2047
    e190:	e0bffc17 	ldw	r2,-16(fp)
    e194:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e198:	e0bffe17 	ldw	r2,-8(fp)
    e19c:	00bfce16 	blt	zero,r2,e0d8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    e1a0:	e0fff517 	ldw	r3,-44(fp)
    e1a4:	e0bffd17 	ldw	r2,-12(fp)
    e1a8:	18800126 	beq	r3,r2,e1b0 <altera_avalon_jtag_uart_read+0x104>
      break;
    e1ac:	00001506 	br	e204 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e1b0:	e0bfff17 	ldw	r2,-4(fp)
    e1b4:	1090000c 	andi	r2,r2,16384
    e1b8:	10000126 	beq	r2,zero,e1c0 <altera_avalon_jtag_uart_read+0x114>
      break;
    e1bc:	00001106 	br	e204 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e1c0:	0001883a 	nop
    e1c4:	e0bffc17 	ldw	r2,-16(fp)
    e1c8:	10c00a17 	ldw	r3,40(r2)
    e1cc:	e0bff717 	ldw	r2,-36(fp)
    e1d0:	1880051e 	bne	r3,r2,e1e8 <altera_avalon_jtag_uart_read+0x13c>
    e1d4:	e0bffc17 	ldw	r2,-16(fp)
    e1d8:	10c00917 	ldw	r3,36(r2)
    e1dc:	e0bffc17 	ldw	r2,-16(fp)
    e1e0:	10800117 	ldw	r2,4(r2)
    e1e4:	18bff736 	bltu	r3,r2,e1c4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e1e8:	e0bffc17 	ldw	r2,-16(fp)
    e1ec:	10c00a17 	ldw	r3,40(r2)
    e1f0:	e0bff717 	ldw	r2,-36(fp)
    e1f4:	1880011e 	bne	r3,r2,e1fc <altera_avalon_jtag_uart_read+0x150>
      break;
    e1f8:	00000206 	br	e204 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e1fc:	e0bffe17 	ldw	r2,-8(fp)
    e200:	00bfb516 	blt	zero,r2,e0d8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e204:	e0fff517 	ldw	r3,-44(fp)
    e208:	e0bffd17 	ldw	r2,-12(fp)
    e20c:	18801826 	beq	r3,r2,e270 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e210:	0005303a 	rdctl	r2,status
    e214:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e218:	e0fffa17 	ldw	r3,-24(fp)
    e21c:	00bfff84 	movi	r2,-2
    e220:	1884703a 	and	r2,r3,r2
    e224:	1001703a 	wrctl	status,r2
  
  return context;
    e228:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e22c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e230:	e0bffc17 	ldw	r2,-16(fp)
    e234:	10800817 	ldw	r2,32(r2)
    e238:	10c00054 	ori	r3,r2,1
    e23c:	e0bffc17 	ldw	r2,-16(fp)
    e240:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e244:	e0bffc17 	ldw	r2,-16(fp)
    e248:	10800017 	ldw	r2,0(r2)
    e24c:	10800104 	addi	r2,r2,4
    e250:	1007883a 	mov	r3,r2
    e254:	e0bffc17 	ldw	r2,-16(fp)
    e258:	10800817 	ldw	r2,32(r2)
    e25c:	18800035 	stwio	r2,0(r3)
    e260:	e0bff917 	ldw	r2,-28(fp)
    e264:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e268:	e0bffb17 	ldw	r2,-20(fp)
    e26c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e270:	e0fff517 	ldw	r3,-44(fp)
    e274:	e0bffd17 	ldw	r2,-12(fp)
    e278:	18800426 	beq	r3,r2,e28c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    e27c:	e0fff517 	ldw	r3,-44(fp)
    e280:	e0bffd17 	ldw	r2,-12(fp)
    e284:	1885c83a 	sub	r2,r3,r2
    e288:	00000606 	br	e2a4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    e28c:	e0bfff17 	ldw	r2,-4(fp)
    e290:	1090000c 	andi	r2,r2,16384
    e294:	10000226 	beq	r2,zero,e2a0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    e298:	00bffd44 	movi	r2,-11
    e29c:	00000106 	br	e2a4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    e2a0:	00bffec4 	movi	r2,-5
}
    e2a4:	e037883a 	mov	sp,fp
    e2a8:	dfc00117 	ldw	ra,4(sp)
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00204 	addi	sp,sp,8
    e2b4:	f800283a 	ret

0000e2b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e2b8:	defff304 	addi	sp,sp,-52
    e2bc:	dfc00c15 	stw	ra,48(sp)
    e2c0:	df000b15 	stw	fp,44(sp)
    e2c4:	df000b04 	addi	fp,sp,44
    e2c8:	e13ffc15 	stw	r4,-16(fp)
    e2cc:	e17ffd15 	stw	r5,-12(fp)
    e2d0:	e1bffe15 	stw	r6,-8(fp)
    e2d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e2d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e2dc:	e0bffd17 	ldw	r2,-12(fp)
    e2e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e2e4:	00003806 	br	e3c8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e2e8:	e0bffc17 	ldw	r2,-16(fp)
    e2ec:	10800c17 	ldw	r2,48(r2)
    e2f0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    e2f4:	e0bffc17 	ldw	r2,-16(fp)
    e2f8:	10800d17 	ldw	r2,52(r2)
    e2fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e300:	e0fff817 	ldw	r3,-32(fp)
    e304:	e0bff517 	ldw	r2,-44(fp)
    e308:	1880062e 	bgeu	r3,r2,e324 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e30c:	e0fff517 	ldw	r3,-44(fp)
    e310:	e0bff817 	ldw	r2,-32(fp)
    e314:	1885c83a 	sub	r2,r3,r2
    e318:	10bfffc4 	addi	r2,r2,-1
    e31c:	e0bff615 	stw	r2,-40(fp)
    e320:	00000b06 	br	e350 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e324:	e0bff517 	ldw	r2,-44(fp)
    e328:	10000526 	beq	r2,zero,e340 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e32c:	00c20004 	movi	r3,2048
    e330:	e0bff817 	ldw	r2,-32(fp)
    e334:	1885c83a 	sub	r2,r3,r2
    e338:	e0bff615 	stw	r2,-40(fp)
    e33c:	00000406 	br	e350 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e340:	00c1ffc4 	movi	r3,2047
    e344:	e0bff817 	ldw	r2,-32(fp)
    e348:	1885c83a 	sub	r2,r3,r2
    e34c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e350:	e0bff617 	ldw	r2,-40(fp)
    e354:	1000011e 	bne	r2,zero,e35c <altera_avalon_jtag_uart_write+0xa4>
        break;
    e358:	00001d06 	br	e3d0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    e35c:	e0fffe17 	ldw	r3,-8(fp)
    e360:	e0bff617 	ldw	r2,-40(fp)
    e364:	1880022e 	bgeu	r3,r2,e370 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    e368:	e0bffe17 	ldw	r2,-8(fp)
    e36c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e370:	e0bff817 	ldw	r2,-32(fp)
    e374:	10820e04 	addi	r2,r2,2104
    e378:	e0fffc17 	ldw	r3,-16(fp)
    e37c:	1885883a 	add	r2,r3,r2
    e380:	1009883a 	mov	r4,r2
    e384:	e17ffd17 	ldw	r5,-12(fp)
    e388:	e1bff617 	ldw	r6,-40(fp)
    e38c:	0005edc0 	call	5edc <memcpy>
      ptr   += n;
    e390:	e0fffd17 	ldw	r3,-12(fp)
    e394:	e0bff617 	ldw	r2,-40(fp)
    e398:	1885883a 	add	r2,r3,r2
    e39c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e3a0:	e0fffe17 	ldw	r3,-8(fp)
    e3a4:	e0bff617 	ldw	r2,-40(fp)
    e3a8:	1885c83a 	sub	r2,r3,r2
    e3ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e3b0:	e0fff817 	ldw	r3,-32(fp)
    e3b4:	e0bff617 	ldw	r2,-40(fp)
    e3b8:	1885883a 	add	r2,r3,r2
    e3bc:	10c1ffcc 	andi	r3,r2,2047
    e3c0:	e0bffc17 	ldw	r2,-16(fp)
    e3c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e3c8:	e0bffe17 	ldw	r2,-8(fp)
    e3cc:	00bfc616 	blt	zero,r2,e2e8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3d0:	0005303a 	rdctl	r2,status
    e3d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3d8:	e0fffa17 	ldw	r3,-24(fp)
    e3dc:	00bfff84 	movi	r2,-2
    e3e0:	1884703a 	and	r2,r3,r2
    e3e4:	1001703a 	wrctl	status,r2
  
  return context;
    e3e8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e3ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e3f0:	e0bffc17 	ldw	r2,-16(fp)
    e3f4:	10800817 	ldw	r2,32(r2)
    e3f8:	10c00094 	ori	r3,r2,2
    e3fc:	e0bffc17 	ldw	r2,-16(fp)
    e400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e404:	e0bffc17 	ldw	r2,-16(fp)
    e408:	10800017 	ldw	r2,0(r2)
    e40c:	10800104 	addi	r2,r2,4
    e410:	1007883a 	mov	r3,r2
    e414:	e0bffc17 	ldw	r2,-16(fp)
    e418:	10800817 	ldw	r2,32(r2)
    e41c:	18800035 	stwio	r2,0(r3)
    e420:	e0bff917 	ldw	r2,-28(fp)
    e424:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e428:	e0bffb17 	ldw	r2,-20(fp)
    e42c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e430:	e0bffe17 	ldw	r2,-8(fp)
    e434:	0080120e 	bge	zero,r2,e480 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    e438:	e0bfff17 	ldw	r2,-4(fp)
    e43c:	1090000c 	andi	r2,r2,16384
    e440:	10000126 	beq	r2,zero,e448 <altera_avalon_jtag_uart_write+0x190>
        break;
    e444:	00001006 	br	e488 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e448:	0001883a 	nop
    e44c:	e0bffc17 	ldw	r2,-16(fp)
    e450:	10c00d17 	ldw	r3,52(r2)
    e454:	e0bff517 	ldw	r2,-44(fp)
    e458:	1880051e 	bne	r3,r2,e470 <altera_avalon_jtag_uart_write+0x1b8>
    e45c:	e0bffc17 	ldw	r2,-16(fp)
    e460:	10c00917 	ldw	r3,36(r2)
    e464:	e0bffc17 	ldw	r2,-16(fp)
    e468:	10800117 	ldw	r2,4(r2)
    e46c:	18bff736 	bltu	r3,r2,e44c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e470:	e0bffc17 	ldw	r2,-16(fp)
    e474:	10800917 	ldw	r2,36(r2)
    e478:	10000126 	beq	r2,zero,e480 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    e47c:	00000206 	br	e488 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    e480:	e0bffe17 	ldw	r2,-8(fp)
    e484:	00bf9716 	blt	zero,r2,e2e4 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e488:	e0fffd17 	ldw	r3,-12(fp)
    e48c:	e0bff717 	ldw	r2,-36(fp)
    e490:	18800426 	beq	r3,r2,e4a4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    e494:	e0fffd17 	ldw	r3,-12(fp)
    e498:	e0bff717 	ldw	r2,-36(fp)
    e49c:	1885c83a 	sub	r2,r3,r2
    e4a0:	00000606 	br	e4bc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    e4a4:	e0bfff17 	ldw	r2,-4(fp)
    e4a8:	1090000c 	andi	r2,r2,16384
    e4ac:	10000226 	beq	r2,zero,e4b8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    e4b0:	00bffd44 	movi	r2,-11
    e4b4:	00000106 	br	e4bc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e4b8:	00bffec4 	movi	r2,-5
}
    e4bc:	e037883a 	mov	sp,fp
    e4c0:	dfc00117 	ldw	ra,4(sp)
    e4c4:	df000017 	ldw	fp,0(sp)
    e4c8:	dec00204 	addi	sp,sp,8
    e4cc:	f800283a 	ret

0000e4d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e4d0:	defffa04 	addi	sp,sp,-24
    e4d4:	dfc00515 	stw	ra,20(sp)
    e4d8:	df000415 	stw	fp,16(sp)
    e4dc:	df000404 	addi	fp,sp,16
    e4e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e4e4:	0007883a 	mov	r3,zero
    e4e8:	e0bfff17 	ldw	r2,-4(fp)
    e4ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e4f0:	e0bfff17 	ldw	r2,-4(fp)
    e4f4:	10800104 	addi	r2,r2,4
    e4f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e4fc:	0005303a 	rdctl	r2,status
    e500:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e504:	e0fffd17 	ldw	r3,-12(fp)
    e508:	00bfff84 	movi	r2,-2
    e50c:	1884703a 	and	r2,r3,r2
    e510:	1001703a 	wrctl	status,r2
  
  return context;
    e514:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e518:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e51c:	000f1980 	call	f198 <alt_tick>
    e520:	e0bffc17 	ldw	r2,-16(fp)
    e524:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e528:	e0bffe17 	ldw	r2,-8(fp)
    e52c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e530:	e037883a 	mov	sp,fp
    e534:	dfc00117 	ldw	ra,4(sp)
    e538:	df000017 	ldw	fp,0(sp)
    e53c:	dec00204 	addi	sp,sp,8
    e540:	f800283a 	ret

0000e544 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e544:	defff804 	addi	sp,sp,-32
    e548:	dfc00715 	stw	ra,28(sp)
    e54c:	df000615 	stw	fp,24(sp)
    e550:	df000604 	addi	fp,sp,24
    e554:	e13ffc15 	stw	r4,-16(fp)
    e558:	e17ffd15 	stw	r5,-12(fp)
    e55c:	e1bffe15 	stw	r6,-8(fp)
    e560:	e1ffff15 	stw	r7,-4(fp)
    e564:	e0bfff17 	ldw	r2,-4(fp)
    e568:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e56c:	00800074 	movhi	r2,1
    e570:	108c9804 	addi	r2,r2,12896
    e574:	10800017 	ldw	r2,0(r2)
    e578:	1000041e 	bne	r2,zero,e58c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e57c:	00800074 	movhi	r2,1
    e580:	108c9804 	addi	r2,r2,12896
    e584:	e0fffb17 	ldw	r3,-20(fp)
    e588:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e58c:	e0bffc17 	ldw	r2,-16(fp)
    e590:	10800104 	addi	r2,r2,4
    e594:	00c001c4 	movi	r3,7
    e598:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e59c:	d8000015 	stw	zero,0(sp)
    e5a0:	e13ffd17 	ldw	r4,-12(fp)
    e5a4:	e17ffe17 	ldw	r5,-8(fp)
    e5a8:	01800074 	movhi	r6,1
    e5ac:	31b93404 	addi	r6,r6,-6960
    e5b0:	e1fffc17 	ldw	r7,-16(fp)
    e5b4:	000ea840 	call	ea84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e5b8:	e037883a 	mov	sp,fp
    e5bc:	dfc00117 	ldw	ra,4(sp)
    e5c0:	df000017 	ldw	fp,0(sp)
    e5c4:	dec00204 	addi	sp,sp,8
    e5c8:	f800283a 	ret

0000e5cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e5cc:	defff504 	addi	sp,sp,-44
    e5d0:	df000a15 	stw	fp,40(sp)
    e5d4:	df000a04 	addi	fp,sp,40
    e5d8:	e13ffc15 	stw	r4,-16(fp)
    e5dc:	e17ffd15 	stw	r5,-12(fp)
    e5e0:	e1bffe15 	stw	r6,-8(fp)
    e5e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e5e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e5ec:	00800074 	movhi	r2,1
    e5f0:	108c9804 	addi	r2,r2,12896
    e5f4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e5f8:	10003f26 	beq	r2,zero,e6f8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e5fc:	e0bffc17 	ldw	r2,-16(fp)
    e600:	10003b26 	beq	r2,zero,e6f0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e604:	e0bffc17 	ldw	r2,-16(fp)
    e608:	e0fffe17 	ldw	r3,-8(fp)
    e60c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e610:	e0bffc17 	ldw	r2,-16(fp)
    e614:	e0ffff17 	ldw	r3,-4(fp)
    e618:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e61c:	0005303a 	rdctl	r2,status
    e620:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e624:	e0fff817 	ldw	r3,-32(fp)
    e628:	00bfff84 	movi	r2,-2
    e62c:	1884703a 	and	r2,r3,r2
    e630:	1001703a 	wrctl	status,r2
  
  return context;
    e634:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    e638:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e63c:	00800074 	movhi	r2,1
    e640:	108c9904 	addi	r2,r2,12900
    e644:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e648:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e64c:	e0fffd17 	ldw	r3,-12(fp)
    e650:	e0bff617 	ldw	r2,-40(fp)
    e654:	1885883a 	add	r2,r3,r2
    e658:	10c00044 	addi	r3,r2,1
    e65c:	e0bffc17 	ldw	r2,-16(fp)
    e660:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e664:	e0bffc17 	ldw	r2,-16(fp)
    e668:	10c00217 	ldw	r3,8(r2)
    e66c:	e0bff617 	ldw	r2,-40(fp)
    e670:	1880042e 	bgeu	r3,r2,e684 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e674:	e0bffc17 	ldw	r2,-16(fp)
    e678:	00c00044 	movi	r3,1
    e67c:	10c00405 	stb	r3,16(r2)
    e680:	00000206 	br	e68c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e684:	e0bffc17 	ldw	r2,-16(fp)
    e688:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e68c:	e0fffc17 	ldw	r3,-16(fp)
    e690:	00800074 	movhi	r2,1
    e694:	1085cf04 	addi	r2,r2,5948
    e698:	e0bff915 	stw	r2,-28(fp)
    e69c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e6a0:	e0bffa17 	ldw	r2,-24(fp)
    e6a4:	e0fff917 	ldw	r3,-28(fp)
    e6a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e6ac:	e0bff917 	ldw	r2,-28(fp)
    e6b0:	10c00017 	ldw	r3,0(r2)
    e6b4:	e0bffa17 	ldw	r2,-24(fp)
    e6b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e6bc:	e0bff917 	ldw	r2,-28(fp)
    e6c0:	10800017 	ldw	r2,0(r2)
    e6c4:	e0fffa17 	ldw	r3,-24(fp)
    e6c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e6cc:	e0bff917 	ldw	r2,-28(fp)
    e6d0:	e0fffa17 	ldw	r3,-24(fp)
    e6d4:	10c00015 	stw	r3,0(r2)
    e6d8:	e0bff717 	ldw	r2,-36(fp)
    e6dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6e0:	e0bffb17 	ldw	r2,-20(fp)
    e6e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e6e8:	0005883a 	mov	r2,zero
    e6ec:	00000306 	br	e6fc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e6f0:	00bffa84 	movi	r2,-22
    e6f4:	00000106 	br	e6fc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e6f8:	00bfde84 	movi	r2,-134
  }
}
    e6fc:	e037883a 	mov	sp,fp
    e700:	df000017 	ldw	fp,0(sp)
    e704:	dec00104 	addi	sp,sp,4
    e708:	f800283a 	ret

0000e70c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    e70c:	defffa04 	addi	sp,sp,-24
    e710:	dfc00515 	stw	ra,20(sp)
    e714:	df000415 	stw	fp,16(sp)
    e718:	df000404 	addi	fp,sp,16
    e71c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    e720:	008000c4 	movi	r2,3
    e724:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    e728:	e0fffd17 	ldw	r3,-12(fp)
    e72c:	008003f4 	movhi	r2,15
    e730:	10909004 	addi	r2,r2,16960
    e734:	1885383a 	mul	r2,r3,r2
    e738:	01017db4 	movhi	r4,1526
    e73c:	21384004 	addi	r4,r4,-7936
    e740:	100b883a 	mov	r5,r2
    e744:	000a9dc0 	call	a9dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    e748:	01200034 	movhi	r4,32768
    e74c:	213fffc4 	addi	r4,r4,-1
    e750:	100b883a 	mov	r5,r2
    e754:	000a9dc0 	call	a9dc <__udivsi3>
    e758:	e13fff17 	ldw	r4,-4(fp)
    e75c:	100b883a 	mov	r5,r2
    e760:	000a9dc0 	call	a9dc <__udivsi3>
    e764:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    e768:	e0bffe17 	ldw	r2,-8(fp)
    e76c:	10002a26 	beq	r2,zero,e818 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    e770:	e03ffc15 	stw	zero,-16(fp)
    e774:	00001706 	br	e7d4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    e778:	00a00034 	movhi	r2,32768
    e77c:	10bfffc4 	addi	r2,r2,-1
    e780:	10bfffc4 	addi	r2,r2,-1
    e784:	103ffe1e 	bne	r2,zero,e780 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    e788:	e0fffd17 	ldw	r3,-12(fp)
    e78c:	008003f4 	movhi	r2,15
    e790:	10909004 	addi	r2,r2,16960
    e794:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    e798:	01017db4 	movhi	r4,1526
    e79c:	21384004 	addi	r4,r4,-7936
    e7a0:	100b883a 	mov	r5,r2
    e7a4:	000a9dc0 	call	a9dc <__udivsi3>
    e7a8:	01200034 	movhi	r4,32768
    e7ac:	213fffc4 	addi	r4,r4,-1
    e7b0:	100b883a 	mov	r5,r2
    e7b4:	000a9dc0 	call	a9dc <__udivsi3>
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	10c5c83a 	sub	r2,r2,r3
    e7c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    e7c8:	e0bffc17 	ldw	r2,-16(fp)
    e7cc:	10800044 	addi	r2,r2,1
    e7d0:	e0bffc15 	stw	r2,-16(fp)
    e7d4:	e0fffc17 	ldw	r3,-16(fp)
    e7d8:	e0bffe17 	ldw	r2,-8(fp)
    e7dc:	18bfe616 	blt	r3,r2,e778 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e7e0:	e0fffd17 	ldw	r3,-12(fp)
    e7e4:	008003f4 	movhi	r2,15
    e7e8:	10909004 	addi	r2,r2,16960
    e7ec:	1885383a 	mul	r2,r3,r2
    e7f0:	01017db4 	movhi	r4,1526
    e7f4:	21384004 	addi	r4,r4,-7936
    e7f8:	100b883a 	mov	r5,r2
    e7fc:	000a9dc0 	call	a9dc <__udivsi3>
    e800:	1007883a 	mov	r3,r2
    e804:	e0bfff17 	ldw	r2,-4(fp)
    e808:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e80c:	10bfffc4 	addi	r2,r2,-1
    e810:	103ffe1e 	bne	r2,zero,e80c <alt_busy_sleep+0x100>
    e814:	00000d06 	br	e84c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e818:	e0fffd17 	ldw	r3,-12(fp)
    e81c:	008003f4 	movhi	r2,15
    e820:	10909004 	addi	r2,r2,16960
    e824:	1885383a 	mul	r2,r3,r2
    e828:	01017db4 	movhi	r4,1526
    e82c:	21384004 	addi	r4,r4,-7936
    e830:	100b883a 	mov	r5,r2
    e834:	000a9dc0 	call	a9dc <__udivsi3>
    e838:	1007883a 	mov	r3,r2
    e83c:	e0bfff17 	ldw	r2,-4(fp)
    e840:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e844:	10bfffc4 	addi	r2,r2,-1
    e848:	00bffe16 	blt	zero,r2,e844 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    e84c:	0005883a 	mov	r2,zero
}
    e850:	e037883a 	mov	sp,fp
    e854:	dfc00117 	ldw	ra,4(sp)
    e858:	df000017 	ldw	fp,0(sp)
    e85c:	dec00204 	addi	sp,sp,8
    e860:	f800283a 	ret

0000e864 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e864:	defffe04 	addi	sp,sp,-8
    e868:	df000115 	stw	fp,4(sp)
    e86c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e870:	e03fff15 	stw	zero,-4(fp)
    e874:	00000506 	br	e88c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e878:	e0bfff17 	ldw	r2,-4(fp)
    e87c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e880:	e0bfff17 	ldw	r2,-4(fp)
    e884:	10800804 	addi	r2,r2,32
    e888:	e0bfff15 	stw	r2,-4(fp)
    e88c:	e0bfff17 	ldw	r2,-4(fp)
    e890:	10808030 	cmpltui	r2,r2,512
    e894:	103ff81e 	bne	r2,zero,e878 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e898:	e037883a 	mov	sp,fp
    e89c:	df000017 	ldw	fp,0(sp)
    e8a0:	dec00104 	addi	sp,sp,4
    e8a4:	f800283a 	ret

0000e8a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8a8:	defffe04 	addi	sp,sp,-8
    e8ac:	dfc00115 	stw	ra,4(sp)
    e8b0:	df000015 	stw	fp,0(sp)
    e8b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e8b8:	00800074 	movhi	r2,1
    e8bc:	1085cc04 	addi	r2,r2,5936
    e8c0:	10800017 	ldw	r2,0(r2)
    e8c4:	10000526 	beq	r2,zero,e8dc <alt_get_errno+0x34>
    e8c8:	00800074 	movhi	r2,1
    e8cc:	1085cc04 	addi	r2,r2,5936
    e8d0:	10800017 	ldw	r2,0(r2)
    e8d4:	103ee83a 	callr	r2
    e8d8:	00000206 	br	e8e4 <alt_get_errno+0x3c>
    e8dc:	00800074 	movhi	r2,1
    e8e0:	108c9304 	addi	r2,r2,12876
}
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	dfc00117 	ldw	ra,4(sp)
    e8ec:	df000017 	ldw	fp,0(sp)
    e8f0:	dec00204 	addi	sp,sp,8
    e8f4:	f800283a 	ret

0000e8f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e8f8:	defffa04 	addi	sp,sp,-24
    e8fc:	dfc00515 	stw	ra,20(sp)
    e900:	df000415 	stw	fp,16(sp)
    e904:	df000404 	addi	fp,sp,16
    e908:	e13ffe15 	stw	r4,-8(fp)
    e90c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e910:	e0bffe17 	ldw	r2,-8(fp)
    e914:	10000326 	beq	r2,zero,e924 <alt_dev_llist_insert+0x2c>
    e918:	e0bffe17 	ldw	r2,-8(fp)
    e91c:	10800217 	ldw	r2,8(r2)
    e920:	1000061e 	bne	r2,zero,e93c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e924:	000e8a80 	call	e8a8 <alt_get_errno>
    e928:	1007883a 	mov	r3,r2
    e92c:	00800584 	movi	r2,22
    e930:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e934:	00bffa84 	movi	r2,-22
    e938:	00001306 	br	e988 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e93c:	e0bffe17 	ldw	r2,-8(fp)
    e940:	e0ffff17 	ldw	r3,-4(fp)
    e944:	e0fffc15 	stw	r3,-16(fp)
    e948:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e94c:	e0bffd17 	ldw	r2,-12(fp)
    e950:	e0fffc17 	ldw	r3,-16(fp)
    e954:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e958:	e0bffc17 	ldw	r2,-16(fp)
    e95c:	10c00017 	ldw	r3,0(r2)
    e960:	e0bffd17 	ldw	r2,-12(fp)
    e964:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10800017 	ldw	r2,0(r2)
    e970:	e0fffd17 	ldw	r3,-12(fp)
    e974:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e978:	e0bffc17 	ldw	r2,-16(fp)
    e97c:	e0fffd17 	ldw	r3,-12(fp)
    e980:	10c00015 	stw	r3,0(r2)

  return 0;  
    e984:	0005883a 	mov	r2,zero
}
    e988:	e037883a 	mov	sp,fp
    e98c:	dfc00117 	ldw	ra,4(sp)
    e990:	df000017 	ldw	fp,0(sp)
    e994:	dec00204 	addi	sp,sp,8
    e998:	f800283a 	ret

0000e99c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e99c:	defffd04 	addi	sp,sp,-12
    e9a0:	dfc00215 	stw	ra,8(sp)
    e9a4:	df000115 	stw	fp,4(sp)
    e9a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e9ac:	00800074 	movhi	r2,1
    e9b0:	10be5004 	addi	r2,r2,-1728
    e9b4:	e0bfff15 	stw	r2,-4(fp)
    e9b8:	00000606 	br	e9d4 <_do_ctors+0x38>
        (*ctor) (); 
    e9bc:	e0bfff17 	ldw	r2,-4(fp)
    e9c0:	10800017 	ldw	r2,0(r2)
    e9c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e9c8:	e0bfff17 	ldw	r2,-4(fp)
    e9cc:	10bfff04 	addi	r2,r2,-4
    e9d0:	e0bfff15 	stw	r2,-4(fp)
    e9d4:	e0ffff17 	ldw	r3,-4(fp)
    e9d8:	00800074 	movhi	r2,1
    e9dc:	10be5104 	addi	r2,r2,-1724
    e9e0:	18bff62e 	bgeu	r3,r2,e9bc <_do_ctors+0x20>
        (*ctor) (); 
}
    e9e4:	e037883a 	mov	sp,fp
    e9e8:	dfc00117 	ldw	ra,4(sp)
    e9ec:	df000017 	ldw	fp,0(sp)
    e9f0:	dec00204 	addi	sp,sp,8
    e9f4:	f800283a 	ret

0000e9f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e9f8:	defffd04 	addi	sp,sp,-12
    e9fc:	dfc00215 	stw	ra,8(sp)
    ea00:	df000115 	stw	fp,4(sp)
    ea04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ea08:	00800074 	movhi	r2,1
    ea0c:	10be5004 	addi	r2,r2,-1728
    ea10:	e0bfff15 	stw	r2,-4(fp)
    ea14:	00000606 	br	ea30 <_do_dtors+0x38>
        (*dtor) (); 
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	10800017 	ldw	r2,0(r2)
    ea20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ea24:	e0bfff17 	ldw	r2,-4(fp)
    ea28:	10bfff04 	addi	r2,r2,-4
    ea2c:	e0bfff15 	stw	r2,-4(fp)
    ea30:	e0ffff17 	ldw	r3,-4(fp)
    ea34:	00800074 	movhi	r2,1
    ea38:	10be5104 	addi	r2,r2,-1724
    ea3c:	18bff62e 	bgeu	r3,r2,ea18 <_do_dtors+0x20>
        (*dtor) (); 
}
    ea40:	e037883a 	mov	sp,fp
    ea44:	dfc00117 	ldw	ra,4(sp)
    ea48:	df000017 	ldw	fp,0(sp)
    ea4c:	dec00204 	addi	sp,sp,8
    ea50:	f800283a 	ret

0000ea54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ea54:	defffe04 	addi	sp,sp,-8
    ea58:	dfc00115 	stw	ra,4(sp)
    ea5c:	df000015 	stw	fp,0(sp)
    ea60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ea64:	0009883a 	mov	r4,zero
    ea68:	01410004 	movi	r5,1024
    ea6c:	000f5140 	call	f514 <alt_icache_flush>
#endif
}
    ea70:	e037883a 	mov	sp,fp
    ea74:	dfc00117 	ldw	ra,4(sp)
    ea78:	df000017 	ldw	fp,0(sp)
    ea7c:	dec00204 	addi	sp,sp,8
    ea80:	f800283a 	ret

0000ea84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ea84:	defff904 	addi	sp,sp,-28
    ea88:	dfc00615 	stw	ra,24(sp)
    ea8c:	df000515 	stw	fp,20(sp)
    ea90:	df000504 	addi	fp,sp,20
    ea94:	e13ffc15 	stw	r4,-16(fp)
    ea98:	e17ffd15 	stw	r5,-12(fp)
    ea9c:	e1bffe15 	stw	r6,-8(fp)
    eaa0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    eaa4:	e0800217 	ldw	r2,8(fp)
    eaa8:	d8800015 	stw	r2,0(sp)
    eaac:	e13ffc17 	ldw	r4,-16(fp)
    eab0:	e17ffd17 	ldw	r5,-12(fp)
    eab4:	e1bffe17 	ldw	r6,-8(fp)
    eab8:	e1ffff17 	ldw	r7,-4(fp)
    eabc:	000ec640 	call	ec64 <alt_iic_isr_register>
}  
    eac0:	e037883a 	mov	sp,fp
    eac4:	dfc00117 	ldw	ra,4(sp)
    eac8:	df000017 	ldw	fp,0(sp)
    eacc:	dec00204 	addi	sp,sp,8
    ead0:	f800283a 	ret

0000ead4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ead4:	defff904 	addi	sp,sp,-28
    ead8:	df000615 	stw	fp,24(sp)
    eadc:	df000604 	addi	fp,sp,24
    eae0:	e13ffe15 	stw	r4,-8(fp)
    eae4:	e17fff15 	stw	r5,-4(fp)
    eae8:	e0bfff17 	ldw	r2,-4(fp)
    eaec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eaf0:	0005303a 	rdctl	r2,status
    eaf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eaf8:	e0fffb17 	ldw	r3,-20(fp)
    eafc:	00bfff84 	movi	r2,-2
    eb00:	1884703a 	and	r2,r3,r2
    eb04:	1001703a 	wrctl	status,r2
  
  return context;
    eb08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    eb0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    eb10:	e0bffa17 	ldw	r2,-24(fp)
    eb14:	00c00044 	movi	r3,1
    eb18:	1884983a 	sll	r2,r3,r2
    eb1c:	1007883a 	mov	r3,r2
    eb20:	00800074 	movhi	r2,1
    eb24:	108c9704 	addi	r2,r2,12892
    eb28:	10800017 	ldw	r2,0(r2)
    eb2c:	1886b03a 	or	r3,r3,r2
    eb30:	00800074 	movhi	r2,1
    eb34:	108c9704 	addi	r2,r2,12892
    eb38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    eb3c:	00800074 	movhi	r2,1
    eb40:	108c9704 	addi	r2,r2,12892
    eb44:	10800017 	ldw	r2,0(r2)
    eb48:	100170fa 	wrctl	ienable,r2
    eb4c:	e0bffc17 	ldw	r2,-16(fp)
    eb50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    eb5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    eb60:	0001883a 	nop
}
    eb64:	e037883a 	mov	sp,fp
    eb68:	df000017 	ldw	fp,0(sp)
    eb6c:	dec00104 	addi	sp,sp,4
    eb70:	f800283a 	ret

0000eb74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    eb74:	defff904 	addi	sp,sp,-28
    eb78:	df000615 	stw	fp,24(sp)
    eb7c:	df000604 	addi	fp,sp,24
    eb80:	e13ffe15 	stw	r4,-8(fp)
    eb84:	e17fff15 	stw	r5,-4(fp)
    eb88:	e0bfff17 	ldw	r2,-4(fp)
    eb8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb90:	0005303a 	rdctl	r2,status
    eb94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb98:	e0fffb17 	ldw	r3,-20(fp)
    eb9c:	00bfff84 	movi	r2,-2
    eba0:	1884703a 	and	r2,r3,r2
    eba4:	1001703a 	wrctl	status,r2
  
  return context;
    eba8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ebac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ebb0:	e0bffa17 	ldw	r2,-24(fp)
    ebb4:	00c00044 	movi	r3,1
    ebb8:	1884983a 	sll	r2,r3,r2
    ebbc:	0084303a 	nor	r2,zero,r2
    ebc0:	1007883a 	mov	r3,r2
    ebc4:	00800074 	movhi	r2,1
    ebc8:	108c9704 	addi	r2,r2,12892
    ebcc:	10800017 	ldw	r2,0(r2)
    ebd0:	1886703a 	and	r3,r3,r2
    ebd4:	00800074 	movhi	r2,1
    ebd8:	108c9704 	addi	r2,r2,12892
    ebdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ebe0:	00800074 	movhi	r2,1
    ebe4:	108c9704 	addi	r2,r2,12892
    ebe8:	10800017 	ldw	r2,0(r2)
    ebec:	100170fa 	wrctl	ienable,r2
    ebf0:	e0bffc17 	ldw	r2,-16(fp)
    ebf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebf8:	e0bffd17 	ldw	r2,-12(fp)
    ebfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ec00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ec04:	0001883a 	nop
}
    ec08:	e037883a 	mov	sp,fp
    ec0c:	df000017 	ldw	fp,0(sp)
    ec10:	dec00104 	addi	sp,sp,4
    ec14:	f800283a 	ret

0000ec18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ec18:	defffc04 	addi	sp,sp,-16
    ec1c:	df000315 	stw	fp,12(sp)
    ec20:	df000304 	addi	fp,sp,12
    ec24:	e13ffe15 	stw	r4,-8(fp)
    ec28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ec2c:	000530fa 	rdctl	r2,ienable
    ec30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ec34:	e0bfff17 	ldw	r2,-4(fp)
    ec38:	00c00044 	movi	r3,1
    ec3c:	1884983a 	sll	r2,r3,r2
    ec40:	1007883a 	mov	r3,r2
    ec44:	e0bffd17 	ldw	r2,-12(fp)
    ec48:	1884703a 	and	r2,r3,r2
    ec4c:	1004c03a 	cmpne	r2,r2,zero
    ec50:	10803fcc 	andi	r2,r2,255
}
    ec54:	e037883a 	mov	sp,fp
    ec58:	df000017 	ldw	fp,0(sp)
    ec5c:	dec00104 	addi	sp,sp,4
    ec60:	f800283a 	ret

0000ec64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ec64:	defff504 	addi	sp,sp,-44
    ec68:	dfc00a15 	stw	ra,40(sp)
    ec6c:	df000915 	stw	fp,36(sp)
    ec70:	df000904 	addi	fp,sp,36
    ec74:	e13ffc15 	stw	r4,-16(fp)
    ec78:	e17ffd15 	stw	r5,-12(fp)
    ec7c:	e1bffe15 	stw	r6,-8(fp)
    ec80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ec84:	00bffa84 	movi	r2,-22
    ec88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ec8c:	e0bffd17 	ldw	r2,-12(fp)
    ec90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ec94:	e0bff817 	ldw	r2,-32(fp)
    ec98:	10800808 	cmpgei	r2,r2,32
    ec9c:	1000271e 	bne	r2,zero,ed3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eca0:	0005303a 	rdctl	r2,status
    eca4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eca8:	e0fffa17 	ldw	r3,-24(fp)
    ecac:	00bfff84 	movi	r2,-2
    ecb0:	1884703a 	and	r2,r3,r2
    ecb4:	1001703a 	wrctl	status,r2
  
  return context;
    ecb8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ecbc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    ecc0:	00800074 	movhi	r2,1
    ecc4:	108ca404 	addi	r2,r2,12944
    ecc8:	e0fff817 	ldw	r3,-32(fp)
    eccc:	180690fa 	slli	r3,r3,3
    ecd0:	10c5883a 	add	r2,r2,r3
    ecd4:	e0fffe17 	ldw	r3,-8(fp)
    ecd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ecdc:	00800074 	movhi	r2,1
    ece0:	108ca404 	addi	r2,r2,12944
    ece4:	e0fff817 	ldw	r3,-32(fp)
    ece8:	180690fa 	slli	r3,r3,3
    ecec:	10c5883a 	add	r2,r2,r3
    ecf0:	10800104 	addi	r2,r2,4
    ecf4:	e0ffff17 	ldw	r3,-4(fp)
    ecf8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ecfc:	e0bffe17 	ldw	r2,-8(fp)
    ed00:	10000526 	beq	r2,zero,ed18 <alt_iic_isr_register+0xb4>
    ed04:	e0bff817 	ldw	r2,-32(fp)
    ed08:	e13ffc17 	ldw	r4,-16(fp)
    ed0c:	100b883a 	mov	r5,r2
    ed10:	000ead40 	call	ead4 <alt_ic_irq_enable>
    ed14:	00000406 	br	ed28 <alt_iic_isr_register+0xc4>
    ed18:	e0bff817 	ldw	r2,-32(fp)
    ed1c:	e13ffc17 	ldw	r4,-16(fp)
    ed20:	100b883a 	mov	r5,r2
    ed24:	000eb740 	call	eb74 <alt_ic_irq_disable>
    ed28:	e0bff715 	stw	r2,-36(fp)
    ed2c:	e0bff917 	ldw	r2,-28(fp)
    ed30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed34:	e0bffb17 	ldw	r2,-20(fp)
    ed38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ed3c:	e0bff717 	ldw	r2,-36(fp)
}
    ed40:	e037883a 	mov	sp,fp
    ed44:	dfc00117 	ldw	ra,4(sp)
    ed48:	df000017 	ldw	fp,0(sp)
    ed4c:	dec00204 	addi	sp,sp,8
    ed50:	f800283a 	ret

0000ed54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ed54:	defff904 	addi	sp,sp,-28
    ed58:	dfc00615 	stw	ra,24(sp)
    ed5c:	df000515 	stw	fp,20(sp)
    ed60:	df000504 	addi	fp,sp,20
    ed64:	e13ffc15 	stw	r4,-16(fp)
    ed68:	e17ffd15 	stw	r5,-12(fp)
    ed6c:	e1bffe15 	stw	r6,-8(fp)
    ed70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ed74:	e13ffd17 	ldw	r4,-12(fp)
    ed78:	e17ffe17 	ldw	r5,-8(fp)
    ed7c:	e1bfff17 	ldw	r6,-4(fp)
    ed80:	000efa80 	call	efa8 <open>
    ed84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ed88:	e0bffb17 	ldw	r2,-20(fp)
    ed8c:	10001c16 	blt	r2,zero,ee00 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ed90:	00800074 	movhi	r2,1
    ed94:	10814904 	addi	r2,r2,1316
    ed98:	e0fffb17 	ldw	r3,-20(fp)
    ed9c:	18c00324 	muli	r3,r3,12
    eda0:	10c5883a 	add	r2,r2,r3
    eda4:	10c00017 	ldw	r3,0(r2)
    eda8:	e0bffc17 	ldw	r2,-16(fp)
    edac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    edb0:	00800074 	movhi	r2,1
    edb4:	10814904 	addi	r2,r2,1316
    edb8:	e0fffb17 	ldw	r3,-20(fp)
    edbc:	18c00324 	muli	r3,r3,12
    edc0:	10c5883a 	add	r2,r2,r3
    edc4:	10800104 	addi	r2,r2,4
    edc8:	10c00017 	ldw	r3,0(r2)
    edcc:	e0bffc17 	ldw	r2,-16(fp)
    edd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    edd4:	00800074 	movhi	r2,1
    edd8:	10814904 	addi	r2,r2,1316
    eddc:	e0fffb17 	ldw	r3,-20(fp)
    ede0:	18c00324 	muli	r3,r3,12
    ede4:	10c5883a 	add	r2,r2,r3
    ede8:	10800204 	addi	r2,r2,8
    edec:	10c00017 	ldw	r3,0(r2)
    edf0:	e0bffc17 	ldw	r2,-16(fp)
    edf4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    edf8:	e13ffb17 	ldw	r4,-20(fp)
    edfc:	000d7380 	call	d738 <alt_release_fd>
  }
} 
    ee00:	e037883a 	mov	sp,fp
    ee04:	dfc00117 	ldw	ra,4(sp)
    ee08:	df000017 	ldw	fp,0(sp)
    ee0c:	dec00204 	addi	sp,sp,8
    ee10:	f800283a 	ret

0000ee14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    ee14:	defffb04 	addi	sp,sp,-20
    ee18:	dfc00415 	stw	ra,16(sp)
    ee1c:	df000315 	stw	fp,12(sp)
    ee20:	df000304 	addi	fp,sp,12
    ee24:	e13ffd15 	stw	r4,-12(fp)
    ee28:	e17ffe15 	stw	r5,-8(fp)
    ee2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ee30:	01000074 	movhi	r4,1
    ee34:	21014c04 	addi	r4,r4,1328
    ee38:	e17ffd17 	ldw	r5,-12(fp)
    ee3c:	01800044 	movi	r6,1
    ee40:	01c07fc4 	movi	r7,511
    ee44:	000ed540 	call	ed54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ee48:	01000074 	movhi	r4,1
    ee4c:	21014904 	addi	r4,r4,1316
    ee50:	e17ffe17 	ldw	r5,-8(fp)
    ee54:	000d883a 	mov	r6,zero
    ee58:	01c07fc4 	movi	r7,511
    ee5c:	000ed540 	call	ed54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ee60:	01000074 	movhi	r4,1
    ee64:	21014f04 	addi	r4,r4,1340
    ee68:	e17fff17 	ldw	r5,-4(fp)
    ee6c:	01800044 	movi	r6,1
    ee70:	01c07fc4 	movi	r7,511
    ee74:	000ed540 	call	ed54 <alt_open_fd>
}  
    ee78:	e037883a 	mov	sp,fp
    ee7c:	dfc00117 	ldw	ra,4(sp)
    ee80:	df000017 	ldw	fp,0(sp)
    ee84:	dec00204 	addi	sp,sp,8
    ee88:	f800283a 	ret

0000ee8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee8c:	defffe04 	addi	sp,sp,-8
    ee90:	dfc00115 	stw	ra,4(sp)
    ee94:	df000015 	stw	fp,0(sp)
    ee98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee9c:	00800074 	movhi	r2,1
    eea0:	1085cc04 	addi	r2,r2,5936
    eea4:	10800017 	ldw	r2,0(r2)
    eea8:	10000526 	beq	r2,zero,eec0 <alt_get_errno+0x34>
    eeac:	00800074 	movhi	r2,1
    eeb0:	1085cc04 	addi	r2,r2,5936
    eeb4:	10800017 	ldw	r2,0(r2)
    eeb8:	103ee83a 	callr	r2
    eebc:	00000206 	br	eec8 <alt_get_errno+0x3c>
    eec0:	00800074 	movhi	r2,1
    eec4:	108c9304 	addi	r2,r2,12876
}
    eec8:	e037883a 	mov	sp,fp
    eecc:	dfc00117 	ldw	ra,4(sp)
    eed0:	df000017 	ldw	fp,0(sp)
    eed4:	dec00204 	addi	sp,sp,8
    eed8:	f800283a 	ret

0000eedc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    eedc:	defffd04 	addi	sp,sp,-12
    eee0:	df000215 	stw	fp,8(sp)
    eee4:	df000204 	addi	fp,sp,8
    eee8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    eeec:	e0bfff17 	ldw	r2,-4(fp)
    eef0:	10800217 	ldw	r2,8(r2)
    eef4:	10d00034 	orhi	r3,r2,16384
    eef8:	e0bfff17 	ldw	r2,-4(fp)
    eefc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ef00:	e03ffe15 	stw	zero,-8(fp)
    ef04:	00001d06 	br	ef7c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ef08:	00800074 	movhi	r2,1
    ef0c:	10814904 	addi	r2,r2,1316
    ef10:	e0fffe17 	ldw	r3,-8(fp)
    ef14:	18c00324 	muli	r3,r3,12
    ef18:	10c5883a 	add	r2,r2,r3
    ef1c:	10c00017 	ldw	r3,0(r2)
    ef20:	e0bfff17 	ldw	r2,-4(fp)
    ef24:	10800017 	ldw	r2,0(r2)
    ef28:	1880111e 	bne	r3,r2,ef70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef2c:	00800074 	movhi	r2,1
    ef30:	10814904 	addi	r2,r2,1316
    ef34:	e0fffe17 	ldw	r3,-8(fp)
    ef38:	18c00324 	muli	r3,r3,12
    ef3c:	10c5883a 	add	r2,r2,r3
    ef40:	10800204 	addi	r2,r2,8
    ef44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ef48:	1000090e 	bge	r2,zero,ef70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ef4c:	e0bffe17 	ldw	r2,-8(fp)
    ef50:	10c00324 	muli	r3,r2,12
    ef54:	00800074 	movhi	r2,1
    ef58:	10814904 	addi	r2,r2,1316
    ef5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef60:	e0bfff17 	ldw	r2,-4(fp)
    ef64:	18800226 	beq	r3,r2,ef70 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ef68:	00bffcc4 	movi	r2,-13
    ef6c:	00000a06 	br	ef98 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ef70:	e0bffe17 	ldw	r2,-8(fp)
    ef74:	10800044 	addi	r2,r2,1
    ef78:	e0bffe15 	stw	r2,-8(fp)
    ef7c:	00800074 	movhi	r2,1
    ef80:	1085cb04 	addi	r2,r2,5932
    ef84:	10800017 	ldw	r2,0(r2)
    ef88:	1007883a 	mov	r3,r2
    ef8c:	e0bffe17 	ldw	r2,-8(fp)
    ef90:	18bfdd2e 	bgeu	r3,r2,ef08 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ef94:	0005883a 	mov	r2,zero
}
    ef98:	e037883a 	mov	sp,fp
    ef9c:	df000017 	ldw	fp,0(sp)
    efa0:	dec00104 	addi	sp,sp,4
    efa4:	f800283a 	ret

0000efa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    efa8:	defff604 	addi	sp,sp,-40
    efac:	dfc00915 	stw	ra,36(sp)
    efb0:	df000815 	stw	fp,32(sp)
    efb4:	df000804 	addi	fp,sp,32
    efb8:	e13ffd15 	stw	r4,-12(fp)
    efbc:	e17ffe15 	stw	r5,-8(fp)
    efc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    efc4:	00bfffc4 	movi	r2,-1
    efc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    efcc:	00bffb44 	movi	r2,-19
    efd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    efd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    efd8:	e13ffd17 	ldw	r4,-12(fp)
    efdc:	01400074 	movhi	r5,1
    efe0:	2945c904 	addi	r5,r5,5924
    efe4:	000f2bc0 	call	f2bc <alt_find_dev>
    efe8:	e0bff815 	stw	r2,-32(fp)
    efec:	e0bff817 	ldw	r2,-32(fp)
    eff0:	1000051e 	bne	r2,zero,f008 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    eff4:	e13ffd17 	ldw	r4,-12(fp)
    eff8:	000f34c0 	call	f34c <alt_find_file>
    effc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f000:	00800044 	movi	r2,1
    f004:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f008:	e0bff817 	ldw	r2,-32(fp)
    f00c:	10002926 	beq	r2,zero,f0b4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f010:	e13ff817 	ldw	r4,-32(fp)
    f014:	000f4600 	call	f460 <alt_get_fd>
    f018:	e0bff915 	stw	r2,-28(fp)
    f01c:	e0bff917 	ldw	r2,-28(fp)
    f020:	1000030e 	bge	r2,zero,f030 <open+0x88>
    {
      status = index;
    f024:	e0bff917 	ldw	r2,-28(fp)
    f028:	e0bffa15 	stw	r2,-24(fp)
    f02c:	00002306 	br	f0bc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f030:	e0bff917 	ldw	r2,-28(fp)
    f034:	10c00324 	muli	r3,r2,12
    f038:	00800074 	movhi	r2,1
    f03c:	10814904 	addi	r2,r2,1316
    f040:	1885883a 	add	r2,r3,r2
    f044:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f048:	e0fffe17 	ldw	r3,-8(fp)
    f04c:	00900034 	movhi	r2,16384
    f050:	10bfffc4 	addi	r2,r2,-1
    f054:	1886703a 	and	r3,r3,r2
    f058:	e0bffc17 	ldw	r2,-16(fp)
    f05c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f060:	e0bffb17 	ldw	r2,-20(fp)
    f064:	1000051e 	bne	r2,zero,f07c <open+0xd4>
    f068:	e13ffc17 	ldw	r4,-16(fp)
    f06c:	000eedc0 	call	eedc <alt_file_locked>
    f070:	e0bffa15 	stw	r2,-24(fp)
    f074:	e0bffa17 	ldw	r2,-24(fp)
    f078:	10001016 	blt	r2,zero,f0bc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f07c:	e0bff817 	ldw	r2,-32(fp)
    f080:	10800317 	ldw	r2,12(r2)
    f084:	10000826 	beq	r2,zero,f0a8 <open+0x100>
    f088:	e0bff817 	ldw	r2,-32(fp)
    f08c:	10800317 	ldw	r2,12(r2)
    f090:	e13ffc17 	ldw	r4,-16(fp)
    f094:	e17ffd17 	ldw	r5,-12(fp)
    f098:	e1bffe17 	ldw	r6,-8(fp)
    f09c:	e1ffff17 	ldw	r7,-4(fp)
    f0a0:	103ee83a 	callr	r2
    f0a4:	00000106 	br	f0ac <open+0x104>
    f0a8:	0005883a 	mov	r2,zero
    f0ac:	e0bffa15 	stw	r2,-24(fp)
    f0b0:	00000206 	br	f0bc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f0b4:	00bffb44 	movi	r2,-19
    f0b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f0bc:	e0bffa17 	ldw	r2,-24(fp)
    f0c0:	1000090e 	bge	r2,zero,f0e8 <open+0x140>
  {
    alt_release_fd (index);  
    f0c4:	e13ff917 	ldw	r4,-28(fp)
    f0c8:	000d7380 	call	d738 <alt_release_fd>
    ALT_ERRNO = -status;
    f0cc:	000ee8c0 	call	ee8c <alt_get_errno>
    f0d0:	1007883a 	mov	r3,r2
    f0d4:	e0bffa17 	ldw	r2,-24(fp)
    f0d8:	0085c83a 	sub	r2,zero,r2
    f0dc:	18800015 	stw	r2,0(r3)
    return -1;
    f0e0:	00bfffc4 	movi	r2,-1
    f0e4:	00000106 	br	f0ec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f0e8:	e0bff917 	ldw	r2,-28(fp)
}
    f0ec:	e037883a 	mov	sp,fp
    f0f0:	dfc00117 	ldw	ra,4(sp)
    f0f4:	df000017 	ldw	fp,0(sp)
    f0f8:	dec00204 	addi	sp,sp,8
    f0fc:	f800283a 	ret

0000f100 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f100:	defffa04 	addi	sp,sp,-24
    f104:	df000515 	stw	fp,20(sp)
    f108:	df000504 	addi	fp,sp,20
    f10c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f110:	0005303a 	rdctl	r2,status
    f114:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f118:	e0fffc17 	ldw	r3,-16(fp)
    f11c:	00bfff84 	movi	r2,-2
    f120:	1884703a 	and	r2,r3,r2
    f124:	1001703a 	wrctl	status,r2
  
  return context;
    f128:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f12c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f138:	e0bffd17 	ldw	r2,-12(fp)
    f13c:	10800017 	ldw	r2,0(r2)
    f140:	e0fffd17 	ldw	r3,-12(fp)
    f144:	18c00117 	ldw	r3,4(r3)
    f148:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f14c:	e0bffd17 	ldw	r2,-12(fp)
    f150:	10800117 	ldw	r2,4(r2)
    f154:	e0fffd17 	ldw	r3,-12(fp)
    f158:	18c00017 	ldw	r3,0(r3)
    f15c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f160:	e0bffd17 	ldw	r2,-12(fp)
    f164:	e0fffd17 	ldw	r3,-12(fp)
    f168:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f16c:	e0bffd17 	ldw	r2,-12(fp)
    f170:	e0fffd17 	ldw	r3,-12(fp)
    f174:	10c00015 	stw	r3,0(r2)
    f178:	e0bffb17 	ldw	r2,-20(fp)
    f17c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f180:	e0bffe17 	ldw	r2,-8(fp)
    f184:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f188:	e037883a 	mov	sp,fp
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00104 	addi	sp,sp,4
    f194:	f800283a 	ret

0000f198 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f198:	defffb04 	addi	sp,sp,-20
    f19c:	dfc00415 	stw	ra,16(sp)
    f1a0:	df000315 	stw	fp,12(sp)
    f1a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f1a8:	d0a00e17 	ldw	r2,-32712(gp)
    f1ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f1b0:	d0a6d817 	ldw	r2,-25760(gp)
    f1b4:	10800044 	addi	r2,r2,1
    f1b8:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f1bc:	00002e06 	br	f278 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f1c0:	e0bffd17 	ldw	r2,-12(fp)
    f1c4:	10800017 	ldw	r2,0(r2)
    f1c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f1cc:	e0bffd17 	ldw	r2,-12(fp)
    f1d0:	10800403 	ldbu	r2,16(r2)
    f1d4:	10803fcc 	andi	r2,r2,255
    f1d8:	10000426 	beq	r2,zero,f1ec <alt_tick+0x54>
    f1dc:	d0a6d817 	ldw	r2,-25760(gp)
    f1e0:	1000021e 	bne	r2,zero,f1ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f1e4:	e0bffd17 	ldw	r2,-12(fp)
    f1e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f1ec:	e0bffd17 	ldw	r2,-12(fp)
    f1f0:	10800217 	ldw	r2,8(r2)
    f1f4:	d0e6d817 	ldw	r3,-25760(gp)
    f1f8:	18801d36 	bltu	r3,r2,f270 <alt_tick+0xd8>
    f1fc:	e0bffd17 	ldw	r2,-12(fp)
    f200:	10800403 	ldbu	r2,16(r2)
    f204:	10803fcc 	andi	r2,r2,255
    f208:	1000191e 	bne	r2,zero,f270 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f20c:	e0bffd17 	ldw	r2,-12(fp)
    f210:	10800317 	ldw	r2,12(r2)
    f214:	e0fffd17 	ldw	r3,-12(fp)
    f218:	18c00517 	ldw	r3,20(r3)
    f21c:	1809883a 	mov	r4,r3
    f220:	103ee83a 	callr	r2
    f224:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f228:	e0bfff17 	ldw	r2,-4(fp)
    f22c:	1000031e 	bne	r2,zero,f23c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f230:	e13ffd17 	ldw	r4,-12(fp)
    f234:	000f1000 	call	f100 <alt_alarm_stop>
    f238:	00000d06 	br	f270 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f23c:	e0bffd17 	ldw	r2,-12(fp)
    f240:	10c00217 	ldw	r3,8(r2)
    f244:	e0bfff17 	ldw	r2,-4(fp)
    f248:	1887883a 	add	r3,r3,r2
    f24c:	e0bffd17 	ldw	r2,-12(fp)
    f250:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f254:	e0bffd17 	ldw	r2,-12(fp)
    f258:	10c00217 	ldw	r3,8(r2)
    f25c:	d0a6d817 	ldw	r2,-25760(gp)
    f260:	1880032e 	bgeu	r3,r2,f270 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f264:	e0bffd17 	ldw	r2,-12(fp)
    f268:	00c00044 	movi	r3,1
    f26c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f270:	e0bffe17 	ldw	r2,-8(fp)
    f274:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f278:	e0fffd17 	ldw	r3,-12(fp)
    f27c:	d0a00e04 	addi	r2,gp,-32712
    f280:	18bfcf1e 	bne	r3,r2,f1c0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f284:	0001883a 	nop
}
    f288:	e037883a 	mov	sp,fp
    f28c:	dfc00117 	ldw	ra,4(sp)
    f290:	df000017 	ldw	fp,0(sp)
    f294:	dec00204 	addi	sp,sp,8
    f298:	f800283a 	ret

0000f29c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    f29c:	deffff04 	addi	sp,sp,-4
    f2a0:	df000015 	stw	fp,0(sp)
    f2a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f2a8:	000170fa 	wrctl	ienable,zero
}
    f2ac:	e037883a 	mov	sp,fp
    f2b0:	df000017 	ldw	fp,0(sp)
    f2b4:	dec00104 	addi	sp,sp,4
    f2b8:	f800283a 	ret

0000f2bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f2bc:	defffa04 	addi	sp,sp,-24
    f2c0:	dfc00515 	stw	ra,20(sp)
    f2c4:	df000415 	stw	fp,16(sp)
    f2c8:	df000404 	addi	fp,sp,16
    f2cc:	e13ffe15 	stw	r4,-8(fp)
    f2d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f2d4:	e0bfff17 	ldw	r2,-4(fp)
    f2d8:	10800017 	ldw	r2,0(r2)
    f2dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f2e0:	e13ffe17 	ldw	r4,-8(fp)
    f2e4:	000736c0 	call	736c <strlen>
    f2e8:	10800044 	addi	r2,r2,1
    f2ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f2f0:	00000d06 	br	f328 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f2f4:	e0bffc17 	ldw	r2,-16(fp)
    f2f8:	10c00217 	ldw	r3,8(r2)
    f2fc:	e0bffd17 	ldw	r2,-12(fp)
    f300:	1809883a 	mov	r4,r3
    f304:	e17ffe17 	ldw	r5,-8(fp)
    f308:	100d883a 	mov	r6,r2
    f30c:	000f5ec0 	call	f5ec <memcmp>
    f310:	1000021e 	bne	r2,zero,f31c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f314:	e0bffc17 	ldw	r2,-16(fp)
    f318:	00000706 	br	f338 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f31c:	e0bffc17 	ldw	r2,-16(fp)
    f320:	10800017 	ldw	r2,0(r2)
    f324:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f328:	e0fffc17 	ldw	r3,-16(fp)
    f32c:	e0bfff17 	ldw	r2,-4(fp)
    f330:	18bff01e 	bne	r3,r2,f2f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f334:	0005883a 	mov	r2,zero
}
    f338:	e037883a 	mov	sp,fp
    f33c:	dfc00117 	ldw	ra,4(sp)
    f340:	df000017 	ldw	fp,0(sp)
    f344:	dec00204 	addi	sp,sp,8
    f348:	f800283a 	ret

0000f34c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f34c:	defffb04 	addi	sp,sp,-20
    f350:	dfc00415 	stw	ra,16(sp)
    f354:	df000315 	stw	fp,12(sp)
    f358:	df000304 	addi	fp,sp,12
    f35c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f360:	00800074 	movhi	r2,1
    f364:	1085c704 	addi	r2,r2,5916
    f368:	10800017 	ldw	r2,0(r2)
    f36c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f370:	00003106 	br	f438 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10800217 	ldw	r2,8(r2)
    f37c:	1009883a 	mov	r4,r2
    f380:	000736c0 	call	736c <strlen>
    f384:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f388:	e0bffd17 	ldw	r2,-12(fp)
    f38c:	10c00217 	ldw	r3,8(r2)
    f390:	e0bffe17 	ldw	r2,-8(fp)
    f394:	10bfffc4 	addi	r2,r2,-1
    f398:	1885883a 	add	r2,r3,r2
    f39c:	10800003 	ldbu	r2,0(r2)
    f3a0:	10803fcc 	andi	r2,r2,255
    f3a4:	1080201c 	xori	r2,r2,128
    f3a8:	10bfe004 	addi	r2,r2,-128
    f3ac:	10800bd8 	cmpnei	r2,r2,47
    f3b0:	1000031e 	bne	r2,zero,f3c0 <alt_find_file+0x74>
    {
      len -= 1;
    f3b4:	e0bffe17 	ldw	r2,-8(fp)
    f3b8:	10bfffc4 	addi	r2,r2,-1
    f3bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f3c0:	e0bffe17 	ldw	r2,-8(fp)
    f3c4:	e0ffff17 	ldw	r3,-4(fp)
    f3c8:	1885883a 	add	r2,r3,r2
    f3cc:	10800003 	ldbu	r2,0(r2)
    f3d0:	10803fcc 	andi	r2,r2,255
    f3d4:	1080201c 	xori	r2,r2,128
    f3d8:	10bfe004 	addi	r2,r2,-128
    f3dc:	10800be0 	cmpeqi	r2,r2,47
    f3e0:	1000081e 	bne	r2,zero,f404 <alt_find_file+0xb8>
    f3e4:	e0bffe17 	ldw	r2,-8(fp)
    f3e8:	e0ffff17 	ldw	r3,-4(fp)
    f3ec:	1885883a 	add	r2,r3,r2
    f3f0:	10800003 	ldbu	r2,0(r2)
    f3f4:	10803fcc 	andi	r2,r2,255
    f3f8:	1080201c 	xori	r2,r2,128
    f3fc:	10bfe004 	addi	r2,r2,-128
    f400:	10000a1e 	bne	r2,zero,f42c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f404:	e0bffd17 	ldw	r2,-12(fp)
    f408:	10c00217 	ldw	r3,8(r2)
    f40c:	e0bffe17 	ldw	r2,-8(fp)
    f410:	1809883a 	mov	r4,r3
    f414:	e17fff17 	ldw	r5,-4(fp)
    f418:	100d883a 	mov	r6,r2
    f41c:	000f5ec0 	call	f5ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f420:	1000021e 	bne	r2,zero,f42c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f424:	e0bffd17 	ldw	r2,-12(fp)
    f428:	00000806 	br	f44c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f42c:	e0bffd17 	ldw	r2,-12(fp)
    f430:	10800017 	ldw	r2,0(r2)
    f434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f438:	e0fffd17 	ldw	r3,-12(fp)
    f43c:	00800074 	movhi	r2,1
    f440:	1085c704 	addi	r2,r2,5916
    f444:	18bfcb1e 	bne	r3,r2,f374 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f448:	0005883a 	mov	r2,zero
}
    f44c:	e037883a 	mov	sp,fp
    f450:	dfc00117 	ldw	ra,4(sp)
    f454:	df000017 	ldw	fp,0(sp)
    f458:	dec00204 	addi	sp,sp,8
    f45c:	f800283a 	ret

0000f460 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f460:	defffc04 	addi	sp,sp,-16
    f464:	df000315 	stw	fp,12(sp)
    f468:	df000304 	addi	fp,sp,12
    f46c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f470:	00bffa04 	movi	r2,-24
    f474:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f478:	e03ffd15 	stw	zero,-12(fp)
    f47c:	00001d06 	br	f4f4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f480:	00800074 	movhi	r2,1
    f484:	10814904 	addi	r2,r2,1316
    f488:	e0fffd17 	ldw	r3,-12(fp)
    f48c:	18c00324 	muli	r3,r3,12
    f490:	10c5883a 	add	r2,r2,r3
    f494:	10800017 	ldw	r2,0(r2)
    f498:	1000131e 	bne	r2,zero,f4e8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f49c:	00800074 	movhi	r2,1
    f4a0:	10814904 	addi	r2,r2,1316
    f4a4:	e0fffd17 	ldw	r3,-12(fp)
    f4a8:	18c00324 	muli	r3,r3,12
    f4ac:	10c5883a 	add	r2,r2,r3
    f4b0:	e0ffff17 	ldw	r3,-4(fp)
    f4b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f4b8:	00800074 	movhi	r2,1
    f4bc:	1085cb04 	addi	r2,r2,5932
    f4c0:	10c00017 	ldw	r3,0(r2)
    f4c4:	e0bffd17 	ldw	r2,-12(fp)
    f4c8:	1880040e 	bge	r3,r2,f4dc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f4cc:	00800074 	movhi	r2,1
    f4d0:	1085cb04 	addi	r2,r2,5932
    f4d4:	e0fffd17 	ldw	r3,-12(fp)
    f4d8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f4dc:	e0bffd17 	ldw	r2,-12(fp)
    f4e0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f4e4:	00000606 	br	f500 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f4e8:	e0bffd17 	ldw	r2,-12(fp)
    f4ec:	10800044 	addi	r2,r2,1
    f4f0:	e0bffd15 	stw	r2,-12(fp)
    f4f4:	e0bffd17 	ldw	r2,-12(fp)
    f4f8:	10800810 	cmplti	r2,r2,32
    f4fc:	103fe01e 	bne	r2,zero,f480 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f500:	e0bffe17 	ldw	r2,-8(fp)
}
    f504:	e037883a 	mov	sp,fp
    f508:	df000017 	ldw	fp,0(sp)
    f50c:	dec00104 	addi	sp,sp,4
    f510:	f800283a 	ret

0000f514 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f514:	defffb04 	addi	sp,sp,-20
    f518:	df000415 	stw	fp,16(sp)
    f51c:	df000404 	addi	fp,sp,16
    f520:	e13ffe15 	stw	r4,-8(fp)
    f524:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f528:	e0bfff17 	ldw	r2,-4(fp)
    f52c:	10810070 	cmpltui	r2,r2,1025
    f530:	1000021e 	bne	r2,zero,f53c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f534:	00810004 	movi	r2,1024
    f538:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f53c:	e0fffe17 	ldw	r3,-8(fp)
    f540:	e0bfff17 	ldw	r2,-4(fp)
    f544:	1885883a 	add	r2,r3,r2
    f548:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	e0bffc15 	stw	r2,-16(fp)
    f554:	00000506 	br	f56c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f558:	e0bffc17 	ldw	r2,-16(fp)
    f55c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f560:	e0bffc17 	ldw	r2,-16(fp)
    f564:	10800804 	addi	r2,r2,32
    f568:	e0bffc15 	stw	r2,-16(fp)
    f56c:	e0fffc17 	ldw	r3,-16(fp)
    f570:	e0bffd17 	ldw	r2,-12(fp)
    f574:	18bff836 	bltu	r3,r2,f558 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f578:	e0bffe17 	ldw	r2,-8(fp)
    f57c:	108007cc 	andi	r2,r2,31
    f580:	10000226 	beq	r2,zero,f58c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f584:	e0bffc17 	ldw	r2,-16(fp)
    f588:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f58c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f590:	e037883a 	mov	sp,fp
    f594:	df000017 	ldw	fp,0(sp)
    f598:	dec00104 	addi	sp,sp,4
    f59c:	f800283a 	ret

0000f5a0 <atexit>:
    f5a0:	200b883a 	mov	r5,r4
    f5a4:	000d883a 	mov	r6,zero
    f5a8:	0009883a 	mov	r4,zero
    f5ac:	000f883a 	mov	r7,zero
    f5b0:	000f6681 	jmpi	f668 <__register_exitproc>

0000f5b4 <exit>:
    f5b4:	defffe04 	addi	sp,sp,-8
    f5b8:	000b883a 	mov	r5,zero
    f5bc:	dc000015 	stw	r16,0(sp)
    f5c0:	dfc00115 	stw	ra,4(sp)
    f5c4:	2021883a 	mov	r16,r4
    f5c8:	000f77c0 	call	f77c <__call_exitprocs>
    f5cc:	00800074 	movhi	r2,1
    f5d0:	1085c104 	addi	r2,r2,5892
    f5d4:	11000017 	ldw	r4,0(r2)
    f5d8:	20800f17 	ldw	r2,60(r4)
    f5dc:	10000126 	beq	r2,zero,f5e4 <exit+0x30>
    f5e0:	103ee83a 	callr	r2
    f5e4:	8009883a 	mov	r4,r16
    f5e8:	000f9100 	call	f910 <_exit>

0000f5ec <memcmp>:
    f5ec:	01c000c4 	movi	r7,3
    f5f0:	3980192e 	bgeu	r7,r6,f658 <memcmp+0x6c>
    f5f4:	2144b03a 	or	r2,r4,r5
    f5f8:	11c4703a 	and	r2,r2,r7
    f5fc:	10000f26 	beq	r2,zero,f63c <memcmp+0x50>
    f600:	20800003 	ldbu	r2,0(r4)
    f604:	28c00003 	ldbu	r3,0(r5)
    f608:	10c0151e 	bne	r2,r3,f660 <memcmp+0x74>
    f60c:	31bfff84 	addi	r6,r6,-2
    f610:	01ffffc4 	movi	r7,-1
    f614:	00000406 	br	f628 <memcmp+0x3c>
    f618:	20800003 	ldbu	r2,0(r4)
    f61c:	28c00003 	ldbu	r3,0(r5)
    f620:	31bfffc4 	addi	r6,r6,-1
    f624:	10c00e1e 	bne	r2,r3,f660 <memcmp+0x74>
    f628:	21000044 	addi	r4,r4,1
    f62c:	29400044 	addi	r5,r5,1
    f630:	31fff91e 	bne	r6,r7,f618 <memcmp+0x2c>
    f634:	0005883a 	mov	r2,zero
    f638:	f800283a 	ret
    f63c:	20c00017 	ldw	r3,0(r4)
    f640:	28800017 	ldw	r2,0(r5)
    f644:	1880041e 	bne	r3,r2,f658 <memcmp+0x6c>
    f648:	31bfff04 	addi	r6,r6,-4
    f64c:	21000104 	addi	r4,r4,4
    f650:	29400104 	addi	r5,r5,4
    f654:	39bff936 	bltu	r7,r6,f63c <memcmp+0x50>
    f658:	303fe91e 	bne	r6,zero,f600 <memcmp+0x14>
    f65c:	003ff506 	br	f634 <memcmp+0x48>
    f660:	10c5c83a 	sub	r2,r2,r3
    f664:	f800283a 	ret

0000f668 <__register_exitproc>:
    f668:	00800074 	movhi	r2,1
    f66c:	defffa04 	addi	sp,sp,-24
    f670:	1085c104 	addi	r2,r2,5892
    f674:	dc000315 	stw	r16,12(sp)
    f678:	14000017 	ldw	r16,0(r2)
    f67c:	dc400415 	stw	r17,16(sp)
    f680:	dfc00515 	stw	ra,20(sp)
    f684:	80805217 	ldw	r2,328(r16)
    f688:	2023883a 	mov	r17,r4
    f68c:	10003626 	beq	r2,zero,f768 <__register_exitproc+0x100>
    f690:	10c00117 	ldw	r3,4(r2)
    f694:	010007c4 	movi	r4,31
    f698:	20c00e16 	blt	r4,r3,f6d4 <__register_exitproc+0x6c>
    f69c:	1a400044 	addi	r9,r3,1
    f6a0:	8800211e 	bne	r17,zero,f728 <__register_exitproc+0xc0>
    f6a4:	18c00084 	addi	r3,r3,2
    f6a8:	18c7883a 	add	r3,r3,r3
    f6ac:	18c7883a 	add	r3,r3,r3
    f6b0:	12400115 	stw	r9,4(r2)
    f6b4:	10c7883a 	add	r3,r2,r3
    f6b8:	19400015 	stw	r5,0(r3)
    f6bc:	0005883a 	mov	r2,zero
    f6c0:	dfc00517 	ldw	ra,20(sp)
    f6c4:	dc400417 	ldw	r17,16(sp)
    f6c8:	dc000317 	ldw	r16,12(sp)
    f6cc:	dec00604 	addi	sp,sp,24
    f6d0:	f800283a 	ret
    f6d4:	00800034 	movhi	r2,0
    f6d8:	10800004 	addi	r2,r2,0
    f6dc:	10002526 	beq	r2,zero,f774 <__register_exitproc+0x10c>
    f6e0:	01006404 	movi	r4,400
    f6e4:	d9400015 	stw	r5,0(sp)
    f6e8:	d9800115 	stw	r6,4(sp)
    f6ec:	d9c00215 	stw	r7,8(sp)
    f6f0:	00000000 	call	0 <__alt_mem_sdram>
    f6f4:	d9400017 	ldw	r5,0(sp)
    f6f8:	d9800117 	ldw	r6,4(sp)
    f6fc:	d9c00217 	ldw	r7,8(sp)
    f700:	10001c26 	beq	r2,zero,f774 <__register_exitproc+0x10c>
    f704:	80c05217 	ldw	r3,328(r16)
    f708:	10000115 	stw	zero,4(r2)
    f70c:	02400044 	movi	r9,1
    f710:	10c00015 	stw	r3,0(r2)
    f714:	80805215 	stw	r2,328(r16)
    f718:	10006215 	stw	zero,392(r2)
    f71c:	10006315 	stw	zero,396(r2)
    f720:	0007883a 	mov	r3,zero
    f724:	883fdf26 	beq	r17,zero,f6a4 <__register_exitproc+0x3c>
    f728:	18d1883a 	add	r8,r3,r3
    f72c:	4211883a 	add	r8,r8,r8
    f730:	1211883a 	add	r8,r2,r8
    f734:	41802215 	stw	r6,136(r8)
    f738:	01000044 	movi	r4,1
    f73c:	11806217 	ldw	r6,392(r2)
    f740:	20c8983a 	sll	r4,r4,r3
    f744:	310cb03a 	or	r6,r6,r4
    f748:	11806215 	stw	r6,392(r2)
    f74c:	41c04215 	stw	r7,264(r8)
    f750:	01800084 	movi	r6,2
    f754:	89bfd31e 	bne	r17,r6,f6a4 <__register_exitproc+0x3c>
    f758:	11806317 	ldw	r6,396(r2)
    f75c:	3108b03a 	or	r4,r6,r4
    f760:	11006315 	stw	r4,396(r2)
    f764:	003fcf06 	br	f6a4 <__register_exitproc+0x3c>
    f768:	80805304 	addi	r2,r16,332
    f76c:	80805215 	stw	r2,328(r16)
    f770:	003fc706 	br	f690 <__register_exitproc+0x28>
    f774:	00bfffc4 	movi	r2,-1
    f778:	003fd106 	br	f6c0 <__register_exitproc+0x58>

0000f77c <__call_exitprocs>:
    f77c:	00800074 	movhi	r2,1
    f780:	1085c104 	addi	r2,r2,5892
    f784:	10800017 	ldw	r2,0(r2)
    f788:	defff404 	addi	sp,sp,-48
    f78c:	dd800815 	stw	r22,32(sp)
    f790:	d8800015 	stw	r2,0(sp)
    f794:	10805204 	addi	r2,r2,328
    f798:	dd000615 	stw	r20,24(sp)
    f79c:	dc800415 	stw	r18,16(sp)
    f7a0:	dfc00b15 	stw	ra,44(sp)
    f7a4:	df000a15 	stw	fp,40(sp)
    f7a8:	ddc00915 	stw	r23,36(sp)
    f7ac:	dd400715 	stw	r21,28(sp)
    f7b0:	dcc00515 	stw	r19,20(sp)
    f7b4:	dc400315 	stw	r17,12(sp)
    f7b8:	dc000215 	stw	r16,8(sp)
    f7bc:	2025883a 	mov	r18,r4
    f7c0:	2829883a 	mov	r20,r5
    f7c4:	d8800115 	stw	r2,4(sp)
    f7c8:	05bfffc4 	movi	r22,-1
    f7cc:	d8800017 	ldw	r2,0(sp)
    f7d0:	14c05217 	ldw	r19,328(r2)
    f7d4:	98001d26 	beq	r19,zero,f84c <__call_exitprocs+0xd0>
    f7d8:	dd400117 	ldw	r21,4(sp)
    f7dc:	98800117 	ldw	r2,4(r19)
    f7e0:	173fffc4 	addi	fp,r2,-1
    f7e4:	e0000d16 	blt	fp,zero,f81c <__call_exitprocs+0xa0>
    f7e8:	14000044 	addi	r16,r2,1
    f7ec:	8421883a 	add	r16,r16,r16
    f7f0:	8421883a 	add	r16,r16,r16
    f7f4:	84402004 	addi	r17,r16,128
    f7f8:	9c63883a 	add	r17,r19,r17
    f7fc:	9c21883a 	add	r16,r19,r16
    f800:	a0001e26 	beq	r20,zero,f87c <__call_exitprocs+0x100>
    f804:	80804017 	ldw	r2,256(r16)
    f808:	15001c26 	beq	r2,r20,f87c <__call_exitprocs+0x100>
    f80c:	e73fffc4 	addi	fp,fp,-1
    f810:	843fff04 	addi	r16,r16,-4
    f814:	8c7fff04 	addi	r17,r17,-4
    f818:	e5bff91e 	bne	fp,r22,f800 <__call_exitprocs+0x84>
    f81c:	00800034 	movhi	r2,0
    f820:	10800004 	addi	r2,r2,0
    f824:	10000926 	beq	r2,zero,f84c <__call_exitprocs+0xd0>
    f828:	98800117 	ldw	r2,4(r19)
    f82c:	1000311e 	bne	r2,zero,f8f4 <__call_exitprocs+0x178>
    f830:	98800017 	ldw	r2,0(r19)
    f834:	10003426 	beq	r2,zero,f908 <__call_exitprocs+0x18c>
    f838:	9809883a 	mov	r4,r19
    f83c:	a8800015 	stw	r2,0(r21)
    f840:	00000000 	call	0 <__alt_mem_sdram>
    f844:	acc00017 	ldw	r19,0(r21)
    f848:	983fe41e 	bne	r19,zero,f7dc <__call_exitprocs+0x60>
    f84c:	dfc00b17 	ldw	ra,44(sp)
    f850:	df000a17 	ldw	fp,40(sp)
    f854:	ddc00917 	ldw	r23,36(sp)
    f858:	dd800817 	ldw	r22,32(sp)
    f85c:	dd400717 	ldw	r21,28(sp)
    f860:	dd000617 	ldw	r20,24(sp)
    f864:	dcc00517 	ldw	r19,20(sp)
    f868:	dc800417 	ldw	r18,16(sp)
    f86c:	dc400317 	ldw	r17,12(sp)
    f870:	dc000217 	ldw	r16,8(sp)
    f874:	dec00c04 	addi	sp,sp,48
    f878:	f800283a 	ret
    f87c:	98800117 	ldw	r2,4(r19)
    f880:	80c00017 	ldw	r3,0(r16)
    f884:	10bfffc4 	addi	r2,r2,-1
    f888:	17001526 	beq	r2,fp,f8e0 <__call_exitprocs+0x164>
    f88c:	80000015 	stw	zero,0(r16)
    f890:	183fde26 	beq	r3,zero,f80c <__call_exitprocs+0x90>
    f894:	00800044 	movi	r2,1
    f898:	1708983a 	sll	r4,r2,fp
    f89c:	98806217 	ldw	r2,392(r19)
    f8a0:	9dc00117 	ldw	r23,4(r19)
    f8a4:	2084703a 	and	r2,r4,r2
    f8a8:	1000061e 	bne	r2,zero,f8c4 <__call_exitprocs+0x148>
    f8ac:	183ee83a 	callr	r3
    f8b0:	98800117 	ldw	r2,4(r19)
    f8b4:	15ffc51e 	bne	r2,r23,f7cc <__call_exitprocs+0x50>
    f8b8:	a8800017 	ldw	r2,0(r21)
    f8bc:	14ffd326 	beq	r2,r19,f80c <__call_exitprocs+0x90>
    f8c0:	003fc206 	br	f7cc <__call_exitprocs+0x50>
    f8c4:	98806317 	ldw	r2,396(r19)
    f8c8:	2084703a 	and	r2,r4,r2
    f8cc:	1000061e 	bne	r2,zero,f8e8 <__call_exitprocs+0x16c>
    f8d0:	89400017 	ldw	r5,0(r17)
    f8d4:	9009883a 	mov	r4,r18
    f8d8:	183ee83a 	callr	r3
    f8dc:	003ff406 	br	f8b0 <__call_exitprocs+0x134>
    f8e0:	9f000115 	stw	fp,4(r19)
    f8e4:	003fea06 	br	f890 <__call_exitprocs+0x114>
    f8e8:	89000017 	ldw	r4,0(r17)
    f8ec:	183ee83a 	callr	r3
    f8f0:	003fef06 	br	f8b0 <__call_exitprocs+0x134>
    f8f4:	98800017 	ldw	r2,0(r19)
    f8f8:	982b883a 	mov	r21,r19
    f8fc:	1027883a 	mov	r19,r2
    f900:	983fb61e 	bne	r19,zero,f7dc <__call_exitprocs+0x60>
    f904:	003fd106 	br	f84c <__call_exitprocs+0xd0>
    f908:	0005883a 	mov	r2,zero
    f90c:	003ffa06 	br	f8f8 <__call_exitprocs+0x17c>

0000f910 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f910:	defffd04 	addi	sp,sp,-12
    f914:	df000215 	stw	fp,8(sp)
    f918:	df000204 	addi	fp,sp,8
    f91c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f920:	0001883a 	nop
    f924:	e0bfff17 	ldw	r2,-4(fp)
    f928:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f92c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f930:	10000226 	beq	r2,zero,f93c <_exit+0x2c>
    ALT_SIM_FAIL();
    f934:	002af070 	cmpltui	zero,zero,43969
    f938:	00000106 	br	f940 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f93c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f940:	003fff06 	br	f940 <_exit+0x30>
